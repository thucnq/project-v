// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countAdditionalRequestsByStatusStmt, err = db.PrepareContext(ctx, countAdditionalRequestsByStatus); err != nil {
		return nil, fmt.Errorf("error preparing query CountAdditionalRequestsByStatus: %w", err)
	}
	if q.countDefaultPrefixesByWorkspaceIDStmt, err = db.PrepareContext(ctx, countDefaultPrefixesByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query CountDefaultPrefixesByWorkspaceID: %w", err)
	}
	if q.countDefaultShiftsByWorkspaceIDStmt, err = db.PrepareContext(ctx, countDefaultShiftsByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query CountDefaultShiftsByWorkspaceID: %w", err)
	}
	if q.countDefaultSlaByWorkspaceIDStmt, err = db.PrepareContext(ctx, countDefaultSlaByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query CountDefaultSlaByWorkspaceID: %w", err)
	}
	if q.countExistedNameSlaByWorkspaceIDStmt, err = db.PrepareContext(ctx, countExistedNameSlaByWorkspaceID); err != nil {
		return nil, fmt.Errorf("error preparing query CountExistedNameSlaByWorkspaceID: %w", err)
	}
	if q.countMinBeLongToAdvanceSettingStmt, err = db.PrepareContext(ctx, countMinBeLongToAdvanceSetting); err != nil {
		return nil, fmt.Errorf("error preparing query CountMinBeLongToAdvanceSetting: %w", err)
	}
	if q.countMinSameParticipantsStmt, err = db.PrepareContext(ctx, countMinSameParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query CountMinSameParticipants: %w", err)
	}
	if q.countMyTicketsCreatedByMeStmt, err = db.PrepareContext(ctx, countMyTicketsCreatedByMe); err != nil {
		return nil, fmt.Errorf("error preparing query CountMyTicketsCreatedByMe: %w", err)
	}
	if q.countMyTicketsOnHoldCreatedByMeStmt, err = db.PrepareContext(ctx, countMyTicketsOnHoldCreatedByMe); err != nil {
		return nil, fmt.Errorf("error preparing query CountMyTicketsOnHoldCreatedByMe: %w", err)
	}
	if q.countMyTicketsOnHoldSendToMeStmt, err = db.PrepareContext(ctx, countMyTicketsOnHoldSendToMe); err != nil {
		return nil, fmt.Errorf("error preparing query CountMyTicketsOnHoldSendToMe: %w", err)
	}
	if q.countMyTicketsSendToMeStmt, err = db.PrepareContext(ctx, countMyTicketsSendToMe); err != nil {
		return nil, fmt.Errorf("error preparing query CountMyTicketsSendToMe: %w", err)
	}
	if q.countNodesByWorkflowIDStmt, err = db.PrepareContext(ctx, countNodesByWorkflowID); err != nil {
		return nil, fmt.Errorf("error preparing query CountNodesByWorkflowID: %w", err)
	}
	if q.countParticipantExistedByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, countParticipantExistedByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query CountParticipantExistedByWorkspaceIDAndID: %w", err)
	}
	if q.countParticipantMemberByWorkspaceIDAndParticipantIDStmt, err = db.PrepareContext(ctx, countParticipantMemberByWorkspaceIDAndParticipantID); err != nil {
		return nil, fmt.Errorf("error preparing query CountParticipantMemberByWorkspaceIDAndParticipantID: %w", err)
	}
	if q.countParticipantMembersByUserIDIDAndParticipantIDsStmt, err = db.PrepareContext(ctx, countParticipantMembersByUserIDIDAndParticipantIDs); err != nil {
		return nil, fmt.Errorf("error preparing query CountParticipantMembersByUserIDIDAndParticipantIDs: %w", err)
	}
	if q.countPrefixesStmt, err = db.PrepareContext(ctx, countPrefixes); err != nil {
		return nil, fmt.Errorf("error preparing query CountPrefixes: %w", err)
	}
	if q.countRefMyTicketsStmt, err = db.PrepareContext(ctx, countRefMyTickets); err != nil {
		return nil, fmt.Errorf("error preparing query CountRefMyTickets: %w", err)
	}
	if q.countShiftsStmt, err = db.PrepareContext(ctx, countShifts); err != nil {
		return nil, fmt.Errorf("error preparing query CountShifts: %w", err)
	}
	if q.countSlasStmt, err = db.PrepareContext(ctx, countSlas); err != nil {
		return nil, fmt.Errorf("error preparing query CountSlas: %w", err)
	}
	if q.countTicketAdvanceSettingParticipantsByTypeStmt, err = db.PrepareContext(ctx, countTicketAdvanceSettingParticipantsByType); err != nil {
		return nil, fmt.Errorf("error preparing query CountTicketAdvanceSettingParticipantsByType: %w", err)
	}
	if q.countTotalNodeOnMyTicketStmt, err = db.PrepareContext(ctx, countTotalNodeOnMyTicket); err != nil {
		return nil, fmt.Errorf("error preparing query CountTotalNodeOnMyTicket: %w", err)
	}
	if q.countUnfollowStmt, err = db.PrepareContext(ctx, countUnfollow); err != nil {
		return nil, fmt.Errorf("error preparing query CountUnfollow: %w", err)
	}
	if q.countWaitingOnHoldRequestsStmt, err = db.PrepareContext(ctx, countWaitingOnHoldRequests); err != nil {
		return nil, fmt.Errorf("error preparing query CountWaitingOnHoldRequests: %w", err)
	}
	if q.countWorkflowsStmt, err = db.PrepareContext(ctx, countWorkflows); err != nil {
		return nil, fmt.Errorf("error preparing query CountWorkflows: %w", err)
	}
	if q.createAdditionalRequestStmt, err = db.PrepareContext(ctx, createAdditionalRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAdditionalRequest: %w", err)
	}
	if q.createAdvanceSettingStmt, err = db.PrepareContext(ctx, createAdvanceSetting); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAdvanceSetting: %w", err)
	}
	if q.createAdvanceSettingParticipantStmt, err = db.PrepareContext(ctx, createAdvanceSettingParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAdvanceSettingParticipant: %w", err)
	}
	if q.createCurrencyStmt, err = db.PrepareContext(ctx, createCurrency); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCurrency: %w", err)
	}
	if q.createDateOffStmt, err = db.PrepareContext(ctx, createDateOff); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDateOff: %w", err)
	}
	if q.createEdgeStmt, err = db.PrepareContext(ctx, createEdge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEdge: %w", err)
	}
	if q.createIfNotExistParticipantStmt, err = db.PrepareContext(ctx, createIfNotExistParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIfNotExistParticipant: %w", err)
	}
	if q.createIfNotExistParticipantMemberStmt, err = db.PrepareContext(ctx, createIfNotExistParticipantMember); err != nil {
		return nil, fmt.Errorf("error preparing query CreateIfNotExistParticipantMember: %w", err)
	}
	if q.createMyTicketStmt, err = db.PrepareContext(ctx, createMyTicket); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMyTicket: %w", err)
	}
	if q.createNodeStmt, err = db.PrepareContext(ctx, createNode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNode: %w", err)
	}
	if q.createNodeParticipantStmt, err = db.PrepareContext(ctx, createNodeParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNodeParticipant: %w", err)
	}
	if q.createOnHoldRequestStmt, err = db.PrepareContext(ctx, createOnHoldRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOnHoldRequest: %w", err)
	}
	if q.createOnHoldRequestApproverStmt, err = db.PrepareContext(ctx, createOnHoldRequestApprover); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOnHoldRequestApprover: %w", err)
	}
	if q.createParticipantStmt, err = db.PrepareContext(ctx, createParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateParticipant: %w", err)
	}
	if q.createPrefixStmt, err = db.PrepareContext(ctx, createPrefix); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePrefix: %w", err)
	}
	if q.createShiftStmt, err = db.PrepareContext(ctx, createShift); err != nil {
		return nil, fmt.Errorf("error preparing query CreateShift: %w", err)
	}
	if q.createSlaStmt, err = db.PrepareContext(ctx, createSla); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSla: %w", err)
	}
	if q.createTagStmt, err = db.PrepareContext(ctx, createTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTag: %w", err)
	}
	if q.createTagWorkflowGroupsStmt, err = db.PrepareContext(ctx, createTagWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTagWorkflowGroups: %w", err)
	}
	if q.createTagWorkflowsStmt, err = db.PrepareContext(ctx, createTagWorkflows); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTagWorkflows: %w", err)
	}
	if q.createTaskStmt, err = db.PrepareContext(ctx, createTask); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTask: %w", err)
	}
	if q.createTaskParticipantStmt, err = db.PrepareContext(ctx, createTaskParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTaskParticipant: %w", err)
	}
	if q.createTicketStmt, err = db.PrepareContext(ctx, createTicket); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicket: %w", err)
	}
	if q.createTicketActivityStmt, err = db.PrepareContext(ctx, createTicketActivity); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketActivity: %w", err)
	}
	if q.createTicketAdvanceSettingParticipantStmt, err = db.PrepareContext(ctx, createTicketAdvanceSettingParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketAdvanceSettingParticipant: %w", err)
	}
	if q.createTicketEdgeStmt, err = db.PrepareContext(ctx, createTicketEdge); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketEdge: %w", err)
	}
	if q.createTicketFieldStmt, err = db.PrepareContext(ctx, createTicketField); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketField: %w", err)
	}
	if q.createTicketFlowchartHistoryStmt, err = db.PrepareContext(ctx, createTicketFlowchartHistory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketFlowchartHistory: %w", err)
	}
	if q.createTicketNodeStmt, err = db.PrepareContext(ctx, createTicketNode); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketNode: %w", err)
	}
	if q.createTicketNodeParticipantStmt, err = db.PrepareContext(ctx, createTicketNodeParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketNodeParticipant: %w", err)
	}
	if q.createTicketNotificationStmt, err = db.PrepareContext(ctx, createTicketNotification); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketNotification: %w", err)
	}
	if q.createTicketNotificationParticipantStmt, err = db.PrepareContext(ctx, createTicketNotificationParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketNotificationParticipant: %w", err)
	}
	if q.createTicketTagStmt, err = db.PrepareContext(ctx, createTicketTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicketTag: %w", err)
	}
	if q.createUnfollowStmt, err = db.PrepareContext(ctx, createUnfollow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUnfollow: %w", err)
	}
	if q.createWeeklySettingStmt, err = db.PrepareContext(ctx, createWeeklySetting); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWeeklySetting: %w", err)
	}
	if q.createWorkflowStmt, err = db.PrepareContext(ctx, createWorkflow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkflow: %w", err)
	}
	if q.createWorkflowFormFieldStmt, err = db.PrepareContext(ctx, createWorkflowFormField); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkflowFormField: %w", err)
	}
	if q.createWorkflowGroupStmt, err = db.PrepareContext(ctx, createWorkflowGroup); err != nil {
		return nil, fmt.Errorf("error preparing query CreateWorkflowGroup: %w", err)
	}
	if q.deleteAdvanceSettingParticipantsStmt, err = db.PrepareContext(ctx, deleteAdvanceSettingParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAdvanceSettingParticipants: %w", err)
	}
	if q.deleteAllTagWorkflowGroupsStmt, err = db.PrepareContext(ctx, deleteAllTagWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllTagWorkflowGroups: %w", err)
	}
	if q.deleteAllTagWorkflowsStmt, err = db.PrepareContext(ctx, deleteAllTagWorkflows); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllTagWorkflows: %w", err)
	}
	if q.deleteAllWorkflowEdgesStmt, err = db.PrepareContext(ctx, deleteAllWorkflowEdges); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllWorkflowEdges: %w", err)
	}
	if q.deleteAllWorkflowNodesStmt, err = db.PrepareContext(ctx, deleteAllWorkflowNodes); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllWorkflowNodes: %w", err)
	}
	if q.deleteCurrencyStmt, err = db.PrepareContext(ctx, deleteCurrency); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCurrency: %w", err)
	}
	if q.deleteDateOffsByWorkspaceIDAndShiftIDStmt, err = db.PrepareContext(ctx, deleteDateOffsByWorkspaceIDAndShiftID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDateOffsByWorkspaceIDAndShiftID: %w", err)
	}
	if q.deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffIDStmt, err = db.PrepareContext(ctx, deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDateOffsByWorkspaceIDAndShiftIDAndDateOffID: %w", err)
	}
	if q.deleteEdgesStmt, err = db.PrepareContext(ctx, deleteEdges); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEdges: %w", err)
	}
	if q.deleteNodeStmt, err = db.PrepareContext(ctx, deleteNode); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNode: %w", err)
	}
	if q.deleteNodeEdgesStmt, err = db.PrepareContext(ctx, deleteNodeEdges); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNodeEdges: %w", err)
	}
	if q.deleteNodeParticipantStmt, err = db.PrepareContext(ctx, deleteNodeParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNodeParticipant: %w", err)
	}
	if q.deleteNodeParticipantByNodeIDStmt, err = db.PrepareContext(ctx, deleteNodeParticipantByNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNodeParticipantByNodeID: %w", err)
	}
	if q.deleteOtherWorkflowFormFieldsStmt, err = db.PrepareContext(ctx, deleteOtherWorkflowFormFields); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOtherWorkflowFormFields: %w", err)
	}
	if q.deleteParticipantByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, deleteParticipantByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteParticipantByWorkspaceIDAndID: %w", err)
	}
	if q.deleteParticipantMemberStmt, err = db.PrepareContext(ctx, deleteParticipantMember); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteParticipantMember: %w", err)
	}
	if q.deleteParticipantMembersStmt, err = db.PrepareContext(ctx, deleteParticipantMembers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteParticipantMembers: %w", err)
	}
	if q.deleteParticipantMembersByParticipantIDStmt, err = db.PrepareContext(ctx, deleteParticipantMembersByParticipantID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteParticipantMembersByParticipantID: %w", err)
	}
	if q.deletePrefixByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, deletePrefixByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePrefixByWorkspaceIDAndID: %w", err)
	}
	if q.deleteRangeStmt, err = db.PrepareContext(ctx, deleteRange); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRange: %w", err)
	}
	if q.deleteShiftByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, deleteShiftByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteShiftByWorkspaceIDAndID: %w", err)
	}
	if q.deleteTagStmt, err = db.PrepareContext(ctx, deleteTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTag: %w", err)
	}
	if q.deleteTagWorkflowGroupsStmt, err = db.PrepareContext(ctx, deleteTagWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTagWorkflowGroups: %w", err)
	}
	if q.deleteTagWorkflowsStmt, err = db.PrepareContext(ctx, deleteTagWorkflows); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTagWorkflows: %w", err)
	}
	if q.deleteTaskStmt, err = db.PrepareContext(ctx, deleteTask); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTask: %w", err)
	}
	if q.deleteTaskParticipantStmt, err = db.PrepareContext(ctx, deleteTaskParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTaskParticipant: %w", err)
	}
	if q.deleteTaskParticipantByTaskIDStmt, err = db.PrepareContext(ctx, deleteTaskParticipantByTaskID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTaskParticipantByTaskID: %w", err)
	}
	if q.deleteTicketNotificaionParticipantsStmt, err = db.PrepareContext(ctx, deleteTicketNotificaionParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTicketNotificaionParticipants: %w", err)
	}
	if q.deleteTicketNotificationStmt, err = db.PrepareContext(ctx, deleteTicketNotification); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTicketNotification: %w", err)
	}
	if q.deleteUnfollowStmt, err = db.PrepareContext(ctx, deleteUnfollow); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUnfollow: %w", err)
	}
	if q.deleteWeeklySettingsByWorkspaceIDAndShiftIDStmt, err = db.PrepareContext(ctx, deleteWeeklySettingsByWorkspaceIDAndShiftID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWeeklySettingsByWorkspaceIDAndShiftID: %w", err)
	}
	if q.deleteWorkflowByIDStmt, err = db.PrepareContext(ctx, deleteWorkflowByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkflowByID: %w", err)
	}
	if q.deleteWorkflowFormFieldStmt, err = db.PrepareContext(ctx, deleteWorkflowFormField); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkflowFormField: %w", err)
	}
	if q.deleteWorkflowFormFieldsStmt, err = db.PrepareContext(ctx, deleteWorkflowFormFields); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkflowFormFields: %w", err)
	}
	if q.deleteWorkflowFormFieldsByWorkflowIdStmt, err = db.PrepareContext(ctx, deleteWorkflowFormFieldsByWorkflowId); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteWorkflowFormFieldsByWorkflowId: %w", err)
	}
	if q.getAdditionalRequestByIDStmt, err = db.PrepareContext(ctx, getAdditionalRequestByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdditionalRequestByID: %w", err)
	}
	if q.getAdditionalRequestsStmt, err = db.PrepareContext(ctx, getAdditionalRequests); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdditionalRequests: %w", err)
	}
	if q.getAdvanceSettingStmt, err = db.PrepareContext(ctx, getAdvanceSetting); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdvanceSetting: %w", err)
	}
	if q.getAdvanceSettingParticipantsStmt, err = db.PrepareContext(ctx, getAdvanceSettingParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query GetAdvanceSettingParticipants: %w", err)
	}
	if q.getAllMyTicketsCreatedByMeStmt, err = db.PrepareContext(ctx, getAllMyTicketsCreatedByMe); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllMyTicketsCreatedByMe: %w", err)
	}
	if q.getAllMyTicketsOnHoldCreatedByMeStmt, err = db.PrepareContext(ctx, getAllMyTicketsOnHoldCreatedByMe); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllMyTicketsOnHoldCreatedByMe: %w", err)
	}
	if q.getAllMyTicketsOnHoldSendToMeStmt, err = db.PrepareContext(ctx, getAllMyTicketsOnHoldSendToMe); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllMyTicketsOnHoldSendToMe: %w", err)
	}
	if q.getAllMyTicketsSendToMeStmt, err = db.PrepareContext(ctx, getAllMyTicketsSendToMe); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllMyTicketsSendToMe: %w", err)
	}
	if q.getAllPrefixStmt, err = db.PrepareContext(ctx, getAllPrefix); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllPrefix: %w", err)
	}
	if q.getAllPrefixPagingNextStmt, err = db.PrepareContext(ctx, getAllPrefixPagingNext); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllPrefixPagingNext: %w", err)
	}
	if q.getAllPrefixPagingPrevStmt, err = db.PrepareContext(ctx, getAllPrefixPagingPrev); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllPrefixPagingPrev: %w", err)
	}
	if q.getAllRefMyTicketsStmt, err = db.PrepareContext(ctx, getAllRefMyTickets); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRefMyTickets: %w", err)
	}
	if q.getAllShiftsStmt, err = db.PrepareContext(ctx, getAllShifts); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllShifts: %w", err)
	}
	if q.getAllShiftsPagingNextStmt, err = db.PrepareContext(ctx, getAllShiftsPagingNext); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllShiftsPagingNext: %w", err)
	}
	if q.getAllShiftsPagingPrevStmt, err = db.PrepareContext(ctx, getAllShiftsPagingPrev); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllShiftsPagingPrev: %w", err)
	}
	if q.getAllSlasStmt, err = db.PrepareContext(ctx, getAllSlas); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllSlas: %w", err)
	}
	if q.getAllSlasPagingStmt, err = db.PrepareContext(ctx, getAllSlasPaging); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllSlasPaging: %w", err)
	}
	if q.getAllSlasPagingNextStmt, err = db.PrepareContext(ctx, getAllSlasPagingNext); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllSlasPagingNext: %w", err)
	}
	if q.getAllSlasPagingPrevStmt, err = db.PrepareContext(ctx, getAllSlasPagingPrev); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllSlasPagingPrev: %w", err)
	}
	if q.getAllWorkflowGroupsStmt, err = db.PrepareContext(ctx, getAllWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllWorkflowGroups: %w", err)
	}
	if q.getAllWorkflowsStmt, err = db.PrepareContext(ctx, getAllWorkflows); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllWorkflows: %w", err)
	}
	if q.getAllWorkflowsPagingNextStmt, err = db.PrepareContext(ctx, getAllWorkflowsPagingNext); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllWorkflowsPagingNext: %w", err)
	}
	if q.getAllWorkflowsPagingPrevStmt, err = db.PrepareContext(ctx, getAllWorkflowsPagingPrev); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllWorkflowsPagingPrev: %w", err)
	}
	if q.getChildWorkflowGroupsStmt, err = db.PrepareContext(ctx, getChildWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetChildWorkflowGroups: %w", err)
	}
	if q.getCurrencyStmt, err = db.PrepareContext(ctx, getCurrency); err != nil {
		return nil, fmt.Errorf("error preparing query GetCurrency: %w", err)
	}
	if q.getDateOffsByRangeStmt, err = db.PrepareContext(ctx, getDateOffsByRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetDateOffsByRange: %w", err)
	}
	if q.getDateOffsByWorkspaceIDAndShiftIDStmt, err = db.PrepareContext(ctx, getDateOffsByWorkspaceIDAndShiftID); err != nil {
		return nil, fmt.Errorf("error preparing query GetDateOffsByWorkspaceIDAndShiftID: %w", err)
	}
	if q.getDefaultPrefixStmt, err = db.PrepareContext(ctx, getDefaultPrefix); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultPrefix: %w", err)
	}
	if q.getDefaultPrefixByFilterStmt, err = db.PrepareContext(ctx, getDefaultPrefixByFilter); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultPrefixByFilter: %w", err)
	}
	if q.getDefaultShiftStmt, err = db.PrepareContext(ctx, getDefaultShift); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultShift: %w", err)
	}
	if q.getDefaultShiftByFilterStmt, err = db.PrepareContext(ctx, getDefaultShiftByFilter); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultShiftByFilter: %w", err)
	}
	if q.getDefaultSlaStmt, err = db.PrepareContext(ctx, getDefaultSla); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultSla: %w", err)
	}
	if q.getDefaultSlaByFilterStmt, err = db.PrepareContext(ctx, getDefaultSlaByFilter); err != nil {
		return nil, fmt.Errorf("error preparing query GetDefaultSlaByFilter: %w", err)
	}
	if q.getEdgeByIDStmt, err = db.PrepareContext(ctx, getEdgeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEdgeByID: %w", err)
	}
	if q.getFullPathOfWorkflowGroupStmt, err = db.PrepareContext(ctx, getFullPathOfWorkflowGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetFullPathOfWorkflowGroup: %w", err)
	}
	if q.getLatestRecentActivityOfTicketStmt, err = db.PrepareContext(ctx, getLatestRecentActivityOfTicket); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestRecentActivityOfTicket: %w", err)
	}
	if q.getLatestRecentActivityOfTicketsStmt, err = db.PrepareContext(ctx, getLatestRecentActivityOfTickets); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestRecentActivityOfTickets: %w", err)
	}
	if q.getMyTicketByCurrentNodeIDStmt, err = db.PrepareContext(ctx, getMyTicketByCurrentNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetMyTicketByCurrentNodeID: %w", err)
	}
	if q.getNextWorkflowGroupsByKeywordStmt, err = db.PrepareContext(ctx, getNextWorkflowGroupsByKeyword); err != nil {
		return nil, fmt.Errorf("error preparing query GetNextWorkflowGroupsByKeyword: %w", err)
	}
	if q.getNodeByIDStmt, err = db.PrepareContext(ctx, getNodeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetNodeByID: %w", err)
	}
	if q.getOnHoldRequestByIDStmt, err = db.PrepareContext(ctx, getOnHoldRequestByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetOnHoldRequestByID: %w", err)
	}
	if q.getParticipantByIDStmt, err = db.PrepareContext(ctx, getParticipantByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetParticipantByID: %w", err)
	}
	if q.getParticipantMembersByWorkspaceIDAndParticipantIDStmt, err = db.PrepareContext(ctx, getParticipantMembersByWorkspaceIDAndParticipantID); err != nil {
		return nil, fmt.Errorf("error preparing query GetParticipantMembersByWorkspaceIDAndParticipantID: %w", err)
	}
	if q.getParticipantMembersByWorkspaceIDAndParticipantIDsStmt, err = db.PrepareContext(ctx, getParticipantMembersByWorkspaceIDAndParticipantIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetParticipantMembersByWorkspaceIDAndParticipantIDs: %w", err)
	}
	if q.getPrefixByIDStmt, err = db.PrepareContext(ctx, getPrefixByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetPrefixByID: %w", err)
	}
	if q.getPreviousWorkflowGroupsByKeywordStmt, err = db.PrepareContext(ctx, getPreviousWorkflowGroupsByKeyword); err != nil {
		return nil, fmt.Errorf("error preparing query GetPreviousWorkflowGroupsByKeyword: %w", err)
	}
	if q.getRangeWorkflowGroupsStmt, err = db.PrepareContext(ctx, getRangeWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetRangeWorkflowGroups: %w", err)
	}
	if q.getRootWorkflowGroupStmt, err = db.PrepareContext(ctx, getRootWorkflowGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetRootWorkflowGroup: %w", err)
	}
	if q.getRootWorkflowGroupsForUpdateStmt, err = db.PrepareContext(ctx, getRootWorkflowGroupsForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetRootWorkflowGroupsForUpdate: %w", err)
	}
	if q.getShiftByIDStmt, err = db.PrepareContext(ctx, getShiftByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetShiftByID: %w", err)
	}
	if q.getSlaByIDStmt, err = db.PrepareContext(ctx, getSlaByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSlaByID: %w", err)
	}
	if q.getSlasByShiftIDStmt, err = db.PrepareContext(ctx, getSlasByShiftID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSlasByShiftID: %w", err)
	}
	if q.getStartNodeStmt, err = db.PrepareContext(ctx, getStartNode); err != nil {
		return nil, fmt.Errorf("error preparing query GetStartNode: %w", err)
	}
	if q.getStartNodeOfTicketStmt, err = db.PrepareContext(ctx, getStartNodeOfTicket); err != nil {
		return nil, fmt.Errorf("error preparing query GetStartNodeOfTicket: %w", err)
	}
	if q.getTagStmt, err = db.PrepareContext(ctx, getTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetTag: %w", err)
	}
	if q.getTagSearchByNameStmt, err = db.PrepareContext(ctx, getTagSearchByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagSearchByName: %w", err)
	}
	if q.getTagSearchByNameWithPublishedStmt, err = db.PrepareContext(ctx, getTagSearchByNameWithPublished); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagSearchByNameWithPublished: %w", err)
	}
	if q.getTagWithPublishedStmt, err = db.PrepareContext(ctx, getTagWithPublished); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagWithPublished: %w", err)
	}
	if q.getTagWorkflowGroupsStmt, err = db.PrepareContext(ctx, getTagWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagWorkflowGroups: %w", err)
	}
	if q.getTagWorkflowsStmt, err = db.PrepareContext(ctx, getTagWorkflows); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagWorkflows: %w", err)
	}
	if q.getTagsByWorkflowIDStmt, err = db.PrepareContext(ctx, getTagsByWorkflowID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsByWorkflowID: %w", err)
	}
	if q.getTagsSortByNameStmt, err = db.PrepareContext(ctx, getTagsSortByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetTagsSortByName: %w", err)
	}
	if q.getTaskByIDStmt, err = db.PrepareContext(ctx, getTaskByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTaskByID: %w", err)
	}
	if q.getTicketByIDStmt, err = db.PrepareContext(ctx, getTicketByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketByID: %w", err)
	}
	if q.getTicketEdgesByCurrentNodeIDStmt, err = db.PrepareContext(ctx, getTicketEdgesByCurrentNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketEdgesByCurrentNodeID: %w", err)
	}
	if q.getTicketFieldStmt, err = db.PrepareContext(ctx, getTicketField); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketField: %w", err)
	}
	if q.getTicketNodeByNodeIDStmt, err = db.PrepareContext(ctx, getTicketNodeByNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketNodeByNodeID: %w", err)
	}
	if q.getTicketNodeParticipantByRoleAndTypeStmt, err = db.PrepareContext(ctx, getTicketNodeParticipantByRoleAndType); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketNodeParticipantByRoleAndType: %w", err)
	}
	if q.getTicketNotificationStmt, err = db.PrepareContext(ctx, getTicketNotification); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketNotification: %w", err)
	}
	if q.getTicketNotificationByIDStmt, err = db.PrepareContext(ctx, getTicketNotificationByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketNotificationByID: %w", err)
	}
	if q.getTicketNotificationParticipantsStmt, err = db.PrepareContext(ctx, getTicketNotificationParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketNotificationParticipants: %w", err)
	}
	if q.getTicketTagsByTicketIDStmt, err = db.PrepareContext(ctx, getTicketTagsByTicketID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketTagsByTicketID: %w", err)
	}
	if q.getTicketTagsByTicketIDsStmt, err = db.PrepareContext(ctx, getTicketTagsByTicketIDs); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketTagsByTicketIDs: %w", err)
	}
	if q.getWeeklySettingsByWorkspaceIDAndShiftIDStmt, err = db.PrepareContext(ctx, getWeeklySettingsByWorkspaceIDAndShiftID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWeeklySettingsByWorkspaceIDAndShiftID: %w", err)
	}
	if q.getWorkflowByIDStmt, err = db.PrepareContext(ctx, getWorkflowByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkflowByID: %w", err)
	}
	if q.getWorkflowFormFieldStmt, err = db.PrepareContext(ctx, getWorkflowFormField); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkflowFormField: %w", err)
	}
	if q.getWorkflowGroupStmt, err = db.PrepareContext(ctx, getWorkflowGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkflowGroup: %w", err)
	}
	if q.getWorkflowGroupsStmt, err = db.PrepareContext(ctx, getWorkflowGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkflowGroups: %w", err)
	}
	if q.getWorkflowGroupsByKeywordStmt, err = db.PrepareContext(ctx, getWorkflowGroupsByKeyword); err != nil {
		return nil, fmt.Errorf("error preparing query GetWorkflowGroupsByKeyword: %w", err)
	}
	if q.listCurrenciesStmt, err = db.PrepareContext(ctx, listCurrencies); err != nil {
		return nil, fmt.Errorf("error preparing query ListCurrencies: %w", err)
	}
	if q.listCurrentTicketNodesStmt, err = db.PrepareContext(ctx, listCurrentTicketNodes); err != nil {
		return nil, fmt.Errorf("error preparing query ListCurrentTicketNodes: %w", err)
	}
	if q.listEdgesByWorkflowIDStmt, err = db.PrepareContext(ctx, listEdgesByWorkflowID); err != nil {
		return nil, fmt.Errorf("error preparing query ListEdgesByWorkflowID: %w", err)
	}
	if q.listFirstClassWorkflowFormFieldsByWorkflowIdStmt, err = db.PrepareContext(ctx, listFirstClassWorkflowFormFieldsByWorkflowId); err != nil {
		return nil, fmt.Errorf("error preparing query ListFirstClassWorkflowFormFieldsByWorkflowId: %w", err)
	}
	if q.listNodeParticipantsByNodeIDStmt, err = db.PrepareContext(ctx, listNodeParticipantsByNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query ListNodeParticipantsByNodeID: %w", err)
	}
	if q.listNodesByWorkflowIDStmt, err = db.PrepareContext(ctx, listNodesByWorkflowID); err != nil {
		return nil, fmt.Errorf("error preparing query ListNodesByWorkflowID: %w", err)
	}
	if q.listOnHoldRequestApproversStmt, err = db.PrepareContext(ctx, listOnHoldRequestApprovers); err != nil {
		return nil, fmt.Errorf("error preparing query ListOnHoldRequestApprovers: %w", err)
	}
	if q.listParticipantsByEightIDsStmt, err = db.PrepareContext(ctx, listParticipantsByEightIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsByEightIDs: %w", err)
	}
	if q.listParticipantsByFiveIDsStmt, err = db.PrepareContext(ctx, listParticipantsByFiveIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsByFiveIDs: %w", err)
	}
	if q.listParticipantsByFourIDsStmt, err = db.PrepareContext(ctx, listParticipantsByFourIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsByFourIDs: %w", err)
	}
	if q.listParticipantsByNineIDsStmt, err = db.PrepareContext(ctx, listParticipantsByNineIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsByNineIDs: %w", err)
	}
	if q.listParticipantsBySevenIDsStmt, err = db.PrepareContext(ctx, listParticipantsBySevenIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsBySevenIDs: %w", err)
	}
	if q.listParticipantsBySixIDsStmt, err = db.PrepareContext(ctx, listParticipantsBySixIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsBySixIDs: %w", err)
	}
	if q.listParticipantsByTenIDsStmt, err = db.PrepareContext(ctx, listParticipantsByTenIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsByTenIDs: %w", err)
	}
	if q.listParticipantsByThreeIDsStmt, err = db.PrepareContext(ctx, listParticipantsByThreeIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsByThreeIDs: %w", err)
	}
	if q.listParticipantsByTwoIDsStmt, err = db.PrepareContext(ctx, listParticipantsByTwoIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListParticipantsByTwoIDs: %w", err)
	}
	if q.listPreviewNodeAdminsStmt, err = db.PrepareContext(ctx, listPreviewNodeAdmins); err != nil {
		return nil, fmt.Errorf("error preparing query ListPreviewNodeAdmins: %w", err)
	}
	if q.listPreviewNodeAssigneesStmt, err = db.PrepareContext(ctx, listPreviewNodeAssignees); err != nil {
		return nil, fmt.Errorf("error preparing query ListPreviewNodeAssignees: %w", err)
	}
	if q.listProcessedTicketEdgesStmt, err = db.PrepareContext(ctx, listProcessedTicketEdges); err != nil {
		return nil, fmt.Errorf("error preparing query ListProcessedTicketEdges: %w", err)
	}
	if q.listProcessedTicketNodesStmt, err = db.PrepareContext(ctx, listProcessedTicketNodes); err != nil {
		return nil, fmt.Errorf("error preparing query ListProcessedTicketNodes: %w", err)
	}
	if q.listRefTicketsStmt, err = db.PrepareContext(ctx, listRefTickets); err != nil {
		return nil, fmt.Errorf("error preparing query ListRefTickets: %w", err)
	}
	if q.listTaskParticipantsByEightTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsByEightTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByEightTaskIDs: %w", err)
	}
	if q.listTaskParticipantsByFiveTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsByFiveTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByFiveTaskIDs: %w", err)
	}
	if q.listTaskParticipantsByFourTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsByFourTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByFourTaskIDs: %w", err)
	}
	if q.listTaskParticipantsByNineTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsByNineTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByNineTaskIDs: %w", err)
	}
	if q.listTaskParticipantsBySevenTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsBySevenTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsBySevenTaskIDs: %w", err)
	}
	if q.listTaskParticipantsBySixTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsBySixTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsBySixTaskIDs: %w", err)
	}
	if q.listTaskParticipantsByTaskIDStmt, err = db.PrepareContext(ctx, listTaskParticipantsByTaskID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByTaskID: %w", err)
	}
	if q.listTaskParticipantsByTenTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsByTenTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByTenTaskIDs: %w", err)
	}
	if q.listTaskParticipantsByThreeTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsByThreeTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByThreeTaskIDs: %w", err)
	}
	if q.listTaskParticipantsByTwoTaskIDsStmt, err = db.PrepareContext(ctx, listTaskParticipantsByTwoTaskIDs); err != nil {
		return nil, fmt.Errorf("error preparing query ListTaskParticipantsByTwoTaskIDs: %w", err)
	}
	if q.listTasksByNodeIDStmt, err = db.PrepareContext(ctx, listTasksByNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTasksByNodeID: %w", err)
	}
	if q.listTicketActivitiesStmt, err = db.PrepareContext(ctx, listTicketActivities); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketActivities: %w", err)
	}
	if q.listTicketAdvanceSettingParticipantsStmt, err = db.PrepareContext(ctx, listTicketAdvanceSettingParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketAdvanceSettingParticipants: %w", err)
	}
	if q.listTicketAdvanceSettingParticipantsByRefIDStmt, err = db.PrepareContext(ctx, listTicketAdvanceSettingParticipantsByRefID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketAdvanceSettingParticipantsByRefID: %w", err)
	}
	if q.listTicketAdvanceSettingParticipantsByTypeStmt, err = db.PrepareContext(ctx, listTicketAdvanceSettingParticipantsByType); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketAdvanceSettingParticipantsByType: %w", err)
	}
	if q.listTicketEdgesStmt, err = db.PrepareContext(ctx, listTicketEdges); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketEdges: %w", err)
	}
	if q.listTicketFieldsStmt, err = db.PrepareContext(ctx, listTicketFields); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketFields: %w", err)
	}
	if q.listTicketFlowchartHistoriesStmt, err = db.PrepareContext(ctx, listTicketFlowchartHistories); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketFlowchartHistories: %w", err)
	}
	if q.listTicketNodeParticipantsByNodeIDStmt, err = db.PrepareContext(ctx, listTicketNodeParticipantsByNodeID); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketNodeParticipantsByNodeID: %w", err)
	}
	if q.listTicketNodesStmt, err = db.PrepareContext(ctx, listTicketNodes); err != nil {
		return nil, fmt.Errorf("error preparing query ListTicketNodes: %w", err)
	}
	if q.listUnfollowByUserIDStmt, err = db.PrepareContext(ctx, listUnfollowByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query ListUnfollowByUserID: %w", err)
	}
	if q.listUserTicketRolesStmt, err = db.PrepareContext(ctx, listUserTicketRoles); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserTicketRoles: %w", err)
	}
	if q.listWaitingOnHoldRequestsStmt, err = db.PrepareContext(ctx, listWaitingOnHoldRequests); err != nil {
		return nil, fmt.Errorf("error preparing query ListWaitingOnHoldRequests: %w", err)
	}
	if q.listWorkflowFormFieldsByWorkflowIdStmt, err = db.PrepareContext(ctx, listWorkflowFormFieldsByWorkflowId); err != nil {
		return nil, fmt.Errorf("error preparing query ListWorkflowFormFieldsByWorkflowId: %w", err)
	}
	if q.lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt, err = db.PrepareContext(ctx, lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query LockParticipantMembersByWorkspaceIDAndParticipantIDForUpdate: %w", err)
	}
	if q.lockPrefixByWorkspaceIDForUpdateStmt, err = db.PrepareContext(ctx, lockPrefixByWorkspaceIDForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query LockPrefixByWorkspaceIDForUpdate: %w", err)
	}
	if q.lockShiftsByWorkspaceIDForUpdateStmt, err = db.PrepareContext(ctx, lockShiftsByWorkspaceIDForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query LockShiftsByWorkspaceIDForUpdate: %w", err)
	}
	if q.lockSlasByWorkspaceIDForUpdateStmt, err = db.PrepareContext(ctx, lockSlasByWorkspaceIDForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query LockSlasByWorkspaceIDForUpdate: %w", err)
	}
	if q.removeTicketNodeParticipantStmt, err = db.PrepareContext(ctx, removeTicketNodeParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveTicketNodeParticipant: %w", err)
	}
	if q.resetStatusAndDeadlineTicketNodesByTicketIDStmt, err = db.PrepareContext(ctx, resetStatusAndDeadlineTicketNodesByTicketID); err != nil {
		return nil, fmt.Errorf("error preparing query ResetStatusAndDeadlineTicketNodesByTicketID: %w", err)
	}
	if q.responseTicketNodeStmt, err = db.PrepareContext(ctx, responseTicketNode); err != nil {
		return nil, fmt.Errorf("error preparing query ResponseTicketNode: %w", err)
	}
	if q.reviewTicketStmt, err = db.PrepareContext(ctx, reviewTicket); err != nil {
		return nil, fmt.Errorf("error preparing query ReviewTicket: %w", err)
	}
	if q.updateAdditionalRequestStmt, err = db.PrepareContext(ctx, updateAdditionalRequest); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAdditionalRequest: %w", err)
	}
	if q.updateAdvanceSettingStmt, err = db.PrepareContext(ctx, updateAdvanceSetting); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAdvanceSetting: %w", err)
	}
	if q.updateAssigneeOfCurrentNodeOnMyTicketStmt, err = db.PrepareContext(ctx, updateAssigneeOfCurrentNodeOnMyTicket); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAssigneeOfCurrentNodeOnMyTicket: %w", err)
	}
	if q.updateBowersBeforeAppendStmt, err = db.PrepareContext(ctx, updateBowersBeforeAppend); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBowersBeforeAppend: %w", err)
	}
	if q.updateCurrencyStmt, err = db.PrepareContext(ctx, updateCurrency); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCurrency: %w", err)
	}
	if q.updateIsDefaultPrefixByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateIsDefaultPrefixByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateIsDefaultPrefixByWorkspaceIDAndID: %w", err)
	}
	if q.updateIsDefaultShiftByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateIsDefaultShiftByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateIsDefaultShiftByWorkspaceIDAndID: %w", err)
	}
	if q.updateNodeStmt, err = db.PrepareContext(ctx, updateNode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNode: %w", err)
	}
	if q.updateOldDefaultShiftStmt, err = db.PrepareContext(ctx, updateOldDefaultShift); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOldDefaultShift: %w", err)
	}
	if q.updateOnHoldRequestStatusStmt, err = db.PrepareContext(ctx, updateOnHoldRequestStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOnHoldRequestStatus: %w", err)
	}
	if q.updateParticipantByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateParticipantByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateParticipantByWorkspaceIDAndID: %w", err)
	}
	if q.updatePrefixByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updatePrefixByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePrefixByWorkspaceIDAndID: %w", err)
	}
	if q.updatePrefixIDOfWorkflowsStmt, err = db.PrepareContext(ctx, updatePrefixIDOfWorkflows); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePrefixIDOfWorkflows: %w", err)
	}
	if q.updateShiftByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateShiftByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateShiftByWorkspaceIDAndID: %w", err)
	}
	if q.updateSlaIDOfNodesStmt, err = db.PrepareContext(ctx, updateSlaIDOfNodes); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSlaIDOfNodes: %w", err)
	}
	if q.updateStatusOfCurrentNodeOnMyTicketStmt, err = db.PrepareContext(ctx, updateStatusOfCurrentNodeOnMyTicket); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatusOfCurrentNodeOnMyTicket: %w", err)
	}
	if q.updateStatusOfLatestRecentNodeOnMyTicketStmt, err = db.PrepareContext(ctx, updateStatusOfLatestRecentNodeOnMyTicket); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatusOfLatestRecentNodeOnMyTicket: %w", err)
	}
	if q.updateStatusPrefixByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateStatusPrefixByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatusPrefixByWorkspaceIDAndID: %w", err)
	}
	if q.updateStatusShiftByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateStatusShiftByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatusShiftByWorkspaceIDAndID: %w", err)
	}
	if q.updateStatusTicketStmt, err = db.PrepareContext(ctx, updateStatusTicket); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatusTicket: %w", err)
	}
	if q.updateStatusTicketNodeStmt, err = db.PrepareContext(ctx, updateStatusTicketNode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStatusTicketNode: %w", err)
	}
	if q.updateTagStmt, err = db.PrepareContext(ctx, updateTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTag: %w", err)
	}
	if q.updateTicketNodeAssigneeStmt, err = db.PrepareContext(ctx, updateTicketNodeAssignee); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTicketNodeAssignee: %w", err)
	}
	if q.updateTicketNodeCancelOnHoldStmt, err = db.PrepareContext(ctx, updateTicketNodeCancelOnHold); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTicketNodeCancelOnHold: %w", err)
	}
	if q.updateTicketNodeToOnHoldStmt, err = db.PrepareContext(ctx, updateTicketNodeToOnHold); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTicketNodeToOnHold: %w", err)
	}
	if q.updateTicketNotificationStmt, err = db.PrepareContext(ctx, updateTicketNotification); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTicketNotification: %w", err)
	}
	if q.updateTicketStatusStmt, err = db.PrepareContext(ctx, updateTicketStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTicketStatus: %w", err)
	}
	if q.updateWorkflowByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateWorkflowByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkflowByWorkspaceIDAndID: %w", err)
	}
	if q.updateWorkflowFormFieldStmt, err = db.PrepareContext(ctx, updateWorkflowFormField); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkflowFormField: %w", err)
	}
	if q.updateWorkflowGroupStmt, err = db.PrepareContext(ctx, updateWorkflowGroup); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkflowGroup: %w", err)
	}
	if q.updateWorkflowPublishedByWorkspaceIDAndIDStmt, err = db.PrepareContext(ctx, updateWorkflowPublishedByWorkspaceIDAndID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateWorkflowPublishedByWorkspaceIDAndID: %w", err)
	}
	if q.upsertTicketFieldStmt, err = db.PrepareContext(ctx, upsertTicketField); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertTicketField: %w", err)
	}
	if q.upsertWorkflowFormFieldStmt, err = db.PrepareContext(ctx, upsertWorkflowFormField); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertWorkflowFormField: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countAdditionalRequestsByStatusStmt != nil {
		if cerr := q.countAdditionalRequestsByStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countAdditionalRequestsByStatusStmt: %w", cerr)
		}
	}
	if q.countDefaultPrefixesByWorkspaceIDStmt != nil {
		if cerr := q.countDefaultPrefixesByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDefaultPrefixesByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.countDefaultShiftsByWorkspaceIDStmt != nil {
		if cerr := q.countDefaultShiftsByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDefaultShiftsByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.countDefaultSlaByWorkspaceIDStmt != nil {
		if cerr := q.countDefaultSlaByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countDefaultSlaByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.countExistedNameSlaByWorkspaceIDStmt != nil {
		if cerr := q.countExistedNameSlaByWorkspaceIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countExistedNameSlaByWorkspaceIDStmt: %w", cerr)
		}
	}
	if q.countMinBeLongToAdvanceSettingStmt != nil {
		if cerr := q.countMinBeLongToAdvanceSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMinBeLongToAdvanceSettingStmt: %w", cerr)
		}
	}
	if q.countMinSameParticipantsStmt != nil {
		if cerr := q.countMinSameParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMinSameParticipantsStmt: %w", cerr)
		}
	}
	if q.countMyTicketsCreatedByMeStmt != nil {
		if cerr := q.countMyTicketsCreatedByMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMyTicketsCreatedByMeStmt: %w", cerr)
		}
	}
	if q.countMyTicketsOnHoldCreatedByMeStmt != nil {
		if cerr := q.countMyTicketsOnHoldCreatedByMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMyTicketsOnHoldCreatedByMeStmt: %w", cerr)
		}
	}
	if q.countMyTicketsOnHoldSendToMeStmt != nil {
		if cerr := q.countMyTicketsOnHoldSendToMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMyTicketsOnHoldSendToMeStmt: %w", cerr)
		}
	}
	if q.countMyTicketsSendToMeStmt != nil {
		if cerr := q.countMyTicketsSendToMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countMyTicketsSendToMeStmt: %w", cerr)
		}
	}
	if q.countNodesByWorkflowIDStmt != nil {
		if cerr := q.countNodesByWorkflowIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countNodesByWorkflowIDStmt: %w", cerr)
		}
	}
	if q.countParticipantExistedByWorkspaceIDAndIDStmt != nil {
		if cerr := q.countParticipantExistedByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countParticipantExistedByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.countParticipantMemberByWorkspaceIDAndParticipantIDStmt != nil {
		if cerr := q.countParticipantMemberByWorkspaceIDAndParticipantIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countParticipantMemberByWorkspaceIDAndParticipantIDStmt: %w", cerr)
		}
	}
	if q.countParticipantMembersByUserIDIDAndParticipantIDsStmt != nil {
		if cerr := q.countParticipantMembersByUserIDIDAndParticipantIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countParticipantMembersByUserIDIDAndParticipantIDsStmt: %w", cerr)
		}
	}
	if q.countPrefixesStmt != nil {
		if cerr := q.countPrefixesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countPrefixesStmt: %w", cerr)
		}
	}
	if q.countRefMyTicketsStmt != nil {
		if cerr := q.countRefMyTicketsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countRefMyTicketsStmt: %w", cerr)
		}
	}
	if q.countShiftsStmt != nil {
		if cerr := q.countShiftsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countShiftsStmt: %w", cerr)
		}
	}
	if q.countSlasStmt != nil {
		if cerr := q.countSlasStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countSlasStmt: %w", cerr)
		}
	}
	if q.countTicketAdvanceSettingParticipantsByTypeStmt != nil {
		if cerr := q.countTicketAdvanceSettingParticipantsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTicketAdvanceSettingParticipantsByTypeStmt: %w", cerr)
		}
	}
	if q.countTotalNodeOnMyTicketStmt != nil {
		if cerr := q.countTotalNodeOnMyTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTotalNodeOnMyTicketStmt: %w", cerr)
		}
	}
	if q.countUnfollowStmt != nil {
		if cerr := q.countUnfollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUnfollowStmt: %w", cerr)
		}
	}
	if q.countWaitingOnHoldRequestsStmt != nil {
		if cerr := q.countWaitingOnHoldRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countWaitingOnHoldRequestsStmt: %w", cerr)
		}
	}
	if q.countWorkflowsStmt != nil {
		if cerr := q.countWorkflowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countWorkflowsStmt: %w", cerr)
		}
	}
	if q.createAdditionalRequestStmt != nil {
		if cerr := q.createAdditionalRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAdditionalRequestStmt: %w", cerr)
		}
	}
	if q.createAdvanceSettingStmt != nil {
		if cerr := q.createAdvanceSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAdvanceSettingStmt: %w", cerr)
		}
	}
	if q.createAdvanceSettingParticipantStmt != nil {
		if cerr := q.createAdvanceSettingParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAdvanceSettingParticipantStmt: %w", cerr)
		}
	}
	if q.createCurrencyStmt != nil {
		if cerr := q.createCurrencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCurrencyStmt: %w", cerr)
		}
	}
	if q.createDateOffStmt != nil {
		if cerr := q.createDateOffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDateOffStmt: %w", cerr)
		}
	}
	if q.createEdgeStmt != nil {
		if cerr := q.createEdgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEdgeStmt: %w", cerr)
		}
	}
	if q.createIfNotExistParticipantStmt != nil {
		if cerr := q.createIfNotExistParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIfNotExistParticipantStmt: %w", cerr)
		}
	}
	if q.createIfNotExistParticipantMemberStmt != nil {
		if cerr := q.createIfNotExistParticipantMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createIfNotExistParticipantMemberStmt: %w", cerr)
		}
	}
	if q.createMyTicketStmt != nil {
		if cerr := q.createMyTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMyTicketStmt: %w", cerr)
		}
	}
	if q.createNodeStmt != nil {
		if cerr := q.createNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNodeStmt: %w", cerr)
		}
	}
	if q.createNodeParticipantStmt != nil {
		if cerr := q.createNodeParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNodeParticipantStmt: %w", cerr)
		}
	}
	if q.createOnHoldRequestStmt != nil {
		if cerr := q.createOnHoldRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOnHoldRequestStmt: %w", cerr)
		}
	}
	if q.createOnHoldRequestApproverStmt != nil {
		if cerr := q.createOnHoldRequestApproverStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOnHoldRequestApproverStmt: %w", cerr)
		}
	}
	if q.createParticipantStmt != nil {
		if cerr := q.createParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createParticipantStmt: %w", cerr)
		}
	}
	if q.createPrefixStmt != nil {
		if cerr := q.createPrefixStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPrefixStmt: %w", cerr)
		}
	}
	if q.createShiftStmt != nil {
		if cerr := q.createShiftStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createShiftStmt: %w", cerr)
		}
	}
	if q.createSlaStmt != nil {
		if cerr := q.createSlaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSlaStmt: %w", cerr)
		}
	}
	if q.createTagStmt != nil {
		if cerr := q.createTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagStmt: %w", cerr)
		}
	}
	if q.createTagWorkflowGroupsStmt != nil {
		if cerr := q.createTagWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.createTagWorkflowsStmt != nil {
		if cerr := q.createTagWorkflowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagWorkflowsStmt: %w", cerr)
		}
	}
	if q.createTaskStmt != nil {
		if cerr := q.createTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTaskStmt: %w", cerr)
		}
	}
	if q.createTaskParticipantStmt != nil {
		if cerr := q.createTaskParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTaskParticipantStmt: %w", cerr)
		}
	}
	if q.createTicketStmt != nil {
		if cerr := q.createTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketStmt: %w", cerr)
		}
	}
	if q.createTicketActivityStmt != nil {
		if cerr := q.createTicketActivityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketActivityStmt: %w", cerr)
		}
	}
	if q.createTicketAdvanceSettingParticipantStmt != nil {
		if cerr := q.createTicketAdvanceSettingParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketAdvanceSettingParticipantStmt: %w", cerr)
		}
	}
	if q.createTicketEdgeStmt != nil {
		if cerr := q.createTicketEdgeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketEdgeStmt: %w", cerr)
		}
	}
	if q.createTicketFieldStmt != nil {
		if cerr := q.createTicketFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketFieldStmt: %w", cerr)
		}
	}
	if q.createTicketFlowchartHistoryStmt != nil {
		if cerr := q.createTicketFlowchartHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketFlowchartHistoryStmt: %w", cerr)
		}
	}
	if q.createTicketNodeStmt != nil {
		if cerr := q.createTicketNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketNodeStmt: %w", cerr)
		}
	}
	if q.createTicketNodeParticipantStmt != nil {
		if cerr := q.createTicketNodeParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketNodeParticipantStmt: %w", cerr)
		}
	}
	if q.createTicketNotificationStmt != nil {
		if cerr := q.createTicketNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketNotificationStmt: %w", cerr)
		}
	}
	if q.createTicketNotificationParticipantStmt != nil {
		if cerr := q.createTicketNotificationParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketNotificationParticipantStmt: %w", cerr)
		}
	}
	if q.createTicketTagStmt != nil {
		if cerr := q.createTicketTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketTagStmt: %w", cerr)
		}
	}
	if q.createUnfollowStmt != nil {
		if cerr := q.createUnfollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUnfollowStmt: %w", cerr)
		}
	}
	if q.createWeeklySettingStmt != nil {
		if cerr := q.createWeeklySettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWeeklySettingStmt: %w", cerr)
		}
	}
	if q.createWorkflowStmt != nil {
		if cerr := q.createWorkflowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkflowStmt: %w", cerr)
		}
	}
	if q.createWorkflowFormFieldStmt != nil {
		if cerr := q.createWorkflowFormFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkflowFormFieldStmt: %w", cerr)
		}
	}
	if q.createWorkflowGroupStmt != nil {
		if cerr := q.createWorkflowGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createWorkflowGroupStmt: %w", cerr)
		}
	}
	if q.deleteAdvanceSettingParticipantsStmt != nil {
		if cerr := q.deleteAdvanceSettingParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAdvanceSettingParticipantsStmt: %w", cerr)
		}
	}
	if q.deleteAllTagWorkflowGroupsStmt != nil {
		if cerr := q.deleteAllTagWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllTagWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.deleteAllTagWorkflowsStmt != nil {
		if cerr := q.deleteAllTagWorkflowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllTagWorkflowsStmt: %w", cerr)
		}
	}
	if q.deleteAllWorkflowEdgesStmt != nil {
		if cerr := q.deleteAllWorkflowEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllWorkflowEdgesStmt: %w", cerr)
		}
	}
	if q.deleteAllWorkflowNodesStmt != nil {
		if cerr := q.deleteAllWorkflowNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllWorkflowNodesStmt: %w", cerr)
		}
	}
	if q.deleteCurrencyStmt != nil {
		if cerr := q.deleteCurrencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCurrencyStmt: %w", cerr)
		}
	}
	if q.deleteDateOffsByWorkspaceIDAndShiftIDStmt != nil {
		if cerr := q.deleteDateOffsByWorkspaceIDAndShiftIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDateOffsByWorkspaceIDAndShiftIDStmt: %w", cerr)
		}
	}
	if q.deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffIDStmt != nil {
		if cerr := q.deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffIDStmt: %w", cerr)
		}
	}
	if q.deleteEdgesStmt != nil {
		if cerr := q.deleteEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEdgesStmt: %w", cerr)
		}
	}
	if q.deleteNodeStmt != nil {
		if cerr := q.deleteNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNodeStmt: %w", cerr)
		}
	}
	if q.deleteNodeEdgesStmt != nil {
		if cerr := q.deleteNodeEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNodeEdgesStmt: %w", cerr)
		}
	}
	if q.deleteNodeParticipantStmt != nil {
		if cerr := q.deleteNodeParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNodeParticipantStmt: %w", cerr)
		}
	}
	if q.deleteNodeParticipantByNodeIDStmt != nil {
		if cerr := q.deleteNodeParticipantByNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNodeParticipantByNodeIDStmt: %w", cerr)
		}
	}
	if q.deleteOtherWorkflowFormFieldsStmt != nil {
		if cerr := q.deleteOtherWorkflowFormFieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOtherWorkflowFormFieldsStmt: %w", cerr)
		}
	}
	if q.deleteParticipantByWorkspaceIDAndIDStmt != nil {
		if cerr := q.deleteParticipantByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteParticipantByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.deleteParticipantMemberStmt != nil {
		if cerr := q.deleteParticipantMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteParticipantMemberStmt: %w", cerr)
		}
	}
	if q.deleteParticipantMembersStmt != nil {
		if cerr := q.deleteParticipantMembersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteParticipantMembersStmt: %w", cerr)
		}
	}
	if q.deleteParticipantMembersByParticipantIDStmt != nil {
		if cerr := q.deleteParticipantMembersByParticipantIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteParticipantMembersByParticipantIDStmt: %w", cerr)
		}
	}
	if q.deletePrefixByWorkspaceIDAndIDStmt != nil {
		if cerr := q.deletePrefixByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePrefixByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.deleteRangeStmt != nil {
		if cerr := q.deleteRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRangeStmt: %w", cerr)
		}
	}
	if q.deleteShiftByWorkspaceIDAndIDStmt != nil {
		if cerr := q.deleteShiftByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteShiftByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.deleteTagStmt != nil {
		if cerr := q.deleteTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagStmt: %w", cerr)
		}
	}
	if q.deleteTagWorkflowGroupsStmt != nil {
		if cerr := q.deleteTagWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.deleteTagWorkflowsStmt != nil {
		if cerr := q.deleteTagWorkflowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagWorkflowsStmt: %w", cerr)
		}
	}
	if q.deleteTaskStmt != nil {
		if cerr := q.deleteTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTaskStmt: %w", cerr)
		}
	}
	if q.deleteTaskParticipantStmt != nil {
		if cerr := q.deleteTaskParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTaskParticipantStmt: %w", cerr)
		}
	}
	if q.deleteTaskParticipantByTaskIDStmt != nil {
		if cerr := q.deleteTaskParticipantByTaskIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTaskParticipantByTaskIDStmt: %w", cerr)
		}
	}
	if q.deleteTicketNotificaionParticipantsStmt != nil {
		if cerr := q.deleteTicketNotificaionParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTicketNotificaionParticipantsStmt: %w", cerr)
		}
	}
	if q.deleteTicketNotificationStmt != nil {
		if cerr := q.deleteTicketNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTicketNotificationStmt: %w", cerr)
		}
	}
	if q.deleteUnfollowStmt != nil {
		if cerr := q.deleteUnfollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUnfollowStmt: %w", cerr)
		}
	}
	if q.deleteWeeklySettingsByWorkspaceIDAndShiftIDStmt != nil {
		if cerr := q.deleteWeeklySettingsByWorkspaceIDAndShiftIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWeeklySettingsByWorkspaceIDAndShiftIDStmt: %w", cerr)
		}
	}
	if q.deleteWorkflowByIDStmt != nil {
		if cerr := q.deleteWorkflowByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkflowByIDStmt: %w", cerr)
		}
	}
	if q.deleteWorkflowFormFieldStmt != nil {
		if cerr := q.deleteWorkflowFormFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkflowFormFieldStmt: %w", cerr)
		}
	}
	if q.deleteWorkflowFormFieldsStmt != nil {
		if cerr := q.deleteWorkflowFormFieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkflowFormFieldsStmt: %w", cerr)
		}
	}
	if q.deleteWorkflowFormFieldsByWorkflowIdStmt != nil {
		if cerr := q.deleteWorkflowFormFieldsByWorkflowIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteWorkflowFormFieldsByWorkflowIdStmt: %w", cerr)
		}
	}
	if q.getAdditionalRequestByIDStmt != nil {
		if cerr := q.getAdditionalRequestByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdditionalRequestByIDStmt: %w", cerr)
		}
	}
	if q.getAdditionalRequestsStmt != nil {
		if cerr := q.getAdditionalRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdditionalRequestsStmt: %w", cerr)
		}
	}
	if q.getAdvanceSettingStmt != nil {
		if cerr := q.getAdvanceSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdvanceSettingStmt: %w", cerr)
		}
	}
	if q.getAdvanceSettingParticipantsStmt != nil {
		if cerr := q.getAdvanceSettingParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAdvanceSettingParticipantsStmt: %w", cerr)
		}
	}
	if q.getAllMyTicketsCreatedByMeStmt != nil {
		if cerr := q.getAllMyTicketsCreatedByMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllMyTicketsCreatedByMeStmt: %w", cerr)
		}
	}
	if q.getAllMyTicketsOnHoldCreatedByMeStmt != nil {
		if cerr := q.getAllMyTicketsOnHoldCreatedByMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllMyTicketsOnHoldCreatedByMeStmt: %w", cerr)
		}
	}
	if q.getAllMyTicketsOnHoldSendToMeStmt != nil {
		if cerr := q.getAllMyTicketsOnHoldSendToMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllMyTicketsOnHoldSendToMeStmt: %w", cerr)
		}
	}
	if q.getAllMyTicketsSendToMeStmt != nil {
		if cerr := q.getAllMyTicketsSendToMeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllMyTicketsSendToMeStmt: %w", cerr)
		}
	}
	if q.getAllPrefixStmt != nil {
		if cerr := q.getAllPrefixStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllPrefixStmt: %w", cerr)
		}
	}
	if q.getAllPrefixPagingNextStmt != nil {
		if cerr := q.getAllPrefixPagingNextStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllPrefixPagingNextStmt: %w", cerr)
		}
	}
	if q.getAllPrefixPagingPrevStmt != nil {
		if cerr := q.getAllPrefixPagingPrevStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllPrefixPagingPrevStmt: %w", cerr)
		}
	}
	if q.getAllRefMyTicketsStmt != nil {
		if cerr := q.getAllRefMyTicketsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRefMyTicketsStmt: %w", cerr)
		}
	}
	if q.getAllShiftsStmt != nil {
		if cerr := q.getAllShiftsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllShiftsStmt: %w", cerr)
		}
	}
	if q.getAllShiftsPagingNextStmt != nil {
		if cerr := q.getAllShiftsPagingNextStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllShiftsPagingNextStmt: %w", cerr)
		}
	}
	if q.getAllShiftsPagingPrevStmt != nil {
		if cerr := q.getAllShiftsPagingPrevStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllShiftsPagingPrevStmt: %w", cerr)
		}
	}
	if q.getAllSlasStmt != nil {
		if cerr := q.getAllSlasStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllSlasStmt: %w", cerr)
		}
	}
	if q.getAllSlasPagingStmt != nil {
		if cerr := q.getAllSlasPagingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllSlasPagingStmt: %w", cerr)
		}
	}
	if q.getAllSlasPagingNextStmt != nil {
		if cerr := q.getAllSlasPagingNextStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllSlasPagingNextStmt: %w", cerr)
		}
	}
	if q.getAllSlasPagingPrevStmt != nil {
		if cerr := q.getAllSlasPagingPrevStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllSlasPagingPrevStmt: %w", cerr)
		}
	}
	if q.getAllWorkflowGroupsStmt != nil {
		if cerr := q.getAllWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.getAllWorkflowsStmt != nil {
		if cerr := q.getAllWorkflowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllWorkflowsStmt: %w", cerr)
		}
	}
	if q.getAllWorkflowsPagingNextStmt != nil {
		if cerr := q.getAllWorkflowsPagingNextStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllWorkflowsPagingNextStmt: %w", cerr)
		}
	}
	if q.getAllWorkflowsPagingPrevStmt != nil {
		if cerr := q.getAllWorkflowsPagingPrevStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllWorkflowsPagingPrevStmt: %w", cerr)
		}
	}
	if q.getChildWorkflowGroupsStmt != nil {
		if cerr := q.getChildWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChildWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.getCurrencyStmt != nil {
		if cerr := q.getCurrencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCurrencyStmt: %w", cerr)
		}
	}
	if q.getDateOffsByRangeStmt != nil {
		if cerr := q.getDateOffsByRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDateOffsByRangeStmt: %w", cerr)
		}
	}
	if q.getDateOffsByWorkspaceIDAndShiftIDStmt != nil {
		if cerr := q.getDateOffsByWorkspaceIDAndShiftIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDateOffsByWorkspaceIDAndShiftIDStmt: %w", cerr)
		}
	}
	if q.getDefaultPrefixStmt != nil {
		if cerr := q.getDefaultPrefixStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultPrefixStmt: %w", cerr)
		}
	}
	if q.getDefaultPrefixByFilterStmt != nil {
		if cerr := q.getDefaultPrefixByFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultPrefixByFilterStmt: %w", cerr)
		}
	}
	if q.getDefaultShiftStmt != nil {
		if cerr := q.getDefaultShiftStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultShiftStmt: %w", cerr)
		}
	}
	if q.getDefaultShiftByFilterStmt != nil {
		if cerr := q.getDefaultShiftByFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultShiftByFilterStmt: %w", cerr)
		}
	}
	if q.getDefaultSlaStmt != nil {
		if cerr := q.getDefaultSlaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultSlaStmt: %w", cerr)
		}
	}
	if q.getDefaultSlaByFilterStmt != nil {
		if cerr := q.getDefaultSlaByFilterStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDefaultSlaByFilterStmt: %w", cerr)
		}
	}
	if q.getEdgeByIDStmt != nil {
		if cerr := q.getEdgeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEdgeByIDStmt: %w", cerr)
		}
	}
	if q.getFullPathOfWorkflowGroupStmt != nil {
		if cerr := q.getFullPathOfWorkflowGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFullPathOfWorkflowGroupStmt: %w", cerr)
		}
	}
	if q.getLatestRecentActivityOfTicketStmt != nil {
		if cerr := q.getLatestRecentActivityOfTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestRecentActivityOfTicketStmt: %w", cerr)
		}
	}
	if q.getLatestRecentActivityOfTicketsStmt != nil {
		if cerr := q.getLatestRecentActivityOfTicketsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestRecentActivityOfTicketsStmt: %w", cerr)
		}
	}
	if q.getMyTicketByCurrentNodeIDStmt != nil {
		if cerr := q.getMyTicketByCurrentNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMyTicketByCurrentNodeIDStmt: %w", cerr)
		}
	}
	if q.getNextWorkflowGroupsByKeywordStmt != nil {
		if cerr := q.getNextWorkflowGroupsByKeywordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNextWorkflowGroupsByKeywordStmt: %w", cerr)
		}
	}
	if q.getNodeByIDStmt != nil {
		if cerr := q.getNodeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNodeByIDStmt: %w", cerr)
		}
	}
	if q.getOnHoldRequestByIDStmt != nil {
		if cerr := q.getOnHoldRequestByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOnHoldRequestByIDStmt: %w", cerr)
		}
	}
	if q.getParticipantByIDStmt != nil {
		if cerr := q.getParticipantByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParticipantByIDStmt: %w", cerr)
		}
	}
	if q.getParticipantMembersByWorkspaceIDAndParticipantIDStmt != nil {
		if cerr := q.getParticipantMembersByWorkspaceIDAndParticipantIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParticipantMembersByWorkspaceIDAndParticipantIDStmt: %w", cerr)
		}
	}
	if q.getParticipantMembersByWorkspaceIDAndParticipantIDsStmt != nil {
		if cerr := q.getParticipantMembersByWorkspaceIDAndParticipantIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getParticipantMembersByWorkspaceIDAndParticipantIDsStmt: %w", cerr)
		}
	}
	if q.getPrefixByIDStmt != nil {
		if cerr := q.getPrefixByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPrefixByIDStmt: %w", cerr)
		}
	}
	if q.getPreviousWorkflowGroupsByKeywordStmt != nil {
		if cerr := q.getPreviousWorkflowGroupsByKeywordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPreviousWorkflowGroupsByKeywordStmt: %w", cerr)
		}
	}
	if q.getRangeWorkflowGroupsStmt != nil {
		if cerr := q.getRangeWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRangeWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.getRootWorkflowGroupStmt != nil {
		if cerr := q.getRootWorkflowGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRootWorkflowGroupStmt: %w", cerr)
		}
	}
	if q.getRootWorkflowGroupsForUpdateStmt != nil {
		if cerr := q.getRootWorkflowGroupsForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRootWorkflowGroupsForUpdateStmt: %w", cerr)
		}
	}
	if q.getShiftByIDStmt != nil {
		if cerr := q.getShiftByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShiftByIDStmt: %w", cerr)
		}
	}
	if q.getSlaByIDStmt != nil {
		if cerr := q.getSlaByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSlaByIDStmt: %w", cerr)
		}
	}
	if q.getSlasByShiftIDStmt != nil {
		if cerr := q.getSlasByShiftIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSlasByShiftIDStmt: %w", cerr)
		}
	}
	if q.getStartNodeStmt != nil {
		if cerr := q.getStartNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStartNodeStmt: %w", cerr)
		}
	}
	if q.getStartNodeOfTicketStmt != nil {
		if cerr := q.getStartNodeOfTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStartNodeOfTicketStmt: %w", cerr)
		}
	}
	if q.getTagStmt != nil {
		if cerr := q.getTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagStmt: %w", cerr)
		}
	}
	if q.getTagSearchByNameStmt != nil {
		if cerr := q.getTagSearchByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagSearchByNameStmt: %w", cerr)
		}
	}
	if q.getTagSearchByNameWithPublishedStmt != nil {
		if cerr := q.getTagSearchByNameWithPublishedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagSearchByNameWithPublishedStmt: %w", cerr)
		}
	}
	if q.getTagWithPublishedStmt != nil {
		if cerr := q.getTagWithPublishedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagWithPublishedStmt: %w", cerr)
		}
	}
	if q.getTagWorkflowGroupsStmt != nil {
		if cerr := q.getTagWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.getTagWorkflowsStmt != nil {
		if cerr := q.getTagWorkflowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagWorkflowsStmt: %w", cerr)
		}
	}
	if q.getTagsByWorkflowIDStmt != nil {
		if cerr := q.getTagsByWorkflowIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsByWorkflowIDStmt: %w", cerr)
		}
	}
	if q.getTagsSortByNameStmt != nil {
		if cerr := q.getTagsSortByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagsSortByNameStmt: %w", cerr)
		}
	}
	if q.getTaskByIDStmt != nil {
		if cerr := q.getTaskByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTaskByIDStmt: %w", cerr)
		}
	}
	if q.getTicketByIDStmt != nil {
		if cerr := q.getTicketByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketByIDStmt: %w", cerr)
		}
	}
	if q.getTicketEdgesByCurrentNodeIDStmt != nil {
		if cerr := q.getTicketEdgesByCurrentNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketEdgesByCurrentNodeIDStmt: %w", cerr)
		}
	}
	if q.getTicketFieldStmt != nil {
		if cerr := q.getTicketFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketFieldStmt: %w", cerr)
		}
	}
	if q.getTicketNodeByNodeIDStmt != nil {
		if cerr := q.getTicketNodeByNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketNodeByNodeIDStmt: %w", cerr)
		}
	}
	if q.getTicketNodeParticipantByRoleAndTypeStmt != nil {
		if cerr := q.getTicketNodeParticipantByRoleAndTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketNodeParticipantByRoleAndTypeStmt: %w", cerr)
		}
	}
	if q.getTicketNotificationStmt != nil {
		if cerr := q.getTicketNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketNotificationStmt: %w", cerr)
		}
	}
	if q.getTicketNotificationByIDStmt != nil {
		if cerr := q.getTicketNotificationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketNotificationByIDStmt: %w", cerr)
		}
	}
	if q.getTicketNotificationParticipantsStmt != nil {
		if cerr := q.getTicketNotificationParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketNotificationParticipantsStmt: %w", cerr)
		}
	}
	if q.getTicketTagsByTicketIDStmt != nil {
		if cerr := q.getTicketTagsByTicketIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketTagsByTicketIDStmt: %w", cerr)
		}
	}
	if q.getTicketTagsByTicketIDsStmt != nil {
		if cerr := q.getTicketTagsByTicketIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketTagsByTicketIDsStmt: %w", cerr)
		}
	}
	if q.getWeeklySettingsByWorkspaceIDAndShiftIDStmt != nil {
		if cerr := q.getWeeklySettingsByWorkspaceIDAndShiftIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWeeklySettingsByWorkspaceIDAndShiftIDStmt: %w", cerr)
		}
	}
	if q.getWorkflowByIDStmt != nil {
		if cerr := q.getWorkflowByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkflowByIDStmt: %w", cerr)
		}
	}
	if q.getWorkflowFormFieldStmt != nil {
		if cerr := q.getWorkflowFormFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkflowFormFieldStmt: %w", cerr)
		}
	}
	if q.getWorkflowGroupStmt != nil {
		if cerr := q.getWorkflowGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkflowGroupStmt: %w", cerr)
		}
	}
	if q.getWorkflowGroupsStmt != nil {
		if cerr := q.getWorkflowGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkflowGroupsStmt: %w", cerr)
		}
	}
	if q.getWorkflowGroupsByKeywordStmt != nil {
		if cerr := q.getWorkflowGroupsByKeywordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getWorkflowGroupsByKeywordStmt: %w", cerr)
		}
	}
	if q.listCurrenciesStmt != nil {
		if cerr := q.listCurrenciesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCurrenciesStmt: %w", cerr)
		}
	}
	if q.listCurrentTicketNodesStmt != nil {
		if cerr := q.listCurrentTicketNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCurrentTicketNodesStmt: %w", cerr)
		}
	}
	if q.listEdgesByWorkflowIDStmt != nil {
		if cerr := q.listEdgesByWorkflowIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEdgesByWorkflowIDStmt: %w", cerr)
		}
	}
	if q.listFirstClassWorkflowFormFieldsByWorkflowIdStmt != nil {
		if cerr := q.listFirstClassWorkflowFormFieldsByWorkflowIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFirstClassWorkflowFormFieldsByWorkflowIdStmt: %w", cerr)
		}
	}
	if q.listNodeParticipantsByNodeIDStmt != nil {
		if cerr := q.listNodeParticipantsByNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNodeParticipantsByNodeIDStmt: %w", cerr)
		}
	}
	if q.listNodesByWorkflowIDStmt != nil {
		if cerr := q.listNodesByWorkflowIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listNodesByWorkflowIDStmt: %w", cerr)
		}
	}
	if q.listOnHoldRequestApproversStmt != nil {
		if cerr := q.listOnHoldRequestApproversStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listOnHoldRequestApproversStmt: %w", cerr)
		}
	}
	if q.listParticipantsByEightIDsStmt != nil {
		if cerr := q.listParticipantsByEightIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsByEightIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsByFiveIDsStmt != nil {
		if cerr := q.listParticipantsByFiveIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsByFiveIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsByFourIDsStmt != nil {
		if cerr := q.listParticipantsByFourIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsByFourIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsByNineIDsStmt != nil {
		if cerr := q.listParticipantsByNineIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsByNineIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsBySevenIDsStmt != nil {
		if cerr := q.listParticipantsBySevenIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsBySevenIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsBySixIDsStmt != nil {
		if cerr := q.listParticipantsBySixIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsBySixIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsByTenIDsStmt != nil {
		if cerr := q.listParticipantsByTenIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsByTenIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsByThreeIDsStmt != nil {
		if cerr := q.listParticipantsByThreeIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsByThreeIDsStmt: %w", cerr)
		}
	}
	if q.listParticipantsByTwoIDsStmt != nil {
		if cerr := q.listParticipantsByTwoIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listParticipantsByTwoIDsStmt: %w", cerr)
		}
	}
	if q.listPreviewNodeAdminsStmt != nil {
		if cerr := q.listPreviewNodeAdminsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPreviewNodeAdminsStmt: %w", cerr)
		}
	}
	if q.listPreviewNodeAssigneesStmt != nil {
		if cerr := q.listPreviewNodeAssigneesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPreviewNodeAssigneesStmt: %w", cerr)
		}
	}
	if q.listProcessedTicketEdgesStmt != nil {
		if cerr := q.listProcessedTicketEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProcessedTicketEdgesStmt: %w", cerr)
		}
	}
	if q.listProcessedTicketNodesStmt != nil {
		if cerr := q.listProcessedTicketNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listProcessedTicketNodesStmt: %w", cerr)
		}
	}
	if q.listRefTicketsStmt != nil {
		if cerr := q.listRefTicketsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRefTicketsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByEightTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsByEightTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByEightTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByFiveTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsByFiveTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByFiveTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByFourTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsByFourTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByFourTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByNineTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsByNineTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByNineTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsBySevenTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsBySevenTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsBySevenTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsBySixTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsBySixTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsBySixTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByTaskIDStmt != nil {
		if cerr := q.listTaskParticipantsByTaskIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByTaskIDStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByTenTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsByTenTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByTenTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByThreeTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsByThreeTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByThreeTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTaskParticipantsByTwoTaskIDsStmt != nil {
		if cerr := q.listTaskParticipantsByTwoTaskIDsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTaskParticipantsByTwoTaskIDsStmt: %w", cerr)
		}
	}
	if q.listTasksByNodeIDStmt != nil {
		if cerr := q.listTasksByNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTasksByNodeIDStmt: %w", cerr)
		}
	}
	if q.listTicketActivitiesStmt != nil {
		if cerr := q.listTicketActivitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketActivitiesStmt: %w", cerr)
		}
	}
	if q.listTicketAdvanceSettingParticipantsStmt != nil {
		if cerr := q.listTicketAdvanceSettingParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketAdvanceSettingParticipantsStmt: %w", cerr)
		}
	}
	if q.listTicketAdvanceSettingParticipantsByRefIDStmt != nil {
		if cerr := q.listTicketAdvanceSettingParticipantsByRefIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketAdvanceSettingParticipantsByRefIDStmt: %w", cerr)
		}
	}
	if q.listTicketAdvanceSettingParticipantsByTypeStmt != nil {
		if cerr := q.listTicketAdvanceSettingParticipantsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketAdvanceSettingParticipantsByTypeStmt: %w", cerr)
		}
	}
	if q.listTicketEdgesStmt != nil {
		if cerr := q.listTicketEdgesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketEdgesStmt: %w", cerr)
		}
	}
	if q.listTicketFieldsStmt != nil {
		if cerr := q.listTicketFieldsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketFieldsStmt: %w", cerr)
		}
	}
	if q.listTicketFlowchartHistoriesStmt != nil {
		if cerr := q.listTicketFlowchartHistoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketFlowchartHistoriesStmt: %w", cerr)
		}
	}
	if q.listTicketNodeParticipantsByNodeIDStmt != nil {
		if cerr := q.listTicketNodeParticipantsByNodeIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketNodeParticipantsByNodeIDStmt: %w", cerr)
		}
	}
	if q.listTicketNodesStmt != nil {
		if cerr := q.listTicketNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketNodesStmt: %w", cerr)
		}
	}
	if q.listUnfollowByUserIDStmt != nil {
		if cerr := q.listUnfollowByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUnfollowByUserIDStmt: %w", cerr)
		}
	}
	if q.listUserTicketRolesStmt != nil {
		if cerr := q.listUserTicketRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserTicketRolesStmt: %w", cerr)
		}
	}
	if q.listWaitingOnHoldRequestsStmt != nil {
		if cerr := q.listWaitingOnHoldRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWaitingOnHoldRequestsStmt: %w", cerr)
		}
	}
	if q.listWorkflowFormFieldsByWorkflowIdStmt != nil {
		if cerr := q.listWorkflowFormFieldsByWorkflowIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listWorkflowFormFieldsByWorkflowIdStmt: %w", cerr)
		}
	}
	if q.lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt != nil {
		if cerr := q.lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt: %w", cerr)
		}
	}
	if q.lockPrefixByWorkspaceIDForUpdateStmt != nil {
		if cerr := q.lockPrefixByWorkspaceIDForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lockPrefixByWorkspaceIDForUpdateStmt: %w", cerr)
		}
	}
	if q.lockShiftsByWorkspaceIDForUpdateStmt != nil {
		if cerr := q.lockShiftsByWorkspaceIDForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lockShiftsByWorkspaceIDForUpdateStmt: %w", cerr)
		}
	}
	if q.lockSlasByWorkspaceIDForUpdateStmt != nil {
		if cerr := q.lockSlasByWorkspaceIDForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing lockSlasByWorkspaceIDForUpdateStmt: %w", cerr)
		}
	}
	if q.removeTicketNodeParticipantStmt != nil {
		if cerr := q.removeTicketNodeParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeTicketNodeParticipantStmt: %w", cerr)
		}
	}
	if q.resetStatusAndDeadlineTicketNodesByTicketIDStmt != nil {
		if cerr := q.resetStatusAndDeadlineTicketNodesByTicketIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetStatusAndDeadlineTicketNodesByTicketIDStmt: %w", cerr)
		}
	}
	if q.responseTicketNodeStmt != nil {
		if cerr := q.responseTicketNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing responseTicketNodeStmt: %w", cerr)
		}
	}
	if q.reviewTicketStmt != nil {
		if cerr := q.reviewTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing reviewTicketStmt: %w", cerr)
		}
	}
	if q.updateAdditionalRequestStmt != nil {
		if cerr := q.updateAdditionalRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAdditionalRequestStmt: %w", cerr)
		}
	}
	if q.updateAdvanceSettingStmt != nil {
		if cerr := q.updateAdvanceSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAdvanceSettingStmt: %w", cerr)
		}
	}
	if q.updateAssigneeOfCurrentNodeOnMyTicketStmt != nil {
		if cerr := q.updateAssigneeOfCurrentNodeOnMyTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAssigneeOfCurrentNodeOnMyTicketStmt: %w", cerr)
		}
	}
	if q.updateBowersBeforeAppendStmt != nil {
		if cerr := q.updateBowersBeforeAppendStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBowersBeforeAppendStmt: %w", cerr)
		}
	}
	if q.updateCurrencyStmt != nil {
		if cerr := q.updateCurrencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCurrencyStmt: %w", cerr)
		}
	}
	if q.updateIsDefaultPrefixByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateIsDefaultPrefixByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateIsDefaultPrefixByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updateIsDefaultShiftByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateIsDefaultShiftByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateIsDefaultShiftByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updateNodeStmt != nil {
		if cerr := q.updateNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNodeStmt: %w", cerr)
		}
	}
	if q.updateOldDefaultShiftStmt != nil {
		if cerr := q.updateOldDefaultShiftStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOldDefaultShiftStmt: %w", cerr)
		}
	}
	if q.updateOnHoldRequestStatusStmt != nil {
		if cerr := q.updateOnHoldRequestStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOnHoldRequestStatusStmt: %w", cerr)
		}
	}
	if q.updateParticipantByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateParticipantByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateParticipantByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updatePrefixByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updatePrefixByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePrefixByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updatePrefixIDOfWorkflowsStmt != nil {
		if cerr := q.updatePrefixIDOfWorkflowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePrefixIDOfWorkflowsStmt: %w", cerr)
		}
	}
	if q.updateShiftByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateShiftByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateShiftByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updateSlaIDOfNodesStmt != nil {
		if cerr := q.updateSlaIDOfNodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSlaIDOfNodesStmt: %w", cerr)
		}
	}
	if q.updateStatusOfCurrentNodeOnMyTicketStmt != nil {
		if cerr := q.updateStatusOfCurrentNodeOnMyTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusOfCurrentNodeOnMyTicketStmt: %w", cerr)
		}
	}
	if q.updateStatusOfLatestRecentNodeOnMyTicketStmt != nil {
		if cerr := q.updateStatusOfLatestRecentNodeOnMyTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusOfLatestRecentNodeOnMyTicketStmt: %w", cerr)
		}
	}
	if q.updateStatusPrefixByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateStatusPrefixByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusPrefixByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updateStatusShiftByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateStatusShiftByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusShiftByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updateStatusTicketStmt != nil {
		if cerr := q.updateStatusTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusTicketStmt: %w", cerr)
		}
	}
	if q.updateStatusTicketNodeStmt != nil {
		if cerr := q.updateStatusTicketNodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStatusTicketNodeStmt: %w", cerr)
		}
	}
	if q.updateTagStmt != nil {
		if cerr := q.updateTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTagStmt: %w", cerr)
		}
	}
	if q.updateTicketNodeAssigneeStmt != nil {
		if cerr := q.updateTicketNodeAssigneeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTicketNodeAssigneeStmt: %w", cerr)
		}
	}
	if q.updateTicketNodeCancelOnHoldStmt != nil {
		if cerr := q.updateTicketNodeCancelOnHoldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTicketNodeCancelOnHoldStmt: %w", cerr)
		}
	}
	if q.updateTicketNodeToOnHoldStmt != nil {
		if cerr := q.updateTicketNodeToOnHoldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTicketNodeToOnHoldStmt: %w", cerr)
		}
	}
	if q.updateTicketNotificationStmt != nil {
		if cerr := q.updateTicketNotificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTicketNotificationStmt: %w", cerr)
		}
	}
	if q.updateTicketStatusStmt != nil {
		if cerr := q.updateTicketStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTicketStatusStmt: %w", cerr)
		}
	}
	if q.updateWorkflowByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateWorkflowByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkflowByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.updateWorkflowFormFieldStmt != nil {
		if cerr := q.updateWorkflowFormFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkflowFormFieldStmt: %w", cerr)
		}
	}
	if q.updateWorkflowGroupStmt != nil {
		if cerr := q.updateWorkflowGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkflowGroupStmt: %w", cerr)
		}
	}
	if q.updateWorkflowPublishedByWorkspaceIDAndIDStmt != nil {
		if cerr := q.updateWorkflowPublishedByWorkspaceIDAndIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateWorkflowPublishedByWorkspaceIDAndIDStmt: %w", cerr)
		}
	}
	if q.upsertTicketFieldStmt != nil {
		if cerr := q.upsertTicketFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertTicketFieldStmt: %w", cerr)
		}
	}
	if q.upsertWorkflowFormFieldStmt != nil {
		if cerr := q.upsertWorkflowFormFieldStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertWorkflowFormFieldStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                                               DBTX
	tx                                                               *sql.Tx
	countAdditionalRequestsByStatusStmt                              *sql.Stmt
	countDefaultPrefixesByWorkspaceIDStmt                            *sql.Stmt
	countDefaultShiftsByWorkspaceIDStmt                              *sql.Stmt
	countDefaultSlaByWorkspaceIDStmt                                 *sql.Stmt
	countExistedNameSlaByWorkspaceIDStmt                             *sql.Stmt
	countMinBeLongToAdvanceSettingStmt                               *sql.Stmt
	countMinSameParticipantsStmt                                     *sql.Stmt
	countMyTicketsCreatedByMeStmt                                    *sql.Stmt
	countMyTicketsOnHoldCreatedByMeStmt                              *sql.Stmt
	countMyTicketsOnHoldSendToMeStmt                                 *sql.Stmt
	countMyTicketsSendToMeStmt                                       *sql.Stmt
	countNodesByWorkflowIDStmt                                       *sql.Stmt
	countParticipantExistedByWorkspaceIDAndIDStmt                    *sql.Stmt
	countParticipantMemberByWorkspaceIDAndParticipantIDStmt          *sql.Stmt
	countParticipantMembersByUserIDIDAndParticipantIDsStmt           *sql.Stmt
	countPrefixesStmt                                                *sql.Stmt
	countRefMyTicketsStmt                                            *sql.Stmt
	countShiftsStmt                                                  *sql.Stmt
	countSlasStmt                                                    *sql.Stmt
	countTicketAdvanceSettingParticipantsByTypeStmt                  *sql.Stmt
	countTotalNodeOnMyTicketStmt                                     *sql.Stmt
	countUnfollowStmt                                                *sql.Stmt
	countWaitingOnHoldRequestsStmt                                   *sql.Stmt
	countWorkflowsStmt                                               *sql.Stmt
	createAdditionalRequestStmt                                      *sql.Stmt
	createAdvanceSettingStmt                                         *sql.Stmt
	createAdvanceSettingParticipantStmt                              *sql.Stmt
	createCurrencyStmt                                               *sql.Stmt
	createDateOffStmt                                                *sql.Stmt
	createEdgeStmt                                                   *sql.Stmt
	createIfNotExistParticipantStmt                                  *sql.Stmt
	createIfNotExistParticipantMemberStmt                            *sql.Stmt
	createMyTicketStmt                                               *sql.Stmt
	createNodeStmt                                                   *sql.Stmt
	createNodeParticipantStmt                                        *sql.Stmt
	createOnHoldRequestStmt                                          *sql.Stmt
	createOnHoldRequestApproverStmt                                  *sql.Stmt
	createParticipantStmt                                            *sql.Stmt
	createPrefixStmt                                                 *sql.Stmt
	createShiftStmt                                                  *sql.Stmt
	createSlaStmt                                                    *sql.Stmt
	createTagStmt                                                    *sql.Stmt
	createTagWorkflowGroupsStmt                                      *sql.Stmt
	createTagWorkflowsStmt                                           *sql.Stmt
	createTaskStmt                                                   *sql.Stmt
	createTaskParticipantStmt                                        *sql.Stmt
	createTicketStmt                                                 *sql.Stmt
	createTicketActivityStmt                                         *sql.Stmt
	createTicketAdvanceSettingParticipantStmt                        *sql.Stmt
	createTicketEdgeStmt                                             *sql.Stmt
	createTicketFieldStmt                                            *sql.Stmt
	createTicketFlowchartHistoryStmt                                 *sql.Stmt
	createTicketNodeStmt                                             *sql.Stmt
	createTicketNodeParticipantStmt                                  *sql.Stmt
	createTicketNotificationStmt                                     *sql.Stmt
	createTicketNotificationParticipantStmt                          *sql.Stmt
	createTicketTagStmt                                              *sql.Stmt
	createUnfollowStmt                                               *sql.Stmt
	createWeeklySettingStmt                                          *sql.Stmt
	createWorkflowStmt                                               *sql.Stmt
	createWorkflowFormFieldStmt                                      *sql.Stmt
	createWorkflowGroupStmt                                          *sql.Stmt
	deleteAdvanceSettingParticipantsStmt                             *sql.Stmt
	deleteAllTagWorkflowGroupsStmt                                   *sql.Stmt
	deleteAllTagWorkflowsStmt                                        *sql.Stmt
	deleteAllWorkflowEdgesStmt                                       *sql.Stmt
	deleteAllWorkflowNodesStmt                                       *sql.Stmt
	deleteCurrencyStmt                                               *sql.Stmt
	deleteDateOffsByWorkspaceIDAndShiftIDStmt                        *sql.Stmt
	deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffIDStmt            *sql.Stmt
	deleteEdgesStmt                                                  *sql.Stmt
	deleteNodeStmt                                                   *sql.Stmt
	deleteNodeEdgesStmt                                              *sql.Stmt
	deleteNodeParticipantStmt                                        *sql.Stmt
	deleteNodeParticipantByNodeIDStmt                                *sql.Stmt
	deleteOtherWorkflowFormFieldsStmt                                *sql.Stmt
	deleteParticipantByWorkspaceIDAndIDStmt                          *sql.Stmt
	deleteParticipantMemberStmt                                      *sql.Stmt
	deleteParticipantMembersStmt                                     *sql.Stmt
	deleteParticipantMembersByParticipantIDStmt                      *sql.Stmt
	deletePrefixByWorkspaceIDAndIDStmt                               *sql.Stmt
	deleteRangeStmt                                                  *sql.Stmt
	deleteShiftByWorkspaceIDAndIDStmt                                *sql.Stmt
	deleteTagStmt                                                    *sql.Stmt
	deleteTagWorkflowGroupsStmt                                      *sql.Stmt
	deleteTagWorkflowsStmt                                           *sql.Stmt
	deleteTaskStmt                                                   *sql.Stmt
	deleteTaskParticipantStmt                                        *sql.Stmt
	deleteTaskParticipantByTaskIDStmt                                *sql.Stmt
	deleteTicketNotificaionParticipantsStmt                          *sql.Stmt
	deleteTicketNotificationStmt                                     *sql.Stmt
	deleteUnfollowStmt                                               *sql.Stmt
	deleteWeeklySettingsByWorkspaceIDAndShiftIDStmt                  *sql.Stmt
	deleteWorkflowByIDStmt                                           *sql.Stmt
	deleteWorkflowFormFieldStmt                                      *sql.Stmt
	deleteWorkflowFormFieldsStmt                                     *sql.Stmt
	deleteWorkflowFormFieldsByWorkflowIdStmt                         *sql.Stmt
	getAdditionalRequestByIDStmt                                     *sql.Stmt
	getAdditionalRequestsStmt                                        *sql.Stmt
	getAdvanceSettingStmt                                            *sql.Stmt
	getAdvanceSettingParticipantsStmt                                *sql.Stmt
	getAllMyTicketsCreatedByMeStmt                                   *sql.Stmt
	getAllMyTicketsOnHoldCreatedByMeStmt                             *sql.Stmt
	getAllMyTicketsOnHoldSendToMeStmt                                *sql.Stmt
	getAllMyTicketsSendToMeStmt                                      *sql.Stmt
	getAllPrefixStmt                                                 *sql.Stmt
	getAllPrefixPagingNextStmt                                       *sql.Stmt
	getAllPrefixPagingPrevStmt                                       *sql.Stmt
	getAllRefMyTicketsStmt                                           *sql.Stmt
	getAllShiftsStmt                                                 *sql.Stmt
	getAllShiftsPagingNextStmt                                       *sql.Stmt
	getAllShiftsPagingPrevStmt                                       *sql.Stmt
	getAllSlasStmt                                                   *sql.Stmt
	getAllSlasPagingStmt                                             *sql.Stmt
	getAllSlasPagingNextStmt                                         *sql.Stmt
	getAllSlasPagingPrevStmt                                         *sql.Stmt
	getAllWorkflowGroupsStmt                                         *sql.Stmt
	getAllWorkflowsStmt                                              *sql.Stmt
	getAllWorkflowsPagingNextStmt                                    *sql.Stmt
	getAllWorkflowsPagingPrevStmt                                    *sql.Stmt
	getChildWorkflowGroupsStmt                                       *sql.Stmt
	getCurrencyStmt                                                  *sql.Stmt
	getDateOffsByRangeStmt                                           *sql.Stmt
	getDateOffsByWorkspaceIDAndShiftIDStmt                           *sql.Stmt
	getDefaultPrefixStmt                                             *sql.Stmt
	getDefaultPrefixByFilterStmt                                     *sql.Stmt
	getDefaultShiftStmt                                              *sql.Stmt
	getDefaultShiftByFilterStmt                                      *sql.Stmt
	getDefaultSlaStmt                                                *sql.Stmt
	getDefaultSlaByFilterStmt                                        *sql.Stmt
	getEdgeByIDStmt                                                  *sql.Stmt
	getFullPathOfWorkflowGroupStmt                                   *sql.Stmt
	getLatestRecentActivityOfTicketStmt                              *sql.Stmt
	getLatestRecentActivityOfTicketsStmt                             *sql.Stmt
	getMyTicketByCurrentNodeIDStmt                                   *sql.Stmt
	getNextWorkflowGroupsByKeywordStmt                               *sql.Stmt
	getNodeByIDStmt                                                  *sql.Stmt
	getOnHoldRequestByIDStmt                                         *sql.Stmt
	getParticipantByIDStmt                                           *sql.Stmt
	getParticipantMembersByWorkspaceIDAndParticipantIDStmt           *sql.Stmt
	getParticipantMembersByWorkspaceIDAndParticipantIDsStmt          *sql.Stmt
	getPrefixByIDStmt                                                *sql.Stmt
	getPreviousWorkflowGroupsByKeywordStmt                           *sql.Stmt
	getRangeWorkflowGroupsStmt                                       *sql.Stmt
	getRootWorkflowGroupStmt                                         *sql.Stmt
	getRootWorkflowGroupsForUpdateStmt                               *sql.Stmt
	getShiftByIDStmt                                                 *sql.Stmt
	getSlaByIDStmt                                                   *sql.Stmt
	getSlasByShiftIDStmt                                             *sql.Stmt
	getStartNodeStmt                                                 *sql.Stmt
	getStartNodeOfTicketStmt                                         *sql.Stmt
	getTagStmt                                                       *sql.Stmt
	getTagSearchByNameStmt                                           *sql.Stmt
	getTagSearchByNameWithPublishedStmt                              *sql.Stmt
	getTagWithPublishedStmt                                          *sql.Stmt
	getTagWorkflowGroupsStmt                                         *sql.Stmt
	getTagWorkflowsStmt                                              *sql.Stmt
	getTagsByWorkflowIDStmt                                          *sql.Stmt
	getTagsSortByNameStmt                                            *sql.Stmt
	getTaskByIDStmt                                                  *sql.Stmt
	getTicketByIDStmt                                                *sql.Stmt
	getTicketEdgesByCurrentNodeIDStmt                                *sql.Stmt
	getTicketFieldStmt                                               *sql.Stmt
	getTicketNodeByNodeIDStmt                                        *sql.Stmt
	getTicketNodeParticipantByRoleAndTypeStmt                        *sql.Stmt
	getTicketNotificationStmt                                        *sql.Stmt
	getTicketNotificationByIDStmt                                    *sql.Stmt
	getTicketNotificationParticipantsStmt                            *sql.Stmt
	getTicketTagsByTicketIDStmt                                      *sql.Stmt
	getTicketTagsByTicketIDsStmt                                     *sql.Stmt
	getWeeklySettingsByWorkspaceIDAndShiftIDStmt                     *sql.Stmt
	getWorkflowByIDStmt                                              *sql.Stmt
	getWorkflowFormFieldStmt                                         *sql.Stmt
	getWorkflowGroupStmt                                             *sql.Stmt
	getWorkflowGroupsStmt                                            *sql.Stmt
	getWorkflowGroupsByKeywordStmt                                   *sql.Stmt
	listCurrenciesStmt                                               *sql.Stmt
	listCurrentTicketNodesStmt                                       *sql.Stmt
	listEdgesByWorkflowIDStmt                                        *sql.Stmt
	listFirstClassWorkflowFormFieldsByWorkflowIdStmt                 *sql.Stmt
	listNodeParticipantsByNodeIDStmt                                 *sql.Stmt
	listNodesByWorkflowIDStmt                                        *sql.Stmt
	listOnHoldRequestApproversStmt                                   *sql.Stmt
	listParticipantsByEightIDsStmt                                   *sql.Stmt
	listParticipantsByFiveIDsStmt                                    *sql.Stmt
	listParticipantsByFourIDsStmt                                    *sql.Stmt
	listParticipantsByNineIDsStmt                                    *sql.Stmt
	listParticipantsBySevenIDsStmt                                   *sql.Stmt
	listParticipantsBySixIDsStmt                                     *sql.Stmt
	listParticipantsByTenIDsStmt                                     *sql.Stmt
	listParticipantsByThreeIDsStmt                                   *sql.Stmt
	listParticipantsByTwoIDsStmt                                     *sql.Stmt
	listPreviewNodeAdminsStmt                                        *sql.Stmt
	listPreviewNodeAssigneesStmt                                     *sql.Stmt
	listProcessedTicketEdgesStmt                                     *sql.Stmt
	listProcessedTicketNodesStmt                                     *sql.Stmt
	listRefTicketsStmt                                               *sql.Stmt
	listTaskParticipantsByEightTaskIDsStmt                           *sql.Stmt
	listTaskParticipantsByFiveTaskIDsStmt                            *sql.Stmt
	listTaskParticipantsByFourTaskIDsStmt                            *sql.Stmt
	listTaskParticipantsByNineTaskIDsStmt                            *sql.Stmt
	listTaskParticipantsBySevenTaskIDsStmt                           *sql.Stmt
	listTaskParticipantsBySixTaskIDsStmt                             *sql.Stmt
	listTaskParticipantsByTaskIDStmt                                 *sql.Stmt
	listTaskParticipantsByTenTaskIDsStmt                             *sql.Stmt
	listTaskParticipantsByThreeTaskIDsStmt                           *sql.Stmt
	listTaskParticipantsByTwoTaskIDsStmt                             *sql.Stmt
	listTasksByNodeIDStmt                                            *sql.Stmt
	listTicketActivitiesStmt                                         *sql.Stmt
	listTicketAdvanceSettingParticipantsStmt                         *sql.Stmt
	listTicketAdvanceSettingParticipantsByRefIDStmt                  *sql.Stmt
	listTicketAdvanceSettingParticipantsByTypeStmt                   *sql.Stmt
	listTicketEdgesStmt                                              *sql.Stmt
	listTicketFieldsStmt                                             *sql.Stmt
	listTicketFlowchartHistoriesStmt                                 *sql.Stmt
	listTicketNodeParticipantsByNodeIDStmt                           *sql.Stmt
	listTicketNodesStmt                                              *sql.Stmt
	listUnfollowByUserIDStmt                                         *sql.Stmt
	listUserTicketRolesStmt                                          *sql.Stmt
	listWaitingOnHoldRequestsStmt                                    *sql.Stmt
	listWorkflowFormFieldsByWorkflowIdStmt                           *sql.Stmt
	lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt *sql.Stmt
	lockPrefixByWorkspaceIDForUpdateStmt                             *sql.Stmt
	lockShiftsByWorkspaceIDForUpdateStmt                             *sql.Stmt
	lockSlasByWorkspaceIDForUpdateStmt                               *sql.Stmt
	removeTicketNodeParticipantStmt                                  *sql.Stmt
	resetStatusAndDeadlineTicketNodesByTicketIDStmt                  *sql.Stmt
	responseTicketNodeStmt                                           *sql.Stmt
	reviewTicketStmt                                                 *sql.Stmt
	updateAdditionalRequestStmt                                      *sql.Stmt
	updateAdvanceSettingStmt                                         *sql.Stmt
	updateAssigneeOfCurrentNodeOnMyTicketStmt                        *sql.Stmt
	updateBowersBeforeAppendStmt                                     *sql.Stmt
	updateCurrencyStmt                                               *sql.Stmt
	updateIsDefaultPrefixByWorkspaceIDAndIDStmt                      *sql.Stmt
	updateIsDefaultShiftByWorkspaceIDAndIDStmt                       *sql.Stmt
	updateNodeStmt                                                   *sql.Stmt
	updateOldDefaultShiftStmt                                        *sql.Stmt
	updateOnHoldRequestStatusStmt                                    *sql.Stmt
	updateParticipantByWorkspaceIDAndIDStmt                          *sql.Stmt
	updatePrefixByWorkspaceIDAndIDStmt                               *sql.Stmt
	updatePrefixIDOfWorkflowsStmt                                    *sql.Stmt
	updateShiftByWorkspaceIDAndIDStmt                                *sql.Stmt
	updateSlaIDOfNodesStmt                                           *sql.Stmt
	updateStatusOfCurrentNodeOnMyTicketStmt                          *sql.Stmt
	updateStatusOfLatestRecentNodeOnMyTicketStmt                     *sql.Stmt
	updateStatusPrefixByWorkspaceIDAndIDStmt                         *sql.Stmt
	updateStatusShiftByWorkspaceIDAndIDStmt                          *sql.Stmt
	updateStatusTicketStmt                                           *sql.Stmt
	updateStatusTicketNodeStmt                                       *sql.Stmt
	updateTagStmt                                                    *sql.Stmt
	updateTicketNodeAssigneeStmt                                     *sql.Stmt
	updateTicketNodeCancelOnHoldStmt                                 *sql.Stmt
	updateTicketNodeToOnHoldStmt                                     *sql.Stmt
	updateTicketNotificationStmt                                     *sql.Stmt
	updateTicketStatusStmt                                           *sql.Stmt
	updateWorkflowByWorkspaceIDAndIDStmt                             *sql.Stmt
	updateWorkflowFormFieldStmt                                      *sql.Stmt
	updateWorkflowGroupStmt                                          *sql.Stmt
	updateWorkflowPublishedByWorkspaceIDAndIDStmt                    *sql.Stmt
	upsertTicketFieldStmt                                            *sql.Stmt
	upsertWorkflowFormFieldStmt                                      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                                      tx,
		tx:                                                      tx,
		countAdditionalRequestsByStatusStmt:                     q.countAdditionalRequestsByStatusStmt,
		countDefaultPrefixesByWorkspaceIDStmt:                   q.countDefaultPrefixesByWorkspaceIDStmt,
		countDefaultShiftsByWorkspaceIDStmt:                     q.countDefaultShiftsByWorkspaceIDStmt,
		countDefaultSlaByWorkspaceIDStmt:                        q.countDefaultSlaByWorkspaceIDStmt,
		countExistedNameSlaByWorkspaceIDStmt:                    q.countExistedNameSlaByWorkspaceIDStmt,
		countMinBeLongToAdvanceSettingStmt:                      q.countMinBeLongToAdvanceSettingStmt,
		countMinSameParticipantsStmt:                            q.countMinSameParticipantsStmt,
		countMyTicketsCreatedByMeStmt:                           q.countMyTicketsCreatedByMeStmt,
		countMyTicketsOnHoldCreatedByMeStmt:                     q.countMyTicketsOnHoldCreatedByMeStmt,
		countMyTicketsOnHoldSendToMeStmt:                        q.countMyTicketsOnHoldSendToMeStmt,
		countMyTicketsSendToMeStmt:                              q.countMyTicketsSendToMeStmt,
		countNodesByWorkflowIDStmt:                              q.countNodesByWorkflowIDStmt,
		countParticipantExistedByWorkspaceIDAndIDStmt:           q.countParticipantExistedByWorkspaceIDAndIDStmt,
		countParticipantMemberByWorkspaceIDAndParticipantIDStmt: q.countParticipantMemberByWorkspaceIDAndParticipantIDStmt,
		countParticipantMembersByUserIDIDAndParticipantIDsStmt:  q.countParticipantMembersByUserIDIDAndParticipantIDsStmt,
		countPrefixesStmt:                                       q.countPrefixesStmt,
		countRefMyTicketsStmt:                                   q.countRefMyTicketsStmt,
		countShiftsStmt:                                         q.countShiftsStmt,
		countSlasStmt:                                           q.countSlasStmt,
		countTicketAdvanceSettingParticipantsByTypeStmt:         q.countTicketAdvanceSettingParticipantsByTypeStmt,
		countTotalNodeOnMyTicketStmt:                            q.countTotalNodeOnMyTicketStmt,
		countUnfollowStmt:                                       q.countUnfollowStmt,
		countWaitingOnHoldRequestsStmt:                          q.countWaitingOnHoldRequestsStmt,
		countWorkflowsStmt:                                      q.countWorkflowsStmt,
		createAdditionalRequestStmt:                             q.createAdditionalRequestStmt,
		createAdvanceSettingStmt:                                q.createAdvanceSettingStmt,
		createAdvanceSettingParticipantStmt:                     q.createAdvanceSettingParticipantStmt,
		createCurrencyStmt:                                      q.createCurrencyStmt,
		createDateOffStmt:                                       q.createDateOffStmt,
		createEdgeStmt:                                          q.createEdgeStmt,
		createIfNotExistParticipantStmt:                         q.createIfNotExistParticipantStmt,
		createIfNotExistParticipantMemberStmt:                   q.createIfNotExistParticipantMemberStmt,
		createMyTicketStmt:                                      q.createMyTicketStmt,
		createNodeStmt:                                          q.createNodeStmt,
		createNodeParticipantStmt:                               q.createNodeParticipantStmt,
		createOnHoldRequestStmt:                                 q.createOnHoldRequestStmt,
		createOnHoldRequestApproverStmt:                         q.createOnHoldRequestApproverStmt,
		createParticipantStmt:                                   q.createParticipantStmt,
		createPrefixStmt:                                        q.createPrefixStmt,
		createShiftStmt:                                         q.createShiftStmt,
		createSlaStmt:                                           q.createSlaStmt,
		createTagStmt:                                           q.createTagStmt,
		createTagWorkflowGroupsStmt:                             q.createTagWorkflowGroupsStmt,
		createTagWorkflowsStmt:                                  q.createTagWorkflowsStmt,
		createTaskStmt:                                          q.createTaskStmt,
		createTaskParticipantStmt:                               q.createTaskParticipantStmt,
		createTicketStmt:                                        q.createTicketStmt,
		createTicketActivityStmt:                                q.createTicketActivityStmt,
		createTicketAdvanceSettingParticipantStmt:               q.createTicketAdvanceSettingParticipantStmt,
		createTicketEdgeStmt:                                    q.createTicketEdgeStmt,
		createTicketFieldStmt:                                   q.createTicketFieldStmt,
		createTicketFlowchartHistoryStmt:                        q.createTicketFlowchartHistoryStmt,
		createTicketNodeStmt:                                    q.createTicketNodeStmt,
		createTicketNodeParticipantStmt:                         q.createTicketNodeParticipantStmt,
		createTicketNotificationStmt:                            q.createTicketNotificationStmt,
		createTicketNotificationParticipantStmt:                 q.createTicketNotificationParticipantStmt,
		createTicketTagStmt:                                     q.createTicketTagStmt,
		createUnfollowStmt:                                      q.createUnfollowStmt,
		createWeeklySettingStmt:                                 q.createWeeklySettingStmt,
		createWorkflowStmt:                                      q.createWorkflowStmt,
		createWorkflowFormFieldStmt:                             q.createWorkflowFormFieldStmt,
		createWorkflowGroupStmt:                                 q.createWorkflowGroupStmt,
		deleteAdvanceSettingParticipantsStmt:                    q.deleteAdvanceSettingParticipantsStmt,
		deleteAllTagWorkflowGroupsStmt:                          q.deleteAllTagWorkflowGroupsStmt,
		deleteAllTagWorkflowsStmt:                               q.deleteAllTagWorkflowsStmt,
		deleteAllWorkflowEdgesStmt:                              q.deleteAllWorkflowEdgesStmt,
		deleteAllWorkflowNodesStmt:                              q.deleteAllWorkflowNodesStmt,
		deleteCurrencyStmt:                                      q.deleteCurrencyStmt,
		deleteDateOffsByWorkspaceIDAndShiftIDStmt:               q.deleteDateOffsByWorkspaceIDAndShiftIDStmt,
		deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffIDStmt:   q.deleteDateOffsByWorkspaceIDAndShiftIDAndDateOffIDStmt,
		deleteEdgesStmt:                                         q.deleteEdgesStmt,
		deleteNodeStmt:                                          q.deleteNodeStmt,
		deleteNodeEdgesStmt:                                     q.deleteNodeEdgesStmt,
		deleteNodeParticipantStmt:                               q.deleteNodeParticipantStmt,
		deleteNodeParticipantByNodeIDStmt:                       q.deleteNodeParticipantByNodeIDStmt,
		deleteOtherWorkflowFormFieldsStmt:                       q.deleteOtherWorkflowFormFieldsStmt,
		deleteParticipantByWorkspaceIDAndIDStmt:                 q.deleteParticipantByWorkspaceIDAndIDStmt,
		deleteParticipantMemberStmt:                             q.deleteParticipantMemberStmt,
		deleteParticipantMembersStmt:                            q.deleteParticipantMembersStmt,
		deleteParticipantMembersByParticipantIDStmt:             q.deleteParticipantMembersByParticipantIDStmt,
		deletePrefixByWorkspaceIDAndIDStmt:                      q.deletePrefixByWorkspaceIDAndIDStmt,
		deleteRangeStmt:                                         q.deleteRangeStmt,
		deleteShiftByWorkspaceIDAndIDStmt:                       q.deleteShiftByWorkspaceIDAndIDStmt,
		deleteTagStmt:                                           q.deleteTagStmt,
		deleteTagWorkflowGroupsStmt:                             q.deleteTagWorkflowGroupsStmt,
		deleteTagWorkflowsStmt:                                  q.deleteTagWorkflowsStmt,
		deleteTaskStmt:                                          q.deleteTaskStmt,
		deleteTaskParticipantStmt:                               q.deleteTaskParticipantStmt,
		deleteTaskParticipantByTaskIDStmt:                       q.deleteTaskParticipantByTaskIDStmt,
		deleteTicketNotificaionParticipantsStmt:                 q.deleteTicketNotificaionParticipantsStmt,
		deleteTicketNotificationStmt:                            q.deleteTicketNotificationStmt,
		deleteUnfollowStmt:                                      q.deleteUnfollowStmt,
		deleteWeeklySettingsByWorkspaceIDAndShiftIDStmt:         q.deleteWeeklySettingsByWorkspaceIDAndShiftIDStmt,
		deleteWorkflowByIDStmt:                                  q.deleteWorkflowByIDStmt,
		deleteWorkflowFormFieldStmt:                             q.deleteWorkflowFormFieldStmt,
		deleteWorkflowFormFieldsStmt:                            q.deleteWorkflowFormFieldsStmt,
		deleteWorkflowFormFieldsByWorkflowIdStmt:                q.deleteWorkflowFormFieldsByWorkflowIdStmt,
		getAdditionalRequestByIDStmt:                            q.getAdditionalRequestByIDStmt,
		getAdditionalRequestsStmt:                               q.getAdditionalRequestsStmt,
		getAdvanceSettingStmt:                                   q.getAdvanceSettingStmt,
		getAdvanceSettingParticipantsStmt:                       q.getAdvanceSettingParticipantsStmt,
		getAllMyTicketsCreatedByMeStmt:                          q.getAllMyTicketsCreatedByMeStmt,
		getAllMyTicketsOnHoldCreatedByMeStmt:                    q.getAllMyTicketsOnHoldCreatedByMeStmt,
		getAllMyTicketsOnHoldSendToMeStmt:                       q.getAllMyTicketsOnHoldSendToMeStmt,
		getAllMyTicketsSendToMeStmt:                             q.getAllMyTicketsSendToMeStmt,
		getAllPrefixStmt:                                        q.getAllPrefixStmt,
		getAllPrefixPagingNextStmt:                              q.getAllPrefixPagingNextStmt,
		getAllPrefixPagingPrevStmt:                              q.getAllPrefixPagingPrevStmt,
		getAllRefMyTicketsStmt:                                  q.getAllRefMyTicketsStmt,
		getAllShiftsStmt:                                        q.getAllShiftsStmt,
		getAllShiftsPagingNextStmt:                              q.getAllShiftsPagingNextStmt,
		getAllShiftsPagingPrevStmt:                              q.getAllShiftsPagingPrevStmt,
		getAllSlasStmt:                                          q.getAllSlasStmt,
		getAllSlasPagingStmt:                                    q.getAllSlasPagingStmt,
		getAllSlasPagingNextStmt:                                q.getAllSlasPagingNextStmt,
		getAllSlasPagingPrevStmt:                                q.getAllSlasPagingPrevStmt,
		getAllWorkflowGroupsStmt:                                q.getAllWorkflowGroupsStmt,
		getAllWorkflowsStmt:                                     q.getAllWorkflowsStmt,
		getAllWorkflowsPagingNextStmt:                           q.getAllWorkflowsPagingNextStmt,
		getAllWorkflowsPagingPrevStmt:                           q.getAllWorkflowsPagingPrevStmt,
		getChildWorkflowGroupsStmt:                              q.getChildWorkflowGroupsStmt,
		getCurrencyStmt:                                         q.getCurrencyStmt,
		getDateOffsByRangeStmt:                                  q.getDateOffsByRangeStmt,
		getDateOffsByWorkspaceIDAndShiftIDStmt:                  q.getDateOffsByWorkspaceIDAndShiftIDStmt,
		getDefaultPrefixStmt:                                    q.getDefaultPrefixStmt,
		getDefaultPrefixByFilterStmt:                            q.getDefaultPrefixByFilterStmt,
		getDefaultShiftStmt:                                     q.getDefaultShiftStmt,
		getDefaultShiftByFilterStmt:                             q.getDefaultShiftByFilterStmt,
		getDefaultSlaStmt:                                       q.getDefaultSlaStmt,
		getDefaultSlaByFilterStmt:                               q.getDefaultSlaByFilterStmt,
		getEdgeByIDStmt:                                         q.getEdgeByIDStmt,
		getFullPathOfWorkflowGroupStmt:                          q.getFullPathOfWorkflowGroupStmt,
		getLatestRecentActivityOfTicketStmt:                     q.getLatestRecentActivityOfTicketStmt,
		getLatestRecentActivityOfTicketsStmt:                    q.getLatestRecentActivityOfTicketsStmt,
		getMyTicketByCurrentNodeIDStmt:                          q.getMyTicketByCurrentNodeIDStmt,
		getNextWorkflowGroupsByKeywordStmt:                      q.getNextWorkflowGroupsByKeywordStmt,
		getNodeByIDStmt:                                         q.getNodeByIDStmt,
		getOnHoldRequestByIDStmt:                                q.getOnHoldRequestByIDStmt,
		getParticipantByIDStmt:                                  q.getParticipantByIDStmt,
		getParticipantMembersByWorkspaceIDAndParticipantIDStmt:  q.getParticipantMembersByWorkspaceIDAndParticipantIDStmt,
		getParticipantMembersByWorkspaceIDAndParticipantIDsStmt: q.getParticipantMembersByWorkspaceIDAndParticipantIDsStmt,
		getPrefixByIDStmt:                                       q.getPrefixByIDStmt,
		getPreviousWorkflowGroupsByKeywordStmt:                  q.getPreviousWorkflowGroupsByKeywordStmt,
		getRangeWorkflowGroupsStmt:                              q.getRangeWorkflowGroupsStmt,
		getRootWorkflowGroupStmt:                                q.getRootWorkflowGroupStmt,
		getRootWorkflowGroupsForUpdateStmt:                      q.getRootWorkflowGroupsForUpdateStmt,
		getShiftByIDStmt:                                        q.getShiftByIDStmt,
		getSlaByIDStmt:                                          q.getSlaByIDStmt,
		getSlasByShiftIDStmt:                                    q.getSlasByShiftIDStmt,
		getStartNodeStmt:                                        q.getStartNodeStmt,
		getStartNodeOfTicketStmt:                                q.getStartNodeOfTicketStmt,
		getTagStmt:                                              q.getTagStmt,
		getTagSearchByNameStmt:                                  q.getTagSearchByNameStmt,
		getTagSearchByNameWithPublishedStmt:                     q.getTagSearchByNameWithPublishedStmt,
		getTagWithPublishedStmt:                                 q.getTagWithPublishedStmt,
		getTagWorkflowGroupsStmt:                                q.getTagWorkflowGroupsStmt,
		getTagWorkflowsStmt:                                     q.getTagWorkflowsStmt,
		getTagsByWorkflowIDStmt:                                 q.getTagsByWorkflowIDStmt,
		getTagsSortByNameStmt:                                   q.getTagsSortByNameStmt,
		getTaskByIDStmt:                                         q.getTaskByIDStmt,
		getTicketByIDStmt:                                       q.getTicketByIDStmt,
		getTicketEdgesByCurrentNodeIDStmt:                       q.getTicketEdgesByCurrentNodeIDStmt,
		getTicketFieldStmt:                                      q.getTicketFieldStmt,
		getTicketNodeByNodeIDStmt:                               q.getTicketNodeByNodeIDStmt,
		getTicketNodeParticipantByRoleAndTypeStmt:               q.getTicketNodeParticipantByRoleAndTypeStmt,
		getTicketNotificationStmt:                               q.getTicketNotificationStmt,
		getTicketNotificationByIDStmt:                           q.getTicketNotificationByIDStmt,
		getTicketNotificationParticipantsStmt:                   q.getTicketNotificationParticipantsStmt,
		getTicketTagsByTicketIDStmt:                             q.getTicketTagsByTicketIDStmt,
		getTicketTagsByTicketIDsStmt:                            q.getTicketTagsByTicketIDsStmt,
		getWeeklySettingsByWorkspaceIDAndShiftIDStmt:            q.getWeeklySettingsByWorkspaceIDAndShiftIDStmt,
		getWorkflowByIDStmt:                                     q.getWorkflowByIDStmt,
		getWorkflowFormFieldStmt:                                q.getWorkflowFormFieldStmt,
		getWorkflowGroupStmt:                                    q.getWorkflowGroupStmt,
		getWorkflowGroupsStmt:                                   q.getWorkflowGroupsStmt,
		getWorkflowGroupsByKeywordStmt:                          q.getWorkflowGroupsByKeywordStmt,
		listCurrenciesStmt:                                      q.listCurrenciesStmt,
		listCurrentTicketNodesStmt:                              q.listCurrentTicketNodesStmt,
		listEdgesByWorkflowIDStmt:                               q.listEdgesByWorkflowIDStmt,
		listFirstClassWorkflowFormFieldsByWorkflowIdStmt:        q.listFirstClassWorkflowFormFieldsByWorkflowIdStmt,
		listNodeParticipantsByNodeIDStmt:                        q.listNodeParticipantsByNodeIDStmt,
		listNodesByWorkflowIDStmt:                               q.listNodesByWorkflowIDStmt,
		listOnHoldRequestApproversStmt:                          q.listOnHoldRequestApproversStmt,
		listParticipantsByEightIDsStmt:                          q.listParticipantsByEightIDsStmt,
		listParticipantsByFiveIDsStmt:                           q.listParticipantsByFiveIDsStmt,
		listParticipantsByFourIDsStmt:                           q.listParticipantsByFourIDsStmt,
		listParticipantsByNineIDsStmt:                           q.listParticipantsByNineIDsStmt,
		listParticipantsBySevenIDsStmt:                          q.listParticipantsBySevenIDsStmt,
		listParticipantsBySixIDsStmt:                            q.listParticipantsBySixIDsStmt,
		listParticipantsByTenIDsStmt:                            q.listParticipantsByTenIDsStmt,
		listParticipantsByThreeIDsStmt:                          q.listParticipantsByThreeIDsStmt,
		listParticipantsByTwoIDsStmt:                            q.listParticipantsByTwoIDsStmt,
		listPreviewNodeAdminsStmt:                               q.listPreviewNodeAdminsStmt,
		listPreviewNodeAssigneesStmt:                            q.listPreviewNodeAssigneesStmt,
		listProcessedTicketEdgesStmt:                            q.listProcessedTicketEdgesStmt,
		listProcessedTicketNodesStmt:                            q.listProcessedTicketNodesStmt,
		listRefTicketsStmt:                                      q.listRefTicketsStmt,
		listTaskParticipantsByEightTaskIDsStmt:                  q.listTaskParticipantsByEightTaskIDsStmt,
		listTaskParticipantsByFiveTaskIDsStmt:                   q.listTaskParticipantsByFiveTaskIDsStmt,
		listTaskParticipantsByFourTaskIDsStmt:                   q.listTaskParticipantsByFourTaskIDsStmt,
		listTaskParticipantsByNineTaskIDsStmt:                   q.listTaskParticipantsByNineTaskIDsStmt,
		listTaskParticipantsBySevenTaskIDsStmt:                  q.listTaskParticipantsBySevenTaskIDsStmt,
		listTaskParticipantsBySixTaskIDsStmt:                    q.listTaskParticipantsBySixTaskIDsStmt,
		listTaskParticipantsByTaskIDStmt:                        q.listTaskParticipantsByTaskIDStmt,
		listTaskParticipantsByTenTaskIDsStmt:                    q.listTaskParticipantsByTenTaskIDsStmt,
		listTaskParticipantsByThreeTaskIDsStmt:                  q.listTaskParticipantsByThreeTaskIDsStmt,
		listTaskParticipantsByTwoTaskIDsStmt:                    q.listTaskParticipantsByTwoTaskIDsStmt,
		listTasksByNodeIDStmt:                                   q.listTasksByNodeIDStmt,
		listTicketActivitiesStmt:                                q.listTicketActivitiesStmt,
		listTicketAdvanceSettingParticipantsStmt:                q.listTicketAdvanceSettingParticipantsStmt,
		listTicketAdvanceSettingParticipantsByRefIDStmt:         q.listTicketAdvanceSettingParticipantsByRefIDStmt,
		listTicketAdvanceSettingParticipantsByTypeStmt:          q.listTicketAdvanceSettingParticipantsByTypeStmt,
		listTicketEdgesStmt:                                     q.listTicketEdgesStmt,
		listTicketFieldsStmt:                                    q.listTicketFieldsStmt,
		listTicketFlowchartHistoriesStmt:                        q.listTicketFlowchartHistoriesStmt,
		listTicketNodeParticipantsByNodeIDStmt:                  q.listTicketNodeParticipantsByNodeIDStmt,
		listTicketNodesStmt:                                     q.listTicketNodesStmt,
		listUnfollowByUserIDStmt:                                q.listUnfollowByUserIDStmt,
		listUserTicketRolesStmt:                                 q.listUserTicketRolesStmt,
		listWaitingOnHoldRequestsStmt:                           q.listWaitingOnHoldRequestsStmt,
		listWorkflowFormFieldsByWorkflowIdStmt:                  q.listWorkflowFormFieldsByWorkflowIdStmt,
		lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt: q.lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt,
		lockPrefixByWorkspaceIDForUpdateStmt:                             q.lockPrefixByWorkspaceIDForUpdateStmt,
		lockShiftsByWorkspaceIDForUpdateStmt:                             q.lockShiftsByWorkspaceIDForUpdateStmt,
		lockSlasByWorkspaceIDForUpdateStmt:                               q.lockSlasByWorkspaceIDForUpdateStmt,
		removeTicketNodeParticipantStmt:                                  q.removeTicketNodeParticipantStmt,
		resetStatusAndDeadlineTicketNodesByTicketIDStmt:                  q.resetStatusAndDeadlineTicketNodesByTicketIDStmt,
		responseTicketNodeStmt:                                           q.responseTicketNodeStmt,
		reviewTicketStmt:                                                 q.reviewTicketStmt,
		updateAdditionalRequestStmt:                                      q.updateAdditionalRequestStmt,
		updateAdvanceSettingStmt:                                         q.updateAdvanceSettingStmt,
		updateAssigneeOfCurrentNodeOnMyTicketStmt:                        q.updateAssigneeOfCurrentNodeOnMyTicketStmt,
		updateBowersBeforeAppendStmt:                                     q.updateBowersBeforeAppendStmt,
		updateCurrencyStmt:                                               q.updateCurrencyStmt,
		updateIsDefaultPrefixByWorkspaceIDAndIDStmt:                      q.updateIsDefaultPrefixByWorkspaceIDAndIDStmt,
		updateIsDefaultShiftByWorkspaceIDAndIDStmt:                       q.updateIsDefaultShiftByWorkspaceIDAndIDStmt,
		updateNodeStmt:                                                   q.updateNodeStmt,
		updateOldDefaultShiftStmt:                                        q.updateOldDefaultShiftStmt,
		updateOnHoldRequestStatusStmt:                                    q.updateOnHoldRequestStatusStmt,
		updateParticipantByWorkspaceIDAndIDStmt:                          q.updateParticipantByWorkspaceIDAndIDStmt,
		updatePrefixByWorkspaceIDAndIDStmt:                               q.updatePrefixByWorkspaceIDAndIDStmt,
		updatePrefixIDOfWorkflowsStmt:                                    q.updatePrefixIDOfWorkflowsStmt,
		updateShiftByWorkspaceIDAndIDStmt:                                q.updateShiftByWorkspaceIDAndIDStmt,
		updateSlaIDOfNodesStmt:                                           q.updateSlaIDOfNodesStmt,
		updateStatusOfCurrentNodeOnMyTicketStmt:                          q.updateStatusOfCurrentNodeOnMyTicketStmt,
		updateStatusOfLatestRecentNodeOnMyTicketStmt:                     q.updateStatusOfLatestRecentNodeOnMyTicketStmt,
		updateStatusPrefixByWorkspaceIDAndIDStmt:                         q.updateStatusPrefixByWorkspaceIDAndIDStmt,
		updateStatusShiftByWorkspaceIDAndIDStmt:                          q.updateStatusShiftByWorkspaceIDAndIDStmt,
		updateStatusTicketStmt:                                           q.updateStatusTicketStmt,
		updateStatusTicketNodeStmt:                                       q.updateStatusTicketNodeStmt,
		updateTagStmt:                                                    q.updateTagStmt,
		updateTicketNodeAssigneeStmt:                                     q.updateTicketNodeAssigneeStmt,
		updateTicketNodeCancelOnHoldStmt:                                 q.updateTicketNodeCancelOnHoldStmt,
		updateTicketNodeToOnHoldStmt:                                     q.updateTicketNodeToOnHoldStmt,
		updateTicketNotificationStmt:                                     q.updateTicketNotificationStmt,
		updateTicketStatusStmt:                                           q.updateTicketStatusStmt,
		updateWorkflowByWorkspaceIDAndIDStmt:                             q.updateWorkflowByWorkspaceIDAndIDStmt,
		updateWorkflowFormFieldStmt:                                      q.updateWorkflowFormFieldStmt,
		updateWorkflowGroupStmt:                                          q.updateWorkflowGroupStmt,
		updateWorkflowPublishedByWorkspaceIDAndIDStmt:                    q.updateWorkflowPublishedByWorkspaceIDAndIDStmt,
		upsertTicketFieldStmt:                                            q.upsertTicketFieldStmt,
		upsertWorkflowFormFieldStmt:                                      q.upsertWorkflowFormFieldStmt,
	}
}
