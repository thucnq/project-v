// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_additional_request.sql

package sqlc

import (
	"context"
)

const countAdditionalRequestsByStatus = `-- name: CountAdditionalRequestsByStatus :one
SELECT COUNT(*)
FROM additional_requests
WHERE workspace_id = ?
  AND ticket_id = ?
  AND node_id = ?
  AND status = ?
`

type CountAdditionalRequestsByStatusParams struct {
	WorkspaceID string
	TicketID    int64
	NodeID      int64
	Status      int8
}

func (q *Queries) CountAdditionalRequestsByStatus(ctx context.Context, arg CountAdditionalRequestsByStatusParams) (int64, error) {
	row := q.queryRow(ctx, q.countAdditionalRequestsByStatusStmt, countAdditionalRequestsByStatus,
		arg.WorkspaceID,
		arg.TicketID,
		arg.NodeID,
		arg.Status,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAdditionalRequestByID = `-- name: GetAdditionalRequestByID :one
SELECT workspace_id, ticket_id, node_id, id, requester_id, target_id, content_need_add, response_to_requester, attached_files, status, created_at, updated_at
FROM additional_requests
WHERE workspace_id = ?
  AND ticket_id = ?
  AND node_id = ?
  AND id = ?
`

type GetAdditionalRequestByIDParams struct {
	WorkspaceID string
	TicketID    int64
	NodeID      int64
	ID          int64
}

func (q *Queries) GetAdditionalRequestByID(ctx context.Context, arg GetAdditionalRequestByIDParams) (AdditionalRequest, error) {
	row := q.queryRow(ctx, q.getAdditionalRequestByIDStmt, getAdditionalRequestByID,
		arg.WorkspaceID,
		arg.TicketID,
		arg.NodeID,
		arg.ID,
	)
	var i AdditionalRequest
	err := row.Scan(
		&i.WorkspaceID,
		&i.TicketID,
		&i.NodeID,
		&i.ID,
		&i.RequesterID,
		&i.TargetID,
		&i.ContentNeedAdd,
		&i.ResponseToRequester,
		&i.AttachedFiles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdditionalRequests = `-- name: GetAdditionalRequests :many
SELECT workspace_id, ticket_id, node_id, id, requester_id, target_id, content_need_add, response_to_requester, attached_files, status, created_at, updated_at
FROM additional_requests
WHERE workspace_id = ?
  AND ticket_id = ?
  AND node_id = ?
`

type GetAdditionalRequestsParams struct {
	WorkspaceID string
	TicketID    int64
	NodeID      int64
}

func (q *Queries) GetAdditionalRequests(ctx context.Context, arg GetAdditionalRequestsParams) ([]AdditionalRequest, error) {
	rows, err := q.query(ctx, q.getAdditionalRequestsStmt, getAdditionalRequests, arg.WorkspaceID, arg.TicketID, arg.NodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdditionalRequest
	for rows.Next() {
		var i AdditionalRequest
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.NodeID,
			&i.ID,
			&i.RequesterID,
			&i.TargetID,
			&i.ContentNeedAdd,
			&i.ResponseToRequester,
			&i.AttachedFiles,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
