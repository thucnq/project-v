// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_advance_setting_participant.sql

package sqlc

import (
	"context"
)

const countMinBeLongToAdvanceSetting = `-- name: CountMinBeLongToAdvanceSetting :one
SELECT COUNT(*)
FROM ticket_advance_setting_participants tasp
         INNER JOIN participant_members pm ON tasp.participant_id = pm.participant_id
WHERE tasp.workspace_id = ? AND tasp.ticket_id = ? AND pm.user_id = ?
LIMIT 1
`

type CountMinBeLongToAdvanceSettingParams struct {
	WorkspaceID string
	TicketID    int64
	UserID      int64
}

func (q *Queries) CountMinBeLongToAdvanceSetting(ctx context.Context, arg CountMinBeLongToAdvanceSettingParams) (int64, error) {
	row := q.queryRow(ctx, q.countMinBeLongToAdvanceSettingStmt, countMinBeLongToAdvanceSetting, arg.WorkspaceID, arg.TicketID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
