// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_currency.sql

package sqlc

import (
	"context"
)

const getCurrency = `-- name: GetCurrency :one
SELECT workspace_id, id, name, code, created_at, updated_at
FROM currencies
WHERE workspace_id=? AND id=? LIMIT 1
`

type GetCurrencyParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) GetCurrency(ctx context.Context, arg GetCurrencyParams) (Currency, error) {
	row := q.queryRow(ctx, q.getCurrencyStmt, getCurrency, arg.WorkspaceID, arg.ID)
	var i Currency
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Code,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCurrencies = `-- name: ListCurrencies :many
SELECT workspace_id, id, name, code, created_at, updated_at
FROM currencies
WHERE workspace_id=? OR  workspace_id=''
`

func (q *Queries) ListCurrencies(ctx context.Context, workspaceID string) ([]Currency, error) {
	rows, err := q.query(ctx, q.listCurrenciesStmt, listCurrencies, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Currency
	for rows.Next() {
		var i Currency
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Code,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
