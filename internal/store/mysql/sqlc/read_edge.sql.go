// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_edge.sql

package sqlc

import (
	"context"
)

const getEdgeByID = `-- name: GetEdgeByID :one
SELECT workspace_id, workflow_id, current_node_id, next_node_id, created_at, updated_at
FROM edges
WHERE workspace_id = ? AND workflow_id = ? AND current_node_id = ? and next_node_id
`

type GetEdgeByIDParams struct {
	WorkspaceID   string
	WorkflowID    int64
	CurrentNodeID int64
}

func (q *Queries) GetEdgeByID(ctx context.Context, arg GetEdgeByIDParams) (Edge, error) {
	row := q.queryRow(ctx, q.getEdgeByIDStmt, getEdgeByID, arg.WorkspaceID, arg.WorkflowID, arg.CurrentNodeID)
	var i Edge
	err := row.Scan(
		&i.WorkspaceID,
		&i.WorkflowID,
		&i.CurrentNodeID,
		&i.NextNodeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEdgesByWorkflowID = `-- name: ListEdgesByWorkflowID :many
SELECT workspace_id, workflow_id, current_node_id, next_node_id, created_at, updated_at
FROM edges
WHERE workspace_id = ? AND workflow_id = ?
`

type ListEdgesByWorkflowIDParams struct {
	WorkspaceID string
	WorkflowID  int64
}

func (q *Queries) ListEdgesByWorkflowID(ctx context.Context, arg ListEdgesByWorkflowIDParams) ([]Edge, error) {
	rows, err := q.query(ctx, q.listEdgesByWorkflowIDStmt, listEdgesByWorkflowID, arg.WorkspaceID, arg.WorkflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Edge
	for rows.Next() {
		var i Edge
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowID,
			&i.CurrentNodeID,
			&i.NextNodeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
