// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_my_ticket_created_by_me.sql

package sqlc

import (
	"context"
	"strings"
	"time"
)

const countMyTicketsCreatedByMe = `-- name: CountMyTicketsCreatedByMe :one
SELECT COUNT(*)
FROM my_tickets
WHERE workspace_id = ?
  AND created_by IN (/*SLICE:creator_ids*/?)
  AND status IN (/*SLICE:statuses*/?)
  AND (? = false OR node_deadline_at <= NOW())
  AND ((? = false) OR (created_at BETWEEN ? AND ?))
  AND ((? = '') OR (title LIKE ?))
  AND ((? = '') OR (code LIKE ?))
`

type CountMyTicketsCreatedByMeParams struct {
	WorkspaceID   string
	CreatorIds    []int64
	Statuses      []int8
	Column4       interface{}
	Column5       interface{}
	FromCreatedAt time.Time
	ToCreatedAt   time.Time
	Column8       interface{}
	Title         string
	Column10      interface{}
	Code          string
}

func (q *Queries) CountMyTicketsCreatedByMe(ctx context.Context, arg CountMyTicketsCreatedByMeParams) (int64, error) {
	query := countMyTicketsCreatedByMe
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.CreatorIds) > 0 {
		for _, v := range arg.CreatorIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:creator_ids*/?", strings.Repeat(",?", len(arg.CreatorIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:creator_ids*/?", "NULL", 1)
	}
	if len(arg.Statuses) > 0 {
		for _, v := range arg.Statuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:statuses*/?", strings.Repeat(",?", len(arg.Statuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Column4)
	queryParams = append(queryParams, arg.Column5)
	queryParams = append(queryParams, arg.FromCreatedAt)
	queryParams = append(queryParams, arg.ToCreatedAt)
	queryParams = append(queryParams, arg.Column8)
	queryParams = append(queryParams, arg.Title)
	queryParams = append(queryParams, arg.Column10)
	queryParams = append(queryParams, arg.Code)
	row := q.queryRow(ctx, nil, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllMyTicketsCreatedByMe = `-- name: GetAllMyTicketsCreatedByMe :many
SELECT workspace_id, workflow_id, id, code, title, priority, is_private, status, current_node_id, current_node_name, current_node_status, current_node_type, node_deadline_at, assignee_id, department_id, workflow, tags, ref_ticket_ids, rating_point, review, latest_recent_activity_user_id, latest_recent_activity_at, created_by, updated_by, created_at, updated_at
FROM my_tickets
WHERE workspace_id = ?
  AND created_by IN (/*SLICE:creator_ids*/?)
  AND status IN (/*SLICE:statuses*/?)
  AND (? = false OR node_deadline_at <= NOW())
  AND ((? = false) OR (created_at BETWEEN ? AND ?))
  AND ((? = '') OR (title LIKE ?))
  AND ((? = '') OR (code LIKE ?))
`

type GetAllMyTicketsCreatedByMeParams struct {
	WorkspaceID   string
	CreatorIds    []int64
	Statuses      []int8
	Column4       interface{}
	Column5       interface{}
	FromCreatedAt time.Time
	ToCreatedAt   time.Time
	Column8       interface{}
	Title         string
	Column10      interface{}
	Code          string
}

func (q *Queries) GetAllMyTicketsCreatedByMe(ctx context.Context, arg GetAllMyTicketsCreatedByMeParams) ([]MyTicket, error) {
	query := getAllMyTicketsCreatedByMe
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.CreatorIds) > 0 {
		for _, v := range arg.CreatorIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:creator_ids*/?", strings.Repeat(",?", len(arg.CreatorIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:creator_ids*/?", "NULL", 1)
	}
	if len(arg.Statuses) > 0 {
		for _, v := range arg.Statuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:statuses*/?", strings.Repeat(",?", len(arg.Statuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Column4)
	queryParams = append(queryParams, arg.Column5)
	queryParams = append(queryParams, arg.FromCreatedAt)
	queryParams = append(queryParams, arg.ToCreatedAt)
	queryParams = append(queryParams, arg.Column8)
	queryParams = append(queryParams, arg.Title)
	queryParams = append(queryParams, arg.Column10)
	queryParams = append(queryParams, arg.Code)
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MyTicket
	for rows.Next() {
		var i MyTicket
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowID,
			&i.ID,
			&i.Code,
			&i.Title,
			&i.Priority,
			&i.IsPrivate,
			&i.Status,
			&i.CurrentNodeID,
			&i.CurrentNodeName,
			&i.CurrentNodeStatus,
			&i.CurrentNodeType,
			&i.NodeDeadlineAt,
			&i.AssigneeID,
			&i.DepartmentID,
			&i.Workflow,
			&i.Tags,
			&i.RefTicketIds,
			&i.RatingPoint,
			&i.Review,
			&i.LatestRecentActivityUserID,
			&i.LatestRecentActivityAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
