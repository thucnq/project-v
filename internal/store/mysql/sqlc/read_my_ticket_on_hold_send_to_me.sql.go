// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_my_ticket_on_hold_send_to_me.sql

package sqlc

import (
	"context"
	"strings"
)

const countMyTicketsOnHoldSendToMe = `-- name: CountMyTicketsOnHoldSendToMe :one
SELECT COUNT(DISTINCT mt.id)
FROM my_tickets AS mt
         JOIN on_hold_requests AS ohr
              ON mt.workspace_id = ohr.workspace_id
                  AND mt.id = ohr.ticket_id
                  AND mt.current_node_id = ohr.node_id
                  AND mt.status IN (/*SLICE:ticket_statuses*/?)
                  AND ohr.status IN (/*SLICE:ohr_statuses*/?)
         LEFT JOIN ticket_advance_setting_participants AS tasp
                   ON ohr.workspace_id = tasp.workspace_id
                       AND ohr.ticket_id = tasp.ticket_id
         LEFT JOIN participant_members AS pm
                   ON tasp.participant_id COLLATE utf8mb4_unicode_ci = pm.participant_id COLLATE utf8mb4_unicode_ci
                       AND pm.user_id = ?
WHERE mt.workspace_id = ?
`

type CountMyTicketsOnHoldSendToMeParams struct {
	TicketStatuses []int8
	OhrStatuses    []int8
	UserID         int64
	WorkspaceID    string
}

func (q *Queries) CountMyTicketsOnHoldSendToMe(ctx context.Context, arg CountMyTicketsOnHoldSendToMeParams) (int64, error) {
	query := countMyTicketsOnHoldSendToMe
	var queryParams []interface{}
	if len(arg.TicketStatuses) > 0 {
		for _, v := range arg.TicketStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ticket_statuses*/?", strings.Repeat(",?", len(arg.TicketStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ticket_statuses*/?", "NULL", 1)
	}
	if len(arg.OhrStatuses) > 0 {
		for _, v := range arg.OhrStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ohr_statuses*/?", strings.Repeat(",?", len(arg.OhrStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ohr_statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.UserID)
	queryParams = append(queryParams, arg.WorkspaceID)
	row := q.queryRow(ctx, nil, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllMyTicketsOnHoldSendToMe = `-- name: GetAllMyTicketsOnHoldSendToMe :many
SELECT DISTINCT mt.workspace_id, mt.workflow_id, mt.id, mt.code, mt.title, mt.priority, mt.is_private, mt.status, mt.current_node_id, mt.current_node_name, mt.current_node_status, mt.current_node_type, mt.node_deadline_at, mt.assignee_id, mt.department_id, mt.workflow, mt.tags, mt.ref_ticket_ids, mt.rating_point, mt.review, mt.latest_recent_activity_user_id, mt.latest_recent_activity_at, mt.created_by, mt.updated_by, mt.created_at, mt.updated_at
FROM my_tickets AS mt
         JOIN on_hold_requests AS ohr
              ON mt.workspace_id = ohr.workspace_id
                  AND mt.id = ohr.ticket_id
                  AND mt.current_node_id = ohr.node_id
                  AND mt.status IN (/*SLICE:ticket_statuses*/?)
                  AND ohr.status IN (/*SLICE:ohr_statuses*/?)
         LEFT JOIN ticket_advance_setting_participants AS tasp
                   ON ohr.workspace_id = tasp.workspace_id
                       AND ohr.ticket_id = tasp.ticket_id
         LEFT JOIN participant_members AS pm
                   ON tasp.participant_id COLLATE utf8mb4_unicode_ci = pm.participant_id COLLATE utf8mb4_unicode_ci
                          AND pm.user_id = ?
WHERE mt.workspace_id = ?
`

type GetAllMyTicketsOnHoldSendToMeParams struct {
	TicketStatuses []int8
	OhrStatuses    []int8
	UserID         int64
	WorkspaceID    string
}

func (q *Queries) GetAllMyTicketsOnHoldSendToMe(ctx context.Context, arg GetAllMyTicketsOnHoldSendToMeParams) ([]MyTicket, error) {
	query := getAllMyTicketsOnHoldSendToMe
	var queryParams []interface{}
	if len(arg.TicketStatuses) > 0 {
		for _, v := range arg.TicketStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ticket_statuses*/?", strings.Repeat(",?", len(arg.TicketStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ticket_statuses*/?", "NULL", 1)
	}
	if len(arg.OhrStatuses) > 0 {
		for _, v := range arg.OhrStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ohr_statuses*/?", strings.Repeat(",?", len(arg.OhrStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ohr_statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.UserID)
	queryParams = append(queryParams, arg.WorkspaceID)
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MyTicket
	for rows.Next() {
		var i MyTicket
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowID,
			&i.ID,
			&i.Code,
			&i.Title,
			&i.Priority,
			&i.IsPrivate,
			&i.Status,
			&i.CurrentNodeID,
			&i.CurrentNodeName,
			&i.CurrentNodeStatus,
			&i.CurrentNodeType,
			&i.NodeDeadlineAt,
			&i.AssigneeID,
			&i.DepartmentID,
			&i.Workflow,
			&i.Tags,
			&i.RefTicketIds,
			&i.RatingPoint,
			&i.Review,
			&i.LatestRecentActivityUserID,
			&i.LatestRecentActivityAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
