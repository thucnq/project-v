// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_my_ticket_send_to_me.sql

package sqlc

import (
	"context"
	"database/sql"
	"strings"
)

const countMyTicketsSendToMe = `-- name: CountMyTicketsSendToMe :one
SELECT COUNT(*)
FROM (
    SELECT DISTINCT mt.workspace_id, mt.workflow_id, mt.id, mt.code, mt.title, mt.priority, mt.is_private, mt.status, mt.current_node_id, mt.current_node_name, mt.current_node_status, mt.current_node_type, mt.node_deadline_at, mt.assignee_id, mt.department_id, mt.workflow, mt.tags, mt.ref_ticket_ids, mt.rating_point, mt.review, mt.latest_recent_activity_user_id, mt.latest_recent_activity_at, mt.created_by, mt.updated_by, mt.created_at, mt.updated_at
      FROM my_tickets AS mt
      WHERE mt.workspace_id = ?
        AND mt.assignee_id IN (/*SLICE:assignee_ids*/?)
        AND mt.current_node_status IN (/*SLICE:node_statuses*/?)

      UNION

      SELECT DISTINCT mt.workspace_id, mt.workflow_id, mt.id, mt.code, mt.title, mt.priority, mt.is_private, mt.status, mt.current_node_id, mt.current_node_name, mt.current_node_status, mt.current_node_type, mt.node_deadline_at, mt.assignee_id, mt.department_id, mt.workflow, mt.tags, mt.ref_ticket_ids, mt.rating_point, mt.review, mt.latest_recent_activity_user_id, mt.latest_recent_activity_at, mt.created_by, mt.updated_by, mt.created_at, mt.updated_at
      FROM my_tickets AS mt
               JOIN ticket_nodes AS tn
                    ON mt.id = tn.ticket_id
                        AND mt.current_node_id = tn.node_id
                        AND mt.assignee_id IS NULL
               LEFT JOIN ticket_node_participants AS tnp
                         ON tn.ticket_id = tnp.ticket_id
                             AND tn.node_id = tnp.node_id
               LEFT JOIN participant_members AS pm
                         ON tnp.participant_id = pm.participant_id
                             AND tnp.role_type = 4
      WHERE mt.workspace_id = ?
        AND pm.user_id IN (/*SLICE:user_ids*/?)
        AND mt.current_node_status IN (/*SLICE:node_statuses*/?)
) AS mt
WHERE (? = false OR mt.node_deadline_at <= NOW())
  AND ((? = '') OR (mt.title LIKE ?))
  AND ((? = '') OR (mt.code LIKE ?))
`

type CountMyTicketsSendToMeParams struct {
	WorkspaceID   string
	AssigneeIds   []sql.NullInt64
	NodeStatuses  []int8
	WorkspaceID_2 string
	UserIds       []int64
	Column7       interface{}
	Column8       interface{}
	Title         string
	Column10      interface{}
	Code          string
}

func (q *Queries) CountMyTicketsSendToMe(ctx context.Context, arg CountMyTicketsSendToMeParams) (int64, error) {
	query := countMyTicketsSendToMe
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.AssigneeIds) > 0 {
		for _, v := range arg.AssigneeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:assignee_ids*/?", strings.Repeat(",?", len(arg.AssigneeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:assignee_ids*/?", "NULL", 1)
	}
	if len(arg.NodeStatuses) > 0 {
		for _, v := range arg.NodeStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", strings.Repeat(",?", len(arg.NodeStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.WorkspaceID_2)
	if len(arg.UserIds) > 0 {
		for _, v := range arg.UserIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:user_ids*/?", strings.Repeat(",?", len(arg.UserIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:user_ids*/?", "NULL", 1)
	}
	if len(arg.NodeStatuses) > 0 {
		for _, v := range arg.NodeStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", strings.Repeat(",?", len(arg.NodeStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Column7)
	queryParams = append(queryParams, arg.Column8)
	queryParams = append(queryParams, arg.Title)
	queryParams = append(queryParams, arg.Column10)
	queryParams = append(queryParams, arg.Code)
	row := q.queryRow(ctx, nil, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllMyTicketsSendToMe = `-- name: GetAllMyTicketsSendToMe :many
SELECT workspace_id, workflow_id, id, code, title, priority, is_private, status, current_node_id, current_node_name, current_node_status, current_node_type, node_deadline_at, assignee_id, department_id, workflow, tags, ref_ticket_ids, rating_point, review, latest_recent_activity_user_id, latest_recent_activity_at, created_by, updated_by, created_at, updated_at
FROM (SELECT DISTINCT mt.workspace_id, mt.workflow_id, mt.id, mt.code, mt.title, mt.priority, mt.is_private, mt.status, mt.current_node_id, mt.current_node_name, mt.current_node_status, mt.current_node_type, mt.node_deadline_at, mt.assignee_id, mt.department_id, mt.workflow, mt.tags, mt.ref_ticket_ids, mt.rating_point, mt.review, mt.latest_recent_activity_user_id, mt.latest_recent_activity_at, mt.created_by, mt.updated_by, mt.created_at, mt.updated_at
      FROM my_tickets AS mt
      WHERE mt.workspace_id = ?
        AND mt.assignee_id IN (/*SLICE:assignee_ids*/?)
        AND mt.current_node_status IN (/*SLICE:node_statuses*/?)

      UNION

      SELECT DISTINCT mt.workspace_id, mt.workflow_id, mt.id, mt.code, mt.title, mt.priority, mt.is_private, mt.status, mt.current_node_id, mt.current_node_name, mt.current_node_status, mt.current_node_type, mt.node_deadline_at, mt.assignee_id, mt.department_id, mt.workflow, mt.tags, mt.ref_ticket_ids, mt.rating_point, mt.review, mt.latest_recent_activity_user_id, mt.latest_recent_activity_at, mt.created_by, mt.updated_by, mt.created_at, mt.updated_at
      FROM my_tickets AS mt
               JOIN ticket_nodes AS tn
                    ON mt.id = tn.ticket_id
                        AND mt.current_node_id = tn.node_id
                        AND mt.assignee_id IS NULL
               LEFT JOIN ticket_node_participants AS tnp
                         ON tn.ticket_id = tnp.ticket_id
                             AND tn.node_id = tnp.node_id
               LEFT JOIN participant_members AS pm
                         ON tnp.participant_id = pm.participant_id
                             AND tnp.role_type = 4
      WHERE mt.workspace_id = ?
        AND pm.user_id IN (/*SLICE:user_ids*/?)
        AND mt.current_node_status IN (/*SLICE:node_statuses*/?)) AS mt
WHERE (? = false OR mt.node_deadline_at <= NOW())
  AND ((? = '') OR (mt.title LIKE ?))
  AND ((? = '') OR (mt.code LIKE ?))
`

type GetAllMyTicketsSendToMeParams struct {
	WorkspaceID   string
	AssigneeIds   []sql.NullInt64
	NodeStatuses  []int8
	WorkspaceID_2 string
	UserIds       []int64
	Column7       interface{}
	Column8       interface{}
	Title         string
	Column10      interface{}
	Code          string
}

func (q *Queries) GetAllMyTicketsSendToMe(ctx context.Context, arg GetAllMyTicketsSendToMeParams) ([]MyTicket, error) {
	query := getAllMyTicketsSendToMe
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.AssigneeIds) > 0 {
		for _, v := range arg.AssigneeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:assignee_ids*/?", strings.Repeat(",?", len(arg.AssigneeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:assignee_ids*/?", "NULL", 1)
	}
	if len(arg.NodeStatuses) > 0 {
		for _, v := range arg.NodeStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", strings.Repeat(",?", len(arg.NodeStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.WorkspaceID_2)
	if len(arg.UserIds) > 0 {
		for _, v := range arg.UserIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:user_ids*/?", strings.Repeat(",?", len(arg.UserIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:user_ids*/?", "NULL", 1)
	}
	if len(arg.NodeStatuses) > 0 {
		for _, v := range arg.NodeStatuses {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", strings.Repeat(",?", len(arg.NodeStatuses))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:node_statuses*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Column7)
	queryParams = append(queryParams, arg.Column8)
	queryParams = append(queryParams, arg.Title)
	queryParams = append(queryParams, arg.Column10)
	queryParams = append(queryParams, arg.Code)
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MyTicket
	for rows.Next() {
		var i MyTicket
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowID,
			&i.ID,
			&i.Code,
			&i.Title,
			&i.Priority,
			&i.IsPrivate,
			&i.Status,
			&i.CurrentNodeID,
			&i.CurrentNodeName,
			&i.CurrentNodeStatus,
			&i.CurrentNodeType,
			&i.NodeDeadlineAt,
			&i.AssigneeID,
			&i.DepartmentID,
			&i.Workflow,
			&i.Tags,
			&i.RefTicketIds,
			&i.RatingPoint,
			&i.Review,
			&i.LatestRecentActivityUserID,
			&i.LatestRecentActivityAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
