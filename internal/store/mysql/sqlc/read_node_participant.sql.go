// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_node_participant.sql

package sqlc

import (
	"context"
	"database/sql"
)

const listNodeParticipantsByNodeID = `-- name: ListNodeParticipantsByNodeID :many
SELECT workspace_id, node_id, participant_id, role_type, participant_type, created_at, updated_at
FROM node_participants
WHERE workspace_id = ? AND node_id = ?
`

type ListNodeParticipantsByNodeIDParams struct {
	WorkspaceID string
	NodeID      int64
}

func (q *Queries) ListNodeParticipantsByNodeID(ctx context.Context, arg ListNodeParticipantsByNodeIDParams) ([]NodeParticipant, error) {
	rows, err := q.query(ctx, q.listNodeParticipantsByNodeIDStmt, listNodeParticipantsByNodeID, arg.WorkspaceID, arg.NodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeParticipant
	for rows.Next() {
		var i NodeParticipant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.NodeID,
			&i.ParticipantID,
			&i.RoleType,
			&i.ParticipantType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPreviewNodeAdmins = `-- name: ListPreviewNodeAdmins :many
SELECT ranked.participant_id, ranked.participant_type, ranked.workspace_id, ranked.node_id, participants.name AS participant_name
FROM (
         SELECT workspace_id, node_id, participant_id, role_type, participant_type, created_at, updated_at, @row_number := IF(@node_id = node_id, @row_number + 1, 1) AS row_num, @node_id := node_id AS dummy
         FROM node_participants
         WHERE node_participants.workspace_id = ? AND node_id IN (
             SELECT nodes.id
             FROM nodes
             WHERE nodes.workspace_id = ? AND workflow_id = ?
             ) AND role_type = 1
         ORDER BY node_id, participant_id
     ) AS ranked
         LEFT JOIN participants ON ranked.participant_id = participants.id
WHERE row_num <= 5
`

type ListPreviewNodeAdminsParams struct {
	WorkspaceID   string
	WorkspaceID_2 string
	WorkflowID    int64
}

type ListPreviewNodeAdminsRow struct {
	ParticipantID   string
	ParticipantType int8
	WorkspaceID     string
	NodeID          int64
	ParticipantName sql.NullString
}

func (q *Queries) ListPreviewNodeAdmins(ctx context.Context, arg ListPreviewNodeAdminsParams) ([]ListPreviewNodeAdminsRow, error) {
	rows, err := q.query(ctx, q.listPreviewNodeAdminsStmt, listPreviewNodeAdmins, arg.WorkspaceID, arg.WorkspaceID_2, arg.WorkflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPreviewNodeAdminsRow
	for rows.Next() {
		var i ListPreviewNodeAdminsRow
		if err := rows.Scan(
			&i.ParticipantID,
			&i.ParticipantType,
			&i.WorkspaceID,
			&i.NodeID,
			&i.ParticipantName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPreviewNodeAssignees = `-- name: ListPreviewNodeAssignees :many
SELECT ranked.participant_id, ranked.participant_type, ranked.workspace_id, ranked.node_id, participants.name AS participant_name
FROM (
         SELECT workspace_id, node_id, participant_id, role_type, participant_type, created_at, updated_at, @row_number := IF(@node_id = node_id, @row_number + 1, 1) AS row_num, @node_id := node_id AS dummy
         FROM node_participants
         WHERE node_participants.workspace_id = ? AND node_id IN (
             SELECT nodes.id
             FROM nodes
             WHERE nodes.workspace_id = ? AND workflow_id = ?
             ) AND role_type = 4
         ORDER BY node_id, participant_id
     ) AS ranked
LEFT JOIN participants ON ranked.participant_id = participants.id
WHERE row_num <= 5
`

type ListPreviewNodeAssigneesParams struct {
	WorkspaceID   string
	WorkspaceID_2 string
	WorkflowID    int64
}

type ListPreviewNodeAssigneesRow struct {
	ParticipantID   string
	ParticipantType int8
	WorkspaceID     string
	NodeID          int64
	ParticipantName sql.NullString
}

func (q *Queries) ListPreviewNodeAssignees(ctx context.Context, arg ListPreviewNodeAssigneesParams) ([]ListPreviewNodeAssigneesRow, error) {
	rows, err := q.query(ctx, q.listPreviewNodeAssigneesStmt, listPreviewNodeAssignees, arg.WorkspaceID, arg.WorkspaceID_2, arg.WorkflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPreviewNodeAssigneesRow
	for rows.Next() {
		var i ListPreviewNodeAssigneesRow
		if err := rows.Scan(
			&i.ParticipantID,
			&i.ParticipantType,
			&i.WorkspaceID,
			&i.NodeID,
			&i.ParticipantName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
