// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_on_hold_request.sql

package sqlc

import (
	"context"
)

const countWaitingOnHoldRequests = `-- name: CountWaitingOnHoldRequests :one
SELECT COUNT(*)
FROM on_hold_requests
WHERE workspace_id = ? AND ticket_id = ? AND node_id = ? AND status = 1
`

type CountWaitingOnHoldRequestsParams struct {
	WorkspaceID string
	TicketID    int64
	NodeID      int64
}

func (q *Queries) CountWaitingOnHoldRequests(ctx context.Context, arg CountWaitingOnHoldRequestsParams) (int64, error) {
	row := q.queryRow(ctx, q.countWaitingOnHoldRequestsStmt, countWaitingOnHoldRequests, arg.WorkspaceID, arg.TicketID, arg.NodeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOnHoldRequestByID = `-- name: GetOnHoldRequestByID :one
SELECT workspace_id, ticket_id, node_id, id, requester_id, reason, image_urls, attached_files, status, created_at, updated_at
FROM on_hold_requests
WHERE workspace_id = ? AND ticket_id = ? AND node_id = ? AND id = ?
LIMIT 1
`

type GetOnHoldRequestByIDParams struct {
	WorkspaceID string
	TicketID    int64
	NodeID      int64
	ID          int64
}

func (q *Queries) GetOnHoldRequestByID(ctx context.Context, arg GetOnHoldRequestByIDParams) (OnHoldRequest, error) {
	row := q.queryRow(ctx, q.getOnHoldRequestByIDStmt, getOnHoldRequestByID,
		arg.WorkspaceID,
		arg.TicketID,
		arg.NodeID,
		arg.ID,
	)
	var i OnHoldRequest
	err := row.Scan(
		&i.WorkspaceID,
		&i.TicketID,
		&i.NodeID,
		&i.ID,
		&i.RequesterID,
		&i.Reason,
		&i.ImageUrls,
		&i.AttachedFiles,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWaitingOnHoldRequests = `-- name: ListWaitingOnHoldRequests :many
SELECT workspace_id, ticket_id, node_id, id, requester_id, reason, image_urls, attached_files, status, created_at, updated_at
FROM on_hold_requests
WHERE workspace_id = ? AND ticket_id = ? AND node_id = ? AND status = 1
`

type ListWaitingOnHoldRequestsParams struct {
	WorkspaceID string
	TicketID    int64
	NodeID      int64
}

func (q *Queries) ListWaitingOnHoldRequests(ctx context.Context, arg ListWaitingOnHoldRequestsParams) ([]OnHoldRequest, error) {
	rows, err := q.query(ctx, q.listWaitingOnHoldRequestsStmt, listWaitingOnHoldRequests, arg.WorkspaceID, arg.TicketID, arg.NodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OnHoldRequest
	for rows.Next() {
		var i OnHoldRequest
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.NodeID,
			&i.ID,
			&i.RequesterID,
			&i.Reason,
			&i.ImageUrls,
			&i.AttachedFiles,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
