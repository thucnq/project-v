// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_on_hold_request_approver.sql

package sqlc

import (
	"context"
)

const listOnHoldRequestApprovers = `-- name: ListOnHoldRequestApprovers :many
SELECT workspace_id, ticket_id, on_hold_request_id, approver_id
FROM on_hold_request_approvers
WHERE workspace_id = ? AND ticket_id = ? AND on_hold_request_id = ?
`

type ListOnHoldRequestApproversParams struct {
	WorkspaceID     string
	TicketID        int64
	OnHoldRequestID int64
}

func (q *Queries) ListOnHoldRequestApprovers(ctx context.Context, arg ListOnHoldRequestApproversParams) ([]OnHoldRequestApprover, error) {
	rows, err := q.query(ctx, q.listOnHoldRequestApproversStmt, listOnHoldRequestApprovers, arg.WorkspaceID, arg.TicketID, arg.OnHoldRequestID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OnHoldRequestApprover
	for rows.Next() {
		var i OnHoldRequestApprover
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.OnHoldRequestID,
			&i.ApproverID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
