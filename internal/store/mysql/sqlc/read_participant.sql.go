// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_participant.sql

package sqlc

import (
	"context"
)

const countParticipantExistedByWorkspaceIDAndID = `-- name: CountParticipantExistedByWorkspaceIDAndID :one
SELECT COUNT(*)
FROM participants
WHERE workspace_id = ?
    AND id = ?
`

type CountParticipantExistedByWorkspaceIDAndIDParams struct {
	WorkspaceID string
	ID          string
}

func (q *Queries) CountParticipantExistedByWorkspaceIDAndID(ctx context.Context, arg CountParticipantExistedByWorkspaceIDAndIDParams) (int64, error) {
	row := q.queryRow(ctx, q.countParticipantExistedByWorkspaceIDAndIDStmt, countParticipantExistedByWorkspaceIDAndID, arg.WorkspaceID, arg.ID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getParticipantByID = `-- name: GetParticipantByID :one
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
    AND id = ?
LIMIT 1
`

type GetParticipantByIDParams struct {
	WorkspaceID string
	ID          string
}

func (q *Queries) GetParticipantByID(ctx context.Context, arg GetParticipantByIDParams) (Participant, error) {
	row := q.queryRow(ctx, q.getParticipantByIDStmt, getParticipantByID, arg.WorkspaceID, arg.ID)
	var i Participant
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listParticipantsByEightIDs = `-- name: ListParticipantsByEightIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?,?,?,?,?,?,?)
`

type ListParticipantsByEightIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
	ID_4        string
	ID_5        string
	ID_6        string
	ID_7        string
	ID_8        string
}

func (q *Queries) ListParticipantsByEightIDs(ctx context.Context, arg ListParticipantsByEightIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsByEightIDsStmt, listParticipantsByEightIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
		arg.ID_5,
		arg.ID_6,
		arg.ID_7,
		arg.ID_8,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsByFiveIDs = `-- name: ListParticipantsByFiveIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?,?,?,?)
`

type ListParticipantsByFiveIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
	ID_4        string
	ID_5        string
}

func (q *Queries) ListParticipantsByFiveIDs(ctx context.Context, arg ListParticipantsByFiveIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsByFiveIDsStmt, listParticipantsByFiveIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
		arg.ID_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsByFourIDs = `-- name: ListParticipantsByFourIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?,?,?)
`

type ListParticipantsByFourIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
	ID_4        string
}

func (q *Queries) ListParticipantsByFourIDs(ctx context.Context, arg ListParticipantsByFourIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsByFourIDsStmt, listParticipantsByFourIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsByNineIDs = `-- name: ListParticipantsByNineIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?,?,?,?,?,?,?,?)
`

type ListParticipantsByNineIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
	ID_4        string
	ID_5        string
	ID_6        string
	ID_7        string
	ID_8        string
	ID_9        string
}

func (q *Queries) ListParticipantsByNineIDs(ctx context.Context, arg ListParticipantsByNineIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsByNineIDsStmt, listParticipantsByNineIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
		arg.ID_5,
		arg.ID_6,
		arg.ID_7,
		arg.ID_8,
		arg.ID_9,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsBySevenIDs = `-- name: ListParticipantsBySevenIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?,?,?,?,?,?)
`

type ListParticipantsBySevenIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
	ID_4        string
	ID_5        string
	ID_6        string
	ID_7        string
}

func (q *Queries) ListParticipantsBySevenIDs(ctx context.Context, arg ListParticipantsBySevenIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsBySevenIDsStmt, listParticipantsBySevenIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
		arg.ID_5,
		arg.ID_6,
		arg.ID_7,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsBySixIDs = `-- name: ListParticipantsBySixIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?,?,?,?,?)
`

type ListParticipantsBySixIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
	ID_4        string
	ID_5        string
	ID_6        string
}

func (q *Queries) ListParticipantsBySixIDs(ctx context.Context, arg ListParticipantsBySixIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsBySixIDsStmt, listParticipantsBySixIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
		arg.ID_5,
		arg.ID_6,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsByTenIDs = `-- name: ListParticipantsByTenIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
    AND id IN (?,?,?,?,?,?,?,?,?,?)
`

type ListParticipantsByTenIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
	ID_4        string
	ID_5        string
	ID_6        string
	ID_7        string
	ID_8        string
	ID_9        string
	ID_10       string
}

func (q *Queries) ListParticipantsByTenIDs(ctx context.Context, arg ListParticipantsByTenIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsByTenIDsStmt, listParticipantsByTenIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
		arg.ID_4,
		arg.ID_5,
		arg.ID_6,
		arg.ID_7,
		arg.ID_8,
		arg.ID_9,
		arg.ID_10,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsByThreeIDs = `-- name: ListParticipantsByThreeIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?,?)
`

type ListParticipantsByThreeIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
	ID_3        string
}

func (q *Queries) ListParticipantsByThreeIDs(ctx context.Context, arg ListParticipantsByThreeIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsByThreeIDsStmt, listParticipantsByThreeIDs,
		arg.WorkspaceID,
		arg.ID,
		arg.ID_2,
		arg.ID_3,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParticipantsByTwoIDs = `-- name: ListParticipantsByTwoIDs :many
SELECT workspace_id, id, name, type, created_at, updated_at
FROM participants
WHERE workspace_id = ?
  AND id IN (?,?)
`

type ListParticipantsByTwoIDsParams struct {
	WorkspaceID string
	ID          string
	ID_2        string
}

func (q *Queries) ListParticipantsByTwoIDs(ctx context.Context, arg ListParticipantsByTwoIDsParams) ([]Participant, error) {
	rows, err := q.query(ctx, q.listParticipantsByTwoIDsStmt, listParticipantsByTwoIDs, arg.WorkspaceID, arg.ID, arg.ID_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
