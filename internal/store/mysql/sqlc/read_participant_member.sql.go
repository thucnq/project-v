// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_participant_member.sql

package sqlc

import (
	"context"
	"strings"
)

const countMinSameParticipants = `-- name: CountMinSameParticipants :one
SELECT COUNT(*)
FROM participant_members
WHERE workspace_id = ? AND user_id IN (?, ?)
GROUP BY participant_id
HAVING COUNT(user_id) = 2
LIMIT 1
`

type CountMinSameParticipantsParams struct {
	WorkspaceID string
	UserID      int64
	UserID_2    int64
}

func (q *Queries) CountMinSameParticipants(ctx context.Context, arg CountMinSameParticipantsParams) (int64, error) {
	row := q.queryRow(ctx, q.countMinSameParticipantsStmt, countMinSameParticipants, arg.WorkspaceID, arg.UserID, arg.UserID_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countParticipantMemberByWorkspaceIDAndParticipantID = `-- name: CountParticipantMemberByWorkspaceIDAndParticipantID :one
SELECT COUNT(*)
FROM participant_members
WHERE workspace_id = ?
  AND participant_id = ?
`

type CountParticipantMemberByWorkspaceIDAndParticipantIDParams struct {
	WorkspaceID   string
	ParticipantID string
}

func (q *Queries) CountParticipantMemberByWorkspaceIDAndParticipantID(ctx context.Context, arg CountParticipantMemberByWorkspaceIDAndParticipantIDParams) (int64, error) {
	row := q.queryRow(ctx, q.countParticipantMemberByWorkspaceIDAndParticipantIDStmt, countParticipantMemberByWorkspaceIDAndParticipantID, arg.WorkspaceID, arg.ParticipantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countParticipantMembersByUserIDIDAndParticipantIDs = `-- name: CountParticipantMembersByUserIDIDAndParticipantIDs :one
SELECT COUNT(*)
FROM participant_members
WHERE workspace_id = ?
  AND user_id = ?
  AND participant_id IN (/*SLICE:participant_ids*/?)
`

type CountParticipantMembersByUserIDIDAndParticipantIDsParams struct {
	WorkspaceID    string
	UserID         int64
	ParticipantIds []string
}

func (q *Queries) CountParticipantMembersByUserIDIDAndParticipantIDs(ctx context.Context, arg CountParticipantMembersByUserIDIDAndParticipantIDsParams) (int64, error) {
	query := countParticipantMembersByUserIDIDAndParticipantIDs
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	queryParams = append(queryParams, arg.UserID)
	if len(arg.ParticipantIds) > 0 {
		for _, v := range arg.ParticipantIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:participant_ids*/?", strings.Repeat(",?", len(arg.ParticipantIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:participant_ids*/?", "NULL", 1)
	}
	row := q.queryRow(ctx, nil, query, queryParams...)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getParticipantMembersByWorkspaceIDAndParticipantID = `-- name: GetParticipantMembersByWorkspaceIDAndParticipantID :many
SELECT workspace_id, participant_id, user_id, created_at, updated_at
FROM participant_members
WHERE workspace_id = ?
  AND participant_id = ?
`

type GetParticipantMembersByWorkspaceIDAndParticipantIDParams struct {
	WorkspaceID   string
	ParticipantID string
}

func (q *Queries) GetParticipantMembersByWorkspaceIDAndParticipantID(ctx context.Context, arg GetParticipantMembersByWorkspaceIDAndParticipantIDParams) ([]ParticipantMember, error) {
	rows, err := q.query(ctx, q.getParticipantMembersByWorkspaceIDAndParticipantIDStmt, getParticipantMembersByWorkspaceIDAndParticipantID, arg.WorkspaceID, arg.ParticipantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParticipantMember
	for rows.Next() {
		var i ParticipantMember
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ParticipantID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParticipantMembersByWorkspaceIDAndParticipantIDs = `-- name: GetParticipantMembersByWorkspaceIDAndParticipantIDs :many
SELECT workspace_id, participant_id, user_id, created_at, updated_at
FROM participant_members
WHERE workspace_id = ?
  AND participant_id IN (/*SLICE:participant_ids*/?)
`

type GetParticipantMembersByWorkspaceIDAndParticipantIDsParams struct {
	WorkspaceID    string
	ParticipantIds []string
}

func (q *Queries) GetParticipantMembersByWorkspaceIDAndParticipantIDs(ctx context.Context, arg GetParticipantMembersByWorkspaceIDAndParticipantIDsParams) ([]ParticipantMember, error) {
	query := getParticipantMembersByWorkspaceIDAndParticipantIDs
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.ParticipantIds) > 0 {
		for _, v := range arg.ParticipantIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:participant_ids*/?", strings.Repeat(",?", len(arg.ParticipantIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:participant_ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParticipantMember
	for rows.Next() {
		var i ParticipantMember
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ParticipantID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdate = `-- name: LockParticipantMembersByWorkspaceIDAndParticipantIDForUpdate :many
SELECT workspace_id, participant_id, user_id, created_at, updated_at
FROM participant_members
WHERE workspace_id = ?
    AND participant_id = ?
FOR UPDATE
`

type LockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateParams struct {
	WorkspaceID   string
	ParticipantID string
}

func (q *Queries) LockParticipantMembersByWorkspaceIDAndParticipantIDForUpdate(ctx context.Context, arg LockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateParams) ([]ParticipantMember, error) {
	rows, err := q.query(ctx, q.lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdateStmt, lockParticipantMembersByWorkspaceIDAndParticipantIDForUpdate, arg.WorkspaceID, arg.ParticipantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParticipantMember
	for rows.Next() {
		var i ParticipantMember
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ParticipantID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
