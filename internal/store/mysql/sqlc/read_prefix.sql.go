// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_prefix.sql

package sqlc

import (
	"context"
)

const countDefaultPrefixesByWorkspaceID = `-- name: CountDefaultPrefixesByWorkspaceID :one
SELECT COUNT(*)
FROM prefixs
WHERE workspace_id = ?
  AND is_default = true
`

func (q *Queries) CountDefaultPrefixesByWorkspaceID(ctx context.Context, workspaceID string) (int64, error) {
	row := q.queryRow(ctx, q.countDefaultPrefixesByWorkspaceIDStmt, countDefaultPrefixesByWorkspaceID, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPrefixes = `-- name: CountPrefixes :one
SELECT COUNT(*)
FROM prefixs
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (name LIKE ?))
`

type CountPrefixesParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Name        string
}

func (q *Queries) CountPrefixes(ctx context.Context, arg CountPrefixesParams) (int64, error) {
	row := q.queryRow(ctx, q.countPrefixesStmt, countPrefixes,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Name,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllPrefix = `-- name: GetAllPrefix :many
SELECT workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
FROM prefixs
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (name LIKE ?))
  AND id != ?
ORDER BY id DESC
LIMIT ?
`

type GetAllPrefixParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Name        string
	ID          int64
	Limit       int32
}

func (q *Queries) GetAllPrefix(ctx context.Context, arg GetAllPrefixParams) ([]Prefix, error) {
	rows, err := q.query(ctx, q.getAllPrefixStmt, getAllPrefix,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Name,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prefix
	for rows.Next() {
		var i Prefix
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.Status,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPrefixPagingNext = `-- name: GetAllPrefixPagingNext :many
SELECT workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
FROM prefixs
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (name LIKE ?))
  AND id < ?
  AND id != ?
ORDER BY id DESC
LIMIT ?
`

type GetAllPrefixPagingNextParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Name        string
	ID          int64
	ID_2        int64
	Limit       int32
}

func (q *Queries) GetAllPrefixPagingNext(ctx context.Context, arg GetAllPrefixPagingNextParams) ([]Prefix, error) {
	rows, err := q.query(ctx, q.getAllPrefixPagingNextStmt, getAllPrefixPagingNext,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Name,
		arg.ID,
		arg.ID_2,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prefix
	for rows.Next() {
		var i Prefix
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.Status,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPrefixPagingPrev = `-- name: GetAllPrefixPagingPrev :many
SELECT workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
FROM prefixs
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (name LIKE ?))
  AND id > ?
  AND id != ?
ORDER BY id ASC
LIMIT ?
`

type GetAllPrefixPagingPrevParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Name        string
	ID          int64
	ID_2        int64
	Limit       int32
}

func (q *Queries) GetAllPrefixPagingPrev(ctx context.Context, arg GetAllPrefixPagingPrevParams) ([]Prefix, error) {
	rows, err := q.query(ctx, q.getAllPrefixPagingPrevStmt, getAllPrefixPagingPrev,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Name,
		arg.ID,
		arg.ID_2,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prefix
	for rows.Next() {
		var i Prefix
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.Status,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultPrefix = `-- name: GetDefaultPrefix :one
SELECT workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
FROM prefixs
WHERE workspace_id = ?
  AND is_default = true
LIMIT 1
`

func (q *Queries) GetDefaultPrefix(ctx context.Context, workspaceID string) (Prefix, error) {
	row := q.queryRow(ctx, q.getDefaultPrefixStmt, getDefaultPrefix, workspaceID)
	var i Prefix
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.Status,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDefaultPrefixByFilter = `-- name: GetDefaultPrefixByFilter :one
SELECT workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
FROM prefixs
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (name LIKE ?))
  AND is_default = true
LIMIT 1
`

type GetDefaultPrefixByFilterParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Name        string
}

func (q *Queries) GetDefaultPrefixByFilter(ctx context.Context, arg GetDefaultPrefixByFilterParams) (Prefix, error) {
	row := q.queryRow(ctx, q.getDefaultPrefixByFilterStmt, getDefaultPrefixByFilter,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Name,
	)
	var i Prefix
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.Status,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrefixByID = `-- name: GetPrefixByID :one
SELECT workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
FROM prefixs
WHERE workspace_id = ?
  AND id = ?
LIMIT 1
`

type GetPrefixByIDParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) GetPrefixByID(ctx context.Context, arg GetPrefixByIDParams) (Prefix, error) {
	row := q.queryRow(ctx, q.getPrefixByIDStmt, getPrefixByID, arg.WorkspaceID, arg.ID)
	var i Prefix
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.Status,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lockPrefixByWorkspaceIDForUpdate = `-- name: LockPrefixByWorkspaceIDForUpdate :many
SELECT workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
FROM prefixs
WHERE workspace_id = ?
FOR UPDATE
`

func (q *Queries) LockPrefixByWorkspaceIDForUpdate(ctx context.Context, workspaceID string) ([]Prefix, error) {
	rows, err := q.query(ctx, q.lockPrefixByWorkspaceIDForUpdateStmt, lockPrefixByWorkspaceIDForUpdate, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prefix
	for rows.Next() {
		var i Prefix
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.Status,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
