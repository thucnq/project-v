// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_shift.sql

package sqlc

import (
	"context"
)

const countDefaultShiftsByWorkspaceID = `-- name: CountDefaultShiftsByWorkspaceID :one
SELECT COUNT(*)
FROM shifts
WHERE workspace_id = ?
  AND is_default = true
`

func (q *Queries) CountDefaultShiftsByWorkspaceID(ctx context.Context, workspaceID string) (int64, error) {
	row := q.queryRow(ctx, q.countDefaultShiftsByWorkspaceIDStmt, countDefaultShiftsByWorkspaceID, workspaceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countShifts = `-- name: CountShifts :one
SELECT COUNT(*)
FROM shifts
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (title LIKE ?))
`

type CountShiftsParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Title       string
}

func (q *Queries) CountShifts(ctx context.Context, arg CountShiftsParams) (int64, error) {
	row := q.queryRow(ctx, q.countShiftsStmt, countShifts,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Title,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllShifts = `-- name: GetAllShifts :many
SELECT workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
FROM shifts
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (title LIKE ?))
  AND id != ?
ORDER BY id DESC
LIMIT ?
`

type GetAllShiftsParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Title       string
	ID          int64
	Limit       int32
}

func (q *Queries) GetAllShifts(ctx context.Context, arg GetAllShiftsParams) ([]Shift, error) {
	rows, err := q.query(ctx, q.getAllShiftsStmt, getAllShifts,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Title,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsDefault,
			&i.TimezoneIdx,
			&i.Status,
			&i.WorkingType,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllShiftsPagingNext = `-- name: GetAllShiftsPagingNext :many
SELECT workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
FROM shifts
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (title LIKE ?))
  AND id < ?
  AND id != ?
ORDER BY id DESC
LIMIT ?
`

type GetAllShiftsPagingNextParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Title       string
	ID          int64
	ID_2        int64
	Limit       int32
}

func (q *Queries) GetAllShiftsPagingNext(ctx context.Context, arg GetAllShiftsPagingNextParams) ([]Shift, error) {
	rows, err := q.query(ctx, q.getAllShiftsPagingNextStmt, getAllShiftsPagingNext,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Title,
		arg.ID,
		arg.ID_2,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsDefault,
			&i.TimezoneIdx,
			&i.Status,
			&i.WorkingType,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllShiftsPagingPrev = `-- name: GetAllShiftsPagingPrev :many
SELECT workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
FROM shifts
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (title LIKE ?))
  AND id > ?
  AND id != ?
ORDER BY id ASC
LIMIT ?
`

type GetAllShiftsPagingPrevParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Title       string
	ID          int64
	ID_2        int64
	Limit       int32
}

func (q *Queries) GetAllShiftsPagingPrev(ctx context.Context, arg GetAllShiftsPagingPrevParams) ([]Shift, error) {
	rows, err := q.query(ctx, q.getAllShiftsPagingPrevStmt, getAllShiftsPagingPrev,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Title,
		arg.ID,
		arg.ID_2,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsDefault,
			&i.TimezoneIdx,
			&i.Status,
			&i.WorkingType,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultShift = `-- name: GetDefaultShift :one
SELECT workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
FROM shifts
WHERE workspace_id = ?
  AND is_default = true
LIMIT 1
`

func (q *Queries) GetDefaultShift(ctx context.Context, workspaceID string) (Shift, error) {
	row := q.queryRow(ctx, q.getDefaultShiftStmt, getDefaultShift, workspaceID)
	var i Shift
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsDefault,
		&i.TimezoneIdx,
		&i.Status,
		&i.WorkingType,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDefaultShiftByFilter = `-- name: GetDefaultShiftByFilter :one
SELECT workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
FROM shifts
WHERE workspace_id = ?
  AND (? = 0 OR status = ?)
  AND ((? = '') OR (title LIKE ?))
  AND is_default = true
LIMIT 1
`

type GetDefaultShiftByFilterParams struct {
	WorkspaceID string
	Column2     interface{}
	Status      int8
	Column4     interface{}
	Title       string
}

func (q *Queries) GetDefaultShiftByFilter(ctx context.Context, arg GetDefaultShiftByFilterParams) (Shift, error) {
	row := q.queryRow(ctx, q.getDefaultShiftByFilterStmt, getDefaultShiftByFilter,
		arg.WorkspaceID,
		arg.Column2,
		arg.Status,
		arg.Column4,
		arg.Title,
	)
	var i Shift
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsDefault,
		&i.TimezoneIdx,
		&i.Status,
		&i.WorkingType,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShiftByID = `-- name: GetShiftByID :one
SELECT workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
FROM shifts
WHERE workspace_id = ?
  AND id = ?
LIMIT 1
`

type GetShiftByIDParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) GetShiftByID(ctx context.Context, arg GetShiftByIDParams) (Shift, error) {
	row := q.queryRow(ctx, q.getShiftByIDStmt, getShiftByID, arg.WorkspaceID, arg.ID)
	var i Shift
	err := row.Scan(
		&i.WorkspaceID,
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsDefault,
		&i.TimezoneIdx,
		&i.Status,
		&i.WorkingType,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lockShiftsByWorkspaceIDForUpdate = `-- name: LockShiftsByWorkspaceIDForUpdate :many
SELECT workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
FROM shifts
WHERE workspace_id = ? FOR UPDATE
`

func (q *Queries) LockShiftsByWorkspaceIDForUpdate(ctx context.Context, workspaceID string) ([]Shift, error) {
	rows, err := q.query(ctx, q.lockShiftsByWorkspaceIDForUpdateStmt, lockShiftsByWorkspaceIDForUpdate, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shift
	for rows.Next() {
		var i Shift
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsDefault,
			&i.TimezoneIdx,
			&i.Status,
			&i.WorkingType,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
