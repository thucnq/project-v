// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_task.sql

package sqlc

import (
	"context"
)

const getTaskByID = `-- name: GetTaskByID :one
SELECT workspace_id, node_id, id, name, description, estimate_duration_minutes, created_at, updated_at
FROM tasks
WHERE workspace_id = ? AND node_id = ? AND id = ?
`

type GetTaskByIDParams struct {
	WorkspaceID string
	NodeID      int64
	ID          int64
}

func (q *Queries) GetTaskByID(ctx context.Context, arg GetTaskByIDParams) (Task, error) {
	row := q.queryRow(ctx, q.getTaskByIDStmt, getTaskByID, arg.WorkspaceID, arg.NodeID, arg.ID)
	var i Task
	err := row.Scan(
		&i.WorkspaceID,
		&i.NodeID,
		&i.ID,
		&i.Name,
		&i.Description,
		&i.EstimateDurationMinutes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasksByNodeID = `-- name: ListTasksByNodeID :many
SELECT workspace_id, node_id, id, name, description, estimate_duration_minutes, created_at, updated_at
FROM tasks
WHERE workspace_id = ? AND node_id = ?
`

type ListTasksByNodeIDParams struct {
	WorkspaceID string
	NodeID      int64
}

func (q *Queries) ListTasksByNodeID(ctx context.Context, arg ListTasksByNodeIDParams) ([]Task, error) {
	rows, err := q.query(ctx, q.listTasksByNodeIDStmt, listTasksByNodeID, arg.WorkspaceID, arg.NodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.NodeID,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.EstimateDurationMinutes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
