// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_ticket.sql

package sqlc

import (
	"context"
	"strings"
	"time"
)

const getTicketByID = `-- name: GetTicketByID :one
SELECT workspace_id, workflow_id, id, code, title, priority, is_private, status, workflow, ref_ticket_ids, rating_point, review, created_by, updated_by, created_at, updated_at
FROM tickets
WHERE workspace_id = ? AND id = ?
`

type GetTicketByIDParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) GetTicketByID(ctx context.Context, arg GetTicketByIDParams) (Ticket, error) {
	row := q.queryRow(ctx, q.getTicketByIDStmt, getTicketByID, arg.WorkspaceID, arg.ID)
	var i Ticket
	err := row.Scan(
		&i.WorkspaceID,
		&i.WorkflowID,
		&i.ID,
		&i.Code,
		&i.Title,
		&i.Priority,
		&i.IsPrivate,
		&i.Status,
		&i.Workflow,
		&i.RefTicketIds,
		&i.RatingPoint,
		&i.Review,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRefTickets = `-- name: ListRefTickets :many
SELECT id, code, title, created_at, created_by
FROM tickets
WHERE workspace_id = ? AND id IN (/*SLICE:ref_ticket_ids*/?)
`

type ListRefTicketsParams struct {
	WorkspaceID  string
	RefTicketIds []int64
}

type ListRefTicketsRow struct {
	ID        int64
	Code      string
	Title     string
	CreatedAt time.Time
	CreatedBy int64
}

func (q *Queries) ListRefTickets(ctx context.Context, arg ListRefTicketsParams) ([]ListRefTicketsRow, error) {
	query := listRefTickets
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.RefTicketIds) > 0 {
		for _, v := range arg.RefTicketIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ref_ticket_ids*/?", strings.Repeat(",?", len(arg.RefTicketIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ref_ticket_ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRefTicketsRow
	for rows.Next() {
		var i ListRefTicketsRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Title,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
