// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_ticket_activity.sql

package sqlc

import (
	"context"
	"strings"
)

const getLatestRecentActivityOfTicket = `-- name: GetLatestRecentActivityOfTicket :one
SELECT workspace_id, ticket_id, id, actor_id, actor_type, type, target_id, target_type, object_id, object_type, content, created_at
FROM ticket_activities
WHERE workspace_id = ?
  AND ticket_id = ?
ORDER BY created_at DESC
LIMIT 1
`

type GetLatestRecentActivityOfTicketParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) GetLatestRecentActivityOfTicket(ctx context.Context, arg GetLatestRecentActivityOfTicketParams) (TicketActivity, error) {
	row := q.queryRow(ctx, q.getLatestRecentActivityOfTicketStmt, getLatestRecentActivityOfTicket, arg.WorkspaceID, arg.TicketID)
	var i TicketActivity
	err := row.Scan(
		&i.WorkspaceID,
		&i.TicketID,
		&i.ID,
		&i.ActorID,
		&i.ActorType,
		&i.Type,
		&i.TargetID,
		&i.TargetType,
		&i.ObjectID,
		&i.ObjectType,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestRecentActivityOfTickets = `-- name: GetLatestRecentActivityOfTickets :many
SELECT t1.workspace_id, t1.ticket_id, t1.id, t1.actor_id, t1.actor_type, t1.type, t1.target_id, t1.target_type, t1.object_id, t1.object_type, t1.content, t1.created_at
FROM ticket_activities AS t1
INNER JOIN (
        SELECT ticket_id, MAX(created_at) AS max_created_at
        FROM ticket_activities AS t2
        WHERE t2.workspace_id = ?
        AND t2.ticket_id IN (/*SLICE:ticket_ids*/?)
        GROUP BY ticket_id
) AS max_activities
ON t1.ticket_id = max_activities.ticket_id
       AND t1.created_at = max_activities.max_created_at
`

type GetLatestRecentActivityOfTicketsParams struct {
	WorkspaceID string
	TicketIds   []int64
}

func (q *Queries) GetLatestRecentActivityOfTickets(ctx context.Context, arg GetLatestRecentActivityOfTicketsParams) ([]TicketActivity, error) {
	query := getLatestRecentActivityOfTickets
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	if len(arg.TicketIds) > 0 {
		for _, v := range arg.TicketIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ticket_ids*/?", strings.Repeat(",?", len(arg.TicketIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ticket_ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketActivity
	for rows.Next() {
		var i TicketActivity
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.ID,
			&i.ActorID,
			&i.ActorType,
			&i.Type,
			&i.TargetID,
			&i.TargetType,
			&i.ObjectID,
			&i.ObjectType,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketActivities = `-- name: ListTicketActivities :many
SELECT workspace_id, ticket_id, id, actor_id, actor_type, type, target_id, target_type, object_id, object_type, content, created_at
FROM ticket_activities
WHERE workspace_id = ?
  AND ticket_id = ?
`

type ListTicketActivitiesParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) ListTicketActivities(ctx context.Context, arg ListTicketActivitiesParams) ([]TicketActivity, error) {
	rows, err := q.query(ctx, q.listTicketActivitiesStmt, listTicketActivities, arg.WorkspaceID, arg.TicketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketActivity
	for rows.Next() {
		var i TicketActivity
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.ID,
			&i.ActorID,
			&i.ActorType,
			&i.Type,
			&i.TargetID,
			&i.TargetType,
			&i.ObjectID,
			&i.ObjectType,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
