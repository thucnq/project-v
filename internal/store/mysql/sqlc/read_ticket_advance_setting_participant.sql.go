// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_ticket_advance_setting_participant.sql

package sqlc

import (
	"context"
)

const countTicketAdvanceSettingParticipantsByType = `-- name: CountTicketAdvanceSettingParticipantsByType :one
SELECT COUNT(*)
FROM ticket_advance_setting_participants
WHERE workspace_id = ? AND ticket_id = ? AND type = ?
`

type CountTicketAdvanceSettingParticipantsByTypeParams struct {
	WorkspaceID string
	TicketID    int64
	Type        int8
}

func (q *Queries) CountTicketAdvanceSettingParticipantsByType(ctx context.Context, arg CountTicketAdvanceSettingParticipantsByTypeParams) (int64, error) {
	row := q.queryRow(ctx, q.countTicketAdvanceSettingParticipantsByTypeStmt, countTicketAdvanceSettingParticipantsByType, arg.WorkspaceID, arg.TicketID, arg.Type)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listTicketAdvanceSettingParticipants = `-- name: ListTicketAdvanceSettingParticipants :many
SELECT created_at, updated_at, workspace_id, ref_id, participant_id, ticket_id, type, action_type
FROM ticket_advance_setting_participants
WHERE workspace_id = ? AND ticket_id = ?
`

type ListTicketAdvanceSettingParticipantsParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) ListTicketAdvanceSettingParticipants(ctx context.Context, arg ListTicketAdvanceSettingParticipantsParams) ([]TicketAdvanceSettingParticipant, error) {
	rows, err := q.query(ctx, q.listTicketAdvanceSettingParticipantsStmt, listTicketAdvanceSettingParticipants, arg.WorkspaceID, arg.TicketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketAdvanceSettingParticipant
	for rows.Next() {
		var i TicketAdvanceSettingParticipant
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
			&i.RefID,
			&i.ParticipantID,
			&i.TicketID,
			&i.Type,
			&i.ActionType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketAdvanceSettingParticipantsByRefID = `-- name: ListTicketAdvanceSettingParticipantsByRefID :many
SELECT created_at, updated_at, workspace_id, ref_id, participant_id, ticket_id, type, action_type
FROM ticket_advance_setting_participants
WHERE workspace_id = ? AND ticket_id = ? AND ref_id = ?
`

type ListTicketAdvanceSettingParticipantsByRefIDParams struct {
	WorkspaceID string
	TicketID    int64
	RefID       int64
}

func (q *Queries) ListTicketAdvanceSettingParticipantsByRefID(ctx context.Context, arg ListTicketAdvanceSettingParticipantsByRefIDParams) ([]TicketAdvanceSettingParticipant, error) {
	rows, err := q.query(ctx, q.listTicketAdvanceSettingParticipantsByRefIDStmt, listTicketAdvanceSettingParticipantsByRefID, arg.WorkspaceID, arg.TicketID, arg.RefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketAdvanceSettingParticipant
	for rows.Next() {
		var i TicketAdvanceSettingParticipant
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
			&i.RefID,
			&i.ParticipantID,
			&i.TicketID,
			&i.Type,
			&i.ActionType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketAdvanceSettingParticipantsByType = `-- name: ListTicketAdvanceSettingParticipantsByType :many
SELECT created_at, updated_at, workspace_id, ref_id, participant_id, ticket_id, type, action_type
FROM ticket_advance_setting_participants
WHERE workspace_id = ? AND ticket_id = ? AND type = ?
`

type ListTicketAdvanceSettingParticipantsByTypeParams struct {
	WorkspaceID string
	TicketID    int64
	Type        int8
}

func (q *Queries) ListTicketAdvanceSettingParticipantsByType(ctx context.Context, arg ListTicketAdvanceSettingParticipantsByTypeParams) ([]TicketAdvanceSettingParticipant, error) {
	rows, err := q.query(ctx, q.listTicketAdvanceSettingParticipantsByTypeStmt, listTicketAdvanceSettingParticipantsByType, arg.WorkspaceID, arg.TicketID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketAdvanceSettingParticipant
	for rows.Next() {
		var i TicketAdvanceSettingParticipant
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
			&i.RefID,
			&i.ParticipantID,
			&i.TicketID,
			&i.Type,
			&i.ActionType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
