// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_ticket_edge.sql

package sqlc

import (
	"context"
	"strings"
)

const getTicketEdgesByCurrentNodeID = `-- name: GetTicketEdgesByCurrentNodeID :many
SELECT workspace_id, ticket_id, current_node_id, next_node_id, created_at, updated_at
FROM ticket_edges
WHERE workspace_id = ?
  AND ticket_id = ?
  AND current_node_id = ?
`

type GetTicketEdgesByCurrentNodeIDParams struct {
	WorkspaceID   string
	TicketID      int64
	CurrentNodeID int64
}

func (q *Queries) GetTicketEdgesByCurrentNodeID(ctx context.Context, arg GetTicketEdgesByCurrentNodeIDParams) ([]TicketEdge, error) {
	rows, err := q.query(ctx, q.getTicketEdgesByCurrentNodeIDStmt, getTicketEdgesByCurrentNodeID, arg.WorkspaceID, arg.TicketID, arg.CurrentNodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketEdge
	for rows.Next() {
		var i TicketEdge
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.CurrentNodeID,
			&i.NextNodeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProcessedTicketEdges = `-- name: ListProcessedTicketEdges :many
SELECT workspace_id, ticket_id, current_node_id, next_node_id, created_at, updated_at
FROM ticket_edges
WHERE workspace_id = ? AND ticket_id = ? AND (current_node_id IN (/*SLICE:node_ids*/?) OR next_node_id IN (/*SLICE:node_ids*/?))
`

type ListProcessedTicketEdgesParams struct {
	WorkspaceID string
	TicketID    int64
	NodeIds     []int64
}

func (q *Queries) ListProcessedTicketEdges(ctx context.Context, arg ListProcessedTicketEdgesParams) ([]TicketEdge, error) {
	query := listProcessedTicketEdges
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	queryParams = append(queryParams, arg.TicketID)
	if len(arg.NodeIds) > 0 {
		for _, v := range arg.NodeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:node_ids*/?", strings.Repeat(",?", len(arg.NodeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:node_ids*/?", "NULL", 1)
	}
	if len(arg.NodeIds) > 0 {
		for _, v := range arg.NodeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:node_ids*/?", strings.Repeat(",?", len(arg.NodeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:node_ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketEdge
	for rows.Next() {
		var i TicketEdge
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.CurrentNodeID,
			&i.NextNodeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketEdges = `-- name: ListTicketEdges :many
SELECT workspace_id, ticket_id, current_node_id, next_node_id, created_at, updated_at
FROM ticket_edges
WHERE workspace_id = ? AND ticket_id = ?
`

type ListTicketEdgesParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) ListTicketEdges(ctx context.Context, arg ListTicketEdgesParams) ([]TicketEdge, error) {
	rows, err := q.query(ctx, q.listTicketEdgesStmt, listTicketEdges, arg.WorkspaceID, arg.TicketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketEdge
	for rows.Next() {
		var i TicketEdge
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.CurrentNodeID,
			&i.NextNodeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
