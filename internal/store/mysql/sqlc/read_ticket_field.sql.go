// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_ticket_field.sql

package sqlc

import (
	"context"
)

const getTicketField = `-- name: GetTicketField :one
SELECT workspace_id, ticket_id, field_id, info, value
FROM ticket_fields
WHERE workspace_id=? AND ticket_id=? AND field_id=? LIMIT 1
`

type GetTicketFieldParams struct {
	WorkspaceID string
	TicketID    int64
	FieldID     int64
}

func (q *Queries) GetTicketField(ctx context.Context, arg GetTicketFieldParams) (TicketField, error) {
	row := q.queryRow(ctx, q.getTicketFieldStmt, getTicketField, arg.WorkspaceID, arg.TicketID, arg.FieldID)
	var i TicketField
	err := row.Scan(
		&i.WorkspaceID,
		&i.TicketID,
		&i.FieldID,
		&i.Info,
		&i.Value,
	)
	return i, err
}

const listTicketFields = `-- name: ListTicketFields :many
SELECT workspace_id, ticket_id, field_id, info, value
FROM ticket_fields
WHERE workspace_id = ? AND ticket_id = ?
`

type ListTicketFieldsParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) ListTicketFields(ctx context.Context, arg ListTicketFieldsParams) ([]TicketField, error) {
	rows, err := q.query(ctx, q.listTicketFieldsStmt, listTicketFields, arg.WorkspaceID, arg.TicketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketField
	for rows.Next() {
		var i TicketField
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.FieldID,
			&i.Info,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
