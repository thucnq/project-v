// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_ticket_node.sql

package sqlc

import (
	"context"
)

const getStartNodeOfTicket = `-- name: GetStartNodeOfTicket :one
SELECT workspace_id, ticket_id, node_id, assignee_id, status, type, sla, ` + "`" + `option` + "`" + `, deadline, first_response_at, started_at, updated_by, created_at, updated_at
FROM ticket_nodes
WHERE workspace_id = ?
  AND ticket_id = ?
  AND type = 1
`

type GetStartNodeOfTicketParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) GetStartNodeOfTicket(ctx context.Context, arg GetStartNodeOfTicketParams) (TicketNode, error) {
	row := q.queryRow(ctx, q.getStartNodeOfTicketStmt, getStartNodeOfTicket, arg.WorkspaceID, arg.TicketID)
	var i TicketNode
	err := row.Scan(
		&i.WorkspaceID,
		&i.TicketID,
		&i.NodeID,
		&i.AssigneeID,
		&i.Status,
		&i.Type,
		&i.Sla,
		&i.Option,
		&i.Deadline,
		&i.FirstResponseAt,
		&i.StartedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTicketNodeByNodeID = `-- name: GetTicketNodeByNodeID :one
SELECT workspace_id, ticket_id, node_id, assignee_id, status, type, sla, ` + "`" + `option` + "`" + `, deadline, first_response_at, started_at, updated_by, created_at, updated_at
FROM ticket_nodes
WHERE workspace_id = ?
  AND ticket_id = ?
  AND node_id = ?
`

type GetTicketNodeByNodeIDParams struct {
	WorkspaceID string
	TicketID    int64
	NodeID      int64
}

func (q *Queries) GetTicketNodeByNodeID(ctx context.Context, arg GetTicketNodeByNodeIDParams) (TicketNode, error) {
	row := q.queryRow(ctx, q.getTicketNodeByNodeIDStmt, getTicketNodeByNodeID, arg.WorkspaceID, arg.TicketID, arg.NodeID)
	var i TicketNode
	err := row.Scan(
		&i.WorkspaceID,
		&i.TicketID,
		&i.NodeID,
		&i.AssigneeID,
		&i.Status,
		&i.Type,
		&i.Sla,
		&i.Option,
		&i.Deadline,
		&i.FirstResponseAt,
		&i.StartedAt,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCurrentTicketNodes = `-- name: ListCurrentTicketNodes :many
SELECT workspace_id, ticket_id, node_id, assignee_id, status, type, sla, ` + "`" + `option` + "`" + `, deadline, first_response_at, started_at, updated_by, created_at, updated_at
FROM ticket_nodes
WHERE workspace_id = ? AND ticket_id = ? AND status IN (2, 3, 7, 8)
`

type ListCurrentTicketNodesParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) ListCurrentTicketNodes(ctx context.Context, arg ListCurrentTicketNodesParams) ([]TicketNode, error) {
	rows, err := q.query(ctx, q.listCurrentTicketNodesStmt, listCurrentTicketNodes, arg.WorkspaceID, arg.TicketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketNode
	for rows.Next() {
		var i TicketNode
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.NodeID,
			&i.AssigneeID,
			&i.Status,
			&i.Type,
			&i.Sla,
			&i.Option,
			&i.Deadline,
			&i.FirstResponseAt,
			&i.StartedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProcessedTicketNodes = `-- name: ListProcessedTicketNodes :many
SELECT workspace_id, ticket_id, node_id, assignee_id, status, type, sla, ` + "`" + `option` + "`" + `, deadline, first_response_at, started_at, updated_by, created_at, updated_at
FROM ticket_nodes
WHERE workspace_id = ? AND ticket_id = ? AND status <> 1
`

type ListProcessedTicketNodesParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) ListProcessedTicketNodes(ctx context.Context, arg ListProcessedTicketNodesParams) ([]TicketNode, error) {
	rows, err := q.query(ctx, q.listProcessedTicketNodesStmt, listProcessedTicketNodes, arg.WorkspaceID, arg.TicketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketNode
	for rows.Next() {
		var i TicketNode
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.NodeID,
			&i.AssigneeID,
			&i.Status,
			&i.Type,
			&i.Sla,
			&i.Option,
			&i.Deadline,
			&i.FirstResponseAt,
			&i.StartedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTicketNodes = `-- name: ListTicketNodes :many
SELECT workspace_id, ticket_id, node_id, assignee_id, status, type, sla, ` + "`" + `option` + "`" + `, deadline, first_response_at, started_at, updated_by, created_at, updated_at
FROM ticket_nodes
WHERE workspace_id = ? AND ticket_id = ?
`

type ListTicketNodesParams struct {
	WorkspaceID string
	TicketID    int64
}

func (q *Queries) ListTicketNodes(ctx context.Context, arg ListTicketNodesParams) ([]TicketNode, error) {
	rows, err := q.query(ctx, q.listTicketNodesStmt, listTicketNodes, arg.WorkspaceID, arg.TicketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketNode
	for rows.Next() {
		var i TicketNode
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.TicketID,
			&i.NodeID,
			&i.AssigneeID,
			&i.Status,
			&i.Type,
			&i.Sla,
			&i.Option,
			&i.Deadline,
			&i.FirstResponseAt,
			&i.StartedAt,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
