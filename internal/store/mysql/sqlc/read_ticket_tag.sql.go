// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_ticket_tag.sql

package sqlc

import (
	"context"
	"strings"
)

const getTicketTagsByTicketID = `-- name: GetTicketTagsByTicketID :many
SELECT ticket_id, tag_id, tag, created_at, updated_at
FROM ticket_tags
WHERE ticket_id  = ?
`

func (q *Queries) GetTicketTagsByTicketID(ctx context.Context, ticketID int64) ([]TicketTag, error) {
	rows, err := q.query(ctx, q.getTicketTagsByTicketIDStmt, getTicketTagsByTicketID, ticketID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTag
	for rows.Next() {
		var i TicketTag
		if err := rows.Scan(
			&i.TicketID,
			&i.TagID,
			&i.Tag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketTagsByTicketIDs = `-- name: GetTicketTagsByTicketIDs :many
SELECT ticket_id, tag_id, tag, created_at, updated_at
FROM ticket_tags
WHERE ticket_id IN (/*SLICE:ticket_ids*/?)
`

func (q *Queries) GetTicketTagsByTicketIDs(ctx context.Context, ticketIds []int64) ([]TicketTag, error) {
	query := getTicketTagsByTicketIDs
	var queryParams []interface{}
	if len(ticketIds) > 0 {
		for _, v := range ticketIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ticket_ids*/?", strings.Repeat(",?", len(ticketIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ticket_ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketTag
	for rows.Next() {
		var i TicketTag
		if err := rows.Scan(
			&i.TicketID,
			&i.TagID,
			&i.Tag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
