// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_weekly_setting.sql

package sqlc

import (
	"context"
)

const getWeeklySettingsByWorkspaceIDAndShiftID = `-- name: GetWeeklySettingsByWorkspaceIDAndShiftID :many
SELECT workspace_id, shift_id, id, day_of_week, start, end, is_active, has_break_time, is_working_all_day, start_break, end_break, created_at, updated_at
FROM weekly_settings
WHERE workspace_id = ?
    AND shift_id = ?
`

type GetWeeklySettingsByWorkspaceIDAndShiftIDParams struct {
	WorkspaceID string
	ShiftID     int64
}

func (q *Queries) GetWeeklySettingsByWorkspaceIDAndShiftID(ctx context.Context, arg GetWeeklySettingsByWorkspaceIDAndShiftIDParams) ([]WeeklySetting, error) {
	rows, err := q.query(ctx, q.getWeeklySettingsByWorkspaceIDAndShiftIDStmt, getWeeklySettingsByWorkspaceIDAndShiftID, arg.WorkspaceID, arg.ShiftID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WeeklySetting
	for rows.Next() {
		var i WeeklySetting
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.ShiftID,
			&i.ID,
			&i.DayOfWeek,
			&i.Start,
			&i.End,
			&i.IsActive,
			&i.HasBreakTime,
			&i.IsWorkingAllDay,
			&i.StartBreak,
			&i.EndBreak,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
