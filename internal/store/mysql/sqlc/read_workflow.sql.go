// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_workflow.sql

package sqlc

import (
	"context"
	"time"
)

const countWorkflows = `-- name: CountWorkflows :one
SELECT COUNT(*)
FROM workflows
INNER JOIN workflow_groups
    ON workflows.workflow_group_id = workflow_groups.id
WHERE workflows.workspace_id = ?
  AND ( -- Nếu get_of_group_child là false, chỉ lấy các workflows thuộc group hiện tại
        (workflows.workflow_group_id = ?) OR workflows.workflow_group_id IN (
                                                    SELECT id
                                                    FROM workflow_groups
                                                    WHERE workflow_groups.left_bower >= ?
                                                      AND workflow_groups.right_bower <= ?)
    )
  AND (workflows.state = ? OR workflows.state IS NULL OR ? = 0)
  AND ((? = 0) OR (workflows.is_published = ? AND ? = 1) OR (workflows.is_published = FALSE AND ? = 2))
  AND ((? = '') OR (workflows.name LIKE ?))
`

type CountWorkflowsParams struct {
	WorkspaceID     string
	WorkflowGroupID int64
	LeftBower       int16
	RightBower      int16
	State           int8
	Column6         interface{}
	Column7         interface{}
	IsPublished     bool
	Column9         interface{}
	Column10        interface{}
	Column11        interface{}
	Name            string
}

func (q *Queries) CountWorkflows(ctx context.Context, arg CountWorkflowsParams) (int64, error) {
	row := q.queryRow(ctx, q.countWorkflowsStmt, countWorkflows,
		arg.WorkspaceID,
		arg.WorkflowGroupID,
		arg.LeftBower,
		arg.RightBower,
		arg.State,
		arg.Column6,
		arg.Column7,
		arg.IsPublished,
		arg.Column9,
		arg.Column10,
		arg.Column11,
		arg.Name,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllWorkflows = `-- name: GetAllWorkflows :many
SELECT workflows.workspace_id, workflows.workflow_group_id, workflows.id, workflows.name, workflows.color_src, workflows.icon_src, workflows.description, workflows.prefix_id, workflows.state, workflows.created_by, workflows.updated_by, workflows.is_published, workflows.created_at, workflows.updated_at,
       workflow_groups.name AS workflow_group_name
FROM workflows
INNER JOIN workflow_groups
    ON workflows.workflow_group_id = workflow_groups.id
WHERE workflows.workspace_id = ?
  AND ( -- Nếu get_of_group_child là false, chỉ lấy các workflows thuộc group hiện tại
        (workflows.workflow_group_id = ?) OR workflows.workflow_group_id IN (
                                                SELECT id
                                                FROM workflow_groups
                                                WHERE workflow_groups.left_bower >= ?
                                                  AND workflow_groups.right_bower <= ?)
    )
  AND (workflows.state = ? OR workflows.state IS NULL OR ? = 0)
  AND ((? = 0) OR (workflows.is_published = ? AND ? = 1) OR (workflows.is_published = FALSE AND ? = 2))
  AND ((? = '') OR (workflows.name LIKE ?))
ORDER BY workflows.id DESC LIMIT ?
`

type GetAllWorkflowsParams struct {
	WorkspaceID     string
	WorkflowGroupID int64
	LeftBower       int16
	RightBower      int16
	State           int8
	Column6         interface{}
	Column7         interface{}
	IsPublished     bool
	Column9         interface{}
	Column10        interface{}
	Column11        interface{}
	Name            string
	Limit           int32
}

type GetAllWorkflowsRow struct {
	WorkspaceID       string
	WorkflowGroupID   int64
	ID                int64
	Name              string
	ColorSrc          string
	IconSrc           string
	Description       string
	PrefixID          int64
	State             int8
	CreatedBy         int64
	UpdatedBy         int64
	IsPublished       bool
	CreatedAt         time.Time
	UpdatedAt         time.Time
	WorkflowGroupName string
}

func (q *Queries) GetAllWorkflows(ctx context.Context, arg GetAllWorkflowsParams) ([]GetAllWorkflowsRow, error) {
	rows, err := q.query(ctx, q.getAllWorkflowsStmt, getAllWorkflows,
		arg.WorkspaceID,
		arg.WorkflowGroupID,
		arg.LeftBower,
		arg.RightBower,
		arg.State,
		arg.Column6,
		arg.Column7,
		arg.IsPublished,
		arg.Column9,
		arg.Column10,
		arg.Column11,
		arg.Name,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWorkflowsRow
	for rows.Next() {
		var i GetAllWorkflowsRow
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowGroupID,
			&i.ID,
			&i.Name,
			&i.ColorSrc,
			&i.IconSrc,
			&i.Description,
			&i.PrefixID,
			&i.State,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkflowGroupName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWorkflowsPagingNext = `-- name: GetAllWorkflowsPagingNext :many
SELECT workflows.workspace_id, workflows.workflow_group_id, workflows.id, workflows.name, workflows.color_src, workflows.icon_src, workflows.description, workflows.prefix_id, workflows.state, workflows.created_by, workflows.updated_by, workflows.is_published, workflows.created_at, workflows.updated_at,
       workflow_groups.name AS workflow_group_name
FROM workflows
INNER JOIN workflow_groups
    ON workflows.workflow_group_id = workflow_groups.id
WHERE workflows.workspace_id = ?
  AND ( -- Nếu get_of_group_child là false, chỉ lấy các workflows thuộc group hiện tại
        (workflows.workflow_group_id = ?) OR workflows.workflow_group_id IN (
                                                        SELECT id
                                                        FROM workflow_groups
                                                        WHERE workflow_groups.left_bower >= ?
                                                          AND workflow_groups.right_bower <= ?)
    )
  AND (workflows.state = ? OR workflows.state IS NULL OR ? = 0)
  AND ((? = 0) OR (workflows.is_published = ? AND ? = 1) OR (workflows.is_published = FALSE AND ? = 2))
  AND ((? = '') OR (workflows.name LIKE ?))
  AND workflows.id < ?
ORDER BY workflows.id DESC
LIMIT ?
`

type GetAllWorkflowsPagingNextParams struct {
	WorkspaceID     string
	WorkflowGroupID int64
	LeftBower       int16
	RightBower      int16
	State           int8
	Column6         interface{}
	Column7         interface{}
	IsPublished     bool
	Column9         interface{}
	Column10        interface{}
	Column11        interface{}
	Name            string
	ID              int64
	Limit           int32
}

type GetAllWorkflowsPagingNextRow struct {
	WorkspaceID       string
	WorkflowGroupID   int64
	ID                int64
	Name              string
	ColorSrc          string
	IconSrc           string
	Description       string
	PrefixID          int64
	State             int8
	CreatedBy         int64
	UpdatedBy         int64
	IsPublished       bool
	CreatedAt         time.Time
	UpdatedAt         time.Time
	WorkflowGroupName string
}

func (q *Queries) GetAllWorkflowsPagingNext(ctx context.Context, arg GetAllWorkflowsPagingNextParams) ([]GetAllWorkflowsPagingNextRow, error) {
	rows, err := q.query(ctx, q.getAllWorkflowsPagingNextStmt, getAllWorkflowsPagingNext,
		arg.WorkspaceID,
		arg.WorkflowGroupID,
		arg.LeftBower,
		arg.RightBower,
		arg.State,
		arg.Column6,
		arg.Column7,
		arg.IsPublished,
		arg.Column9,
		arg.Column10,
		arg.Column11,
		arg.Name,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWorkflowsPagingNextRow
	for rows.Next() {
		var i GetAllWorkflowsPagingNextRow
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowGroupID,
			&i.ID,
			&i.Name,
			&i.ColorSrc,
			&i.IconSrc,
			&i.Description,
			&i.PrefixID,
			&i.State,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkflowGroupName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWorkflowsPagingPrev = `-- name: GetAllWorkflowsPagingPrev :many
SELECT workflows.workspace_id, workflows.workflow_group_id, workflows.id, workflows.name, workflows.color_src, workflows.icon_src, workflows.description, workflows.prefix_id, workflows.state, workflows.created_by, workflows.updated_by, workflows.is_published, workflows.created_at, workflows.updated_at,
       workflow_groups.name AS workflow_group_name
FROM workflows
INNER JOIN workflow_groups
    ON workflows.workflow_group_id = workflow_groups.id
WHERE workflows.workspace_id = ?
  AND ( -- Nếu get_of_group_child là false, chỉ lấy các workflows thuộc group hiện tại
        (workflows.workflow_group_id = ?) OR workflows.workflow_group_id IN (
                                                        SELECT id
                                                        FROM workflow_groups
                                                        WHERE workflow_groups.left_bower >= ?
                                                          AND workflow_groups.right_bower <= ?)
    )
  AND (workflows.state = ? OR workflows.state IS NULL OR ? = 0)
  AND ((? = 0) OR (workflows.is_published = ? AND ? = 1) OR (workflows.is_published = FALSE AND ? = 2))
  AND ((? = '') OR (workflows.name LIKE ?))
  AND workflows.id > ?
ORDER BY workflows.id ASC
LIMIT ?
`

type GetAllWorkflowsPagingPrevParams struct {
	WorkspaceID     string
	WorkflowGroupID int64
	LeftBower       int16
	RightBower      int16
	State           int8
	Column6         interface{}
	Column7         interface{}
	IsPublished     bool
	Column9         interface{}
	Column10        interface{}
	Column11        interface{}
	Name            string
	ID              int64
	Limit           int32
}

type GetAllWorkflowsPagingPrevRow struct {
	WorkspaceID       string
	WorkflowGroupID   int64
	ID                int64
	Name              string
	ColorSrc          string
	IconSrc           string
	Description       string
	PrefixID          int64
	State             int8
	CreatedBy         int64
	UpdatedBy         int64
	IsPublished       bool
	CreatedAt         time.Time
	UpdatedAt         time.Time
	WorkflowGroupName string
}

func (q *Queries) GetAllWorkflowsPagingPrev(ctx context.Context, arg GetAllWorkflowsPagingPrevParams) ([]GetAllWorkflowsPagingPrevRow, error) {
	rows, err := q.query(ctx, q.getAllWorkflowsPagingPrevStmt, getAllWorkflowsPagingPrev,
		arg.WorkspaceID,
		arg.WorkflowGroupID,
		arg.LeftBower,
		arg.RightBower,
		arg.State,
		arg.Column6,
		arg.Column7,
		arg.IsPublished,
		arg.Column9,
		arg.Column10,
		arg.Column11,
		arg.Name,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWorkflowsPagingPrevRow
	for rows.Next() {
		var i GetAllWorkflowsPagingPrevRow
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowGroupID,
			&i.ID,
			&i.Name,
			&i.ColorSrc,
			&i.IconSrc,
			&i.Description,
			&i.PrefixID,
			&i.State,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.IsPublished,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkflowGroupName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkflowByID = `-- name: GetWorkflowByID :one
SELECT
    workflows.workspace_id, workflows.workflow_group_id, workflows.id, workflows.name, workflows.color_src, workflows.icon_src, workflows.description, workflows.prefix_id, workflows.state, workflows.created_by, workflows.updated_by, workflows.is_published, workflows.created_at, workflows.updated_at, workflow_groups.name AS workflow_group_name
FROM workflows
INNER JOIN workflow_groups
    ON workflows.workflow_group_id = workflow_groups.id
WHERE workflows.id = ?
`

type GetWorkflowByIDRow struct {
	WorkspaceID       string
	WorkflowGroupID   int64
	ID                int64
	Name              string
	ColorSrc          string
	IconSrc           string
	Description       string
	PrefixID          int64
	State             int8
	CreatedBy         int64
	UpdatedBy         int64
	IsPublished       bool
	CreatedAt         time.Time
	UpdatedAt         time.Time
	WorkflowGroupName string
}

func (q *Queries) GetWorkflowByID(ctx context.Context, id int64) (GetWorkflowByIDRow, error) {
	row := q.queryRow(ctx, q.getWorkflowByIDStmt, getWorkflowByID, id)
	var i GetWorkflowByIDRow
	err := row.Scan(
		&i.WorkspaceID,
		&i.WorkflowGroupID,
		&i.ID,
		&i.Name,
		&i.ColorSrc,
		&i.IconSrc,
		&i.Description,
		&i.PrefixID,
		&i.State,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.IsPublished,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WorkflowGroupName,
	)
	return i, err
}
