// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: read_workflow_form_field.sql

package sqlc

import (
	"context"
)

const getWorkflowFormField = `-- name: GetWorkflowFormField :one
SELECT workspace_id, workflow_id, id, parent_id, title, hint, type, is_required, version, compressed_option, created_at, updated_at
FROM workflow_form_fields
WHERE workspace_id=? AND workflow_id=? AND id=? LIMIT 1
`

type GetWorkflowFormFieldParams struct {
	WorkspaceID string
	WorkflowID  int64
	ID          int64
}

func (q *Queries) GetWorkflowFormField(ctx context.Context, arg GetWorkflowFormFieldParams) (WorkflowFormField, error) {
	row := q.queryRow(ctx, q.getWorkflowFormFieldStmt, getWorkflowFormField, arg.WorkspaceID, arg.WorkflowID, arg.ID)
	var i WorkflowFormField
	err := row.Scan(
		&i.WorkspaceID,
		&i.WorkflowID,
		&i.ID,
		&i.ParentID,
		&i.Title,
		&i.Hint,
		&i.Type,
		&i.IsRequired,
		&i.Version,
		&i.CompressedOption,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFirstClassWorkflowFormFieldsByWorkflowId = `-- name: ListFirstClassWorkflowFormFieldsByWorkflowId :many
SELECT workspace_id, workflow_id, id, parent_id, title, hint, type, is_required, version, compressed_option, created_at, updated_at
FROM workflow_form_fields
WHERE workspace_id=? AND workflow_id=? AND parent_id = 0
`

type ListFirstClassWorkflowFormFieldsByWorkflowIdParams struct {
	WorkspaceID string
	WorkflowID  int64
}

func (q *Queries) ListFirstClassWorkflowFormFieldsByWorkflowId(ctx context.Context, arg ListFirstClassWorkflowFormFieldsByWorkflowIdParams) ([]WorkflowFormField, error) {
	rows, err := q.query(ctx, q.listFirstClassWorkflowFormFieldsByWorkflowIdStmt, listFirstClassWorkflowFormFieldsByWorkflowId, arg.WorkspaceID, arg.WorkflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowFormField
	for rows.Next() {
		var i WorkflowFormField
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowID,
			&i.ID,
			&i.ParentID,
			&i.Title,
			&i.Hint,
			&i.Type,
			&i.IsRequired,
			&i.Version,
			&i.CompressedOption,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflowFormFieldsByWorkflowId = `-- name: ListWorkflowFormFieldsByWorkflowId :many
SELECT workspace_id, workflow_id, id, parent_id, title, hint, type, is_required, version, compressed_option, created_at, updated_at
FROM workflow_form_fields
WHERE workspace_id=? AND workflow_id=?
`

type ListWorkflowFormFieldsByWorkflowIdParams struct {
	WorkspaceID string
	WorkflowID  int64
}

func (q *Queries) ListWorkflowFormFieldsByWorkflowId(ctx context.Context, arg ListWorkflowFormFieldsByWorkflowIdParams) ([]WorkflowFormField, error) {
	rows, err := q.query(ctx, q.listWorkflowFormFieldsByWorkflowIdStmt, listWorkflowFormFieldsByWorkflowId, arg.WorkspaceID, arg.WorkflowID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkflowFormField
	for rows.Next() {
		var i WorkflowFormField
		if err := rows.Scan(
			&i.WorkspaceID,
			&i.WorkflowID,
			&i.ID,
			&i.ParentID,
			&i.Title,
			&i.Hint,
			&i.Type,
			&i.IsRequired,
			&i.Version,
			&i.CompressedOption,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
