// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: select_tag_workflow_groups.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const getTagWorkflowGroups = `-- name: GetTagWorkflowGroups :many
SELECT t.created_at, t.updated_at, t.workspace_id, tag_id, workflow_group_id, wfg.workspace_id, id, parent_id, name, left_bower, right_bower, workflow_count, h_level, version, wfg.created_at, wfg.updated_at FROM tag_workflow_groups AS t JOIN workflow_groups AS wfg ON t.workflow_group_id=wfg.id
WHERE t.workspace_id=? AND t.tag_id=?
`

type GetTagWorkflowGroupsParams struct {
	WorkspaceID string
	TagID       int64
}

type GetTagWorkflowGroupsRow struct {
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	WorkspaceID     string
	TagID           int64
	WorkflowGroupID int64
	WorkspaceID_2   string
	ID              int64
	ParentID        int64
	Name            string
	LeftBower       int16
	RightBower      int16
	WorkflowCount   int16
	HLevel          int16
	Version         int16
	CreatedAt_2     time.Time
	UpdatedAt_2     time.Time
}

func (q *Queries) GetTagWorkflowGroups(ctx context.Context, arg GetTagWorkflowGroupsParams) ([]GetTagWorkflowGroupsRow, error) {
	rows, err := q.query(ctx, q.getTagWorkflowGroupsStmt, getTagWorkflowGroups, arg.WorkspaceID, arg.TagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagWorkflowGroupsRow
	for rows.Next() {
		var i GetTagWorkflowGroupsRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
			&i.TagID,
			&i.WorkflowGroupID,
			&i.WorkspaceID_2,
			&i.ID,
			&i.ParentID,
			&i.Name,
			&i.LeftBower,
			&i.RightBower,
			&i.WorkflowCount,
			&i.HLevel,
			&i.Version,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
