// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: select_ticket_notification.sql

package sqlc

import (
	"context"
)

const getTicketNotification = `-- name: GetTicketNotification :many
SELECT created_by, updated_by, created_at, updated_at, workspace_id, id, is_published, version, created_request_value, created_request_participant_value, created_request_participant_ref, updated_asignee_value, updated_asignee_participant_value, updated_asignee_participant_ref, updated_ticket_value, updated_ticket_participant_value, updated_ticket_participant_ref, updated_workflow_value, updated_workflow_participant_value, updated_workflow_participant_ref, updated_status_step_value, updated_status_step_participant_value, updated_status_step_participant_ref, updated_comment_value, updated_comment_participant_value, updated_comment_participant_ref, updated_follower_or_supporter_value, updated_follower_or_supporter_participant_value, updated_follower_or_supporter_participant_ref, updated_rating_service_value, updated_rating_service_participant_value, updated_rating_service_participant_ref, almost_expired_first_response_value, almost_expired_first_response_participant_value, almost_expired_first_response_participant_ref, almost_expired_process_ticket_value, almost_expired_process_ticket_participant_value, almost_expired_process_ticket_participant_ref, expired_first_response_value, expired_first_response_participant_value, expired_first_response_participant_ref, expired_process_ticket_value, expired_process_ticket_participant_value, expired_process_ticket_participant_ref
FROM ticket_notifications
WHERE workspace_id=? LIMIT ? OFFSET ?
`

type GetTicketNotificationParams struct {
	WorkspaceID string
	Limit       int32
	Offset      int32
}

func (q *Queries) GetTicketNotification(ctx context.Context, arg GetTicketNotificationParams) ([]TicketNotification, error) {
	rows, err := q.query(ctx, q.getTicketNotificationStmt, getTicketNotification, arg.WorkspaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketNotification
	for rows.Next() {
		var i TicketNotification
		if err := rows.Scan(
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
			&i.ID,
			&i.IsPublished,
			&i.Version,
			&i.CreatedRequestValue,
			&i.CreatedRequestParticipantValue,
			&i.CreatedRequestParticipantRef,
			&i.UpdatedAsigneeValue,
			&i.UpdatedAsigneeParticipantValue,
			&i.UpdatedAsigneeParticipantRef,
			&i.UpdatedTicketValue,
			&i.UpdatedTicketParticipantValue,
			&i.UpdatedTicketParticipantRef,
			&i.UpdatedWorkflowValue,
			&i.UpdatedWorkflowParticipantValue,
			&i.UpdatedWorkflowParticipantRef,
			&i.UpdatedStatusStepValue,
			&i.UpdatedStatusStepParticipantValue,
			&i.UpdatedStatusStepParticipantRef,
			&i.UpdatedCommentValue,
			&i.UpdatedCommentParticipantValue,
			&i.UpdatedCommentParticipantRef,
			&i.UpdatedFollowerOrSupporterValue,
			&i.UpdatedFollowerOrSupporterParticipantValue,
			&i.UpdatedFollowerOrSupporterParticipantRef,
			&i.UpdatedRatingServiceValue,
			&i.UpdatedRatingServiceParticipantValue,
			&i.UpdatedRatingServiceParticipantRef,
			&i.AlmostExpiredFirstResponseValue,
			&i.AlmostExpiredFirstResponseParticipantValue,
			&i.AlmostExpiredFirstResponseParticipantRef,
			&i.AlmostExpiredProcessTicketValue,
			&i.AlmostExpiredProcessTicketParticipantValue,
			&i.AlmostExpiredProcessTicketParticipantRef,
			&i.ExpiredFirstResponseValue,
			&i.ExpiredFirstResponseParticipantValue,
			&i.ExpiredFirstResponseParticipantRef,
			&i.ExpiredProcessTicketValue,
			&i.ExpiredProcessTicketParticipantValue,
			&i.ExpiredProcessTicketParticipantRef,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTicketNotificationByID = `-- name: GetTicketNotificationByID :one
SELECT created_by, updated_by, created_at, updated_at, workspace_id, id, is_published, version, created_request_value, created_request_participant_value, created_request_participant_ref, updated_asignee_value, updated_asignee_participant_value, updated_asignee_participant_ref, updated_ticket_value, updated_ticket_participant_value, updated_ticket_participant_ref, updated_workflow_value, updated_workflow_participant_value, updated_workflow_participant_ref, updated_status_step_value, updated_status_step_participant_value, updated_status_step_participant_ref, updated_comment_value, updated_comment_participant_value, updated_comment_participant_ref, updated_follower_or_supporter_value, updated_follower_or_supporter_participant_value, updated_follower_or_supporter_participant_ref, updated_rating_service_value, updated_rating_service_participant_value, updated_rating_service_participant_ref, almost_expired_first_response_value, almost_expired_first_response_participant_value, almost_expired_first_response_participant_ref, almost_expired_process_ticket_value, almost_expired_process_ticket_participant_value, almost_expired_process_ticket_participant_ref, expired_first_response_value, expired_first_response_participant_value, expired_first_response_participant_ref, expired_process_ticket_value, expired_process_ticket_participant_value, expired_process_ticket_participant_ref
FROM ticket_notifications
WHERE workspace_id=? AND id=? LIMIT 1
`

type GetTicketNotificationByIDParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) GetTicketNotificationByID(ctx context.Context, arg GetTicketNotificationByIDParams) (TicketNotification, error) {
	row := q.queryRow(ctx, q.getTicketNotificationByIDStmt, getTicketNotificationByID, arg.WorkspaceID, arg.ID)
	var i TicketNotification
	err := row.Scan(
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WorkspaceID,
		&i.ID,
		&i.IsPublished,
		&i.Version,
		&i.CreatedRequestValue,
		&i.CreatedRequestParticipantValue,
		&i.CreatedRequestParticipantRef,
		&i.UpdatedAsigneeValue,
		&i.UpdatedAsigneeParticipantValue,
		&i.UpdatedAsigneeParticipantRef,
		&i.UpdatedTicketValue,
		&i.UpdatedTicketParticipantValue,
		&i.UpdatedTicketParticipantRef,
		&i.UpdatedWorkflowValue,
		&i.UpdatedWorkflowParticipantValue,
		&i.UpdatedWorkflowParticipantRef,
		&i.UpdatedStatusStepValue,
		&i.UpdatedStatusStepParticipantValue,
		&i.UpdatedStatusStepParticipantRef,
		&i.UpdatedCommentValue,
		&i.UpdatedCommentParticipantValue,
		&i.UpdatedCommentParticipantRef,
		&i.UpdatedFollowerOrSupporterValue,
		&i.UpdatedFollowerOrSupporterParticipantValue,
		&i.UpdatedFollowerOrSupporterParticipantRef,
		&i.UpdatedRatingServiceValue,
		&i.UpdatedRatingServiceParticipantValue,
		&i.UpdatedRatingServiceParticipantRef,
		&i.AlmostExpiredFirstResponseValue,
		&i.AlmostExpiredFirstResponseParticipantValue,
		&i.AlmostExpiredFirstResponseParticipantRef,
		&i.AlmostExpiredProcessTicketValue,
		&i.AlmostExpiredProcessTicketParticipantValue,
		&i.AlmostExpiredProcessTicketParticipantRef,
		&i.ExpiredFirstResponseValue,
		&i.ExpiredFirstResponseParticipantValue,
		&i.ExpiredFirstResponseParticipantRef,
		&i.ExpiredProcessTicketValue,
		&i.ExpiredProcessTicketParticipantValue,
		&i.ExpiredProcessTicketParticipantRef,
	)
	return i, err
}
