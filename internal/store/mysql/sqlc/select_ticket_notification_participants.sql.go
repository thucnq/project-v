// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: select_ticket_notification_participants.sql

package sqlc

import (
	"context"
)

const getTicketNotificationParticipants = `-- name: GetTicketNotificationParticipants :many
SELECT created_at, updated_at, workspace_id, ref_id, participant_id, type
FROM ticket_notification_participants
WHERE workspace_id=? AND ref_id=?
`

type GetTicketNotificationParticipantsParams struct {
	WorkspaceID string
	RefID       int64
}

func (q *Queries) GetTicketNotificationParticipants(ctx context.Context, arg GetTicketNotificationParticipantsParams) ([]TicketNotificationParticipant, error) {
	rows, err := q.query(ctx, q.getTicketNotificationParticipantsStmt, getTicketNotificationParticipants, arg.WorkspaceID, arg.RefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TicketNotificationParticipant
	for rows.Next() {
		var i TicketNotificationParticipant
		if err := rows.Scan(
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.WorkspaceID,
			&i.RefID,
			&i.ParticipantID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
