// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_currency.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createCurrency = `-- name: CreateCurrency :execresult
INSERT INTO currencies
(workspace_id, id, name, code, created_at, updated_at)
VALUES  (?, ?, ?, ?, ?, ?)
`

type CreateCurrencyParams struct {
	WorkspaceID string
	ID          int64
	Name        string
	Code        string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (sql.Result, error) {
	return q.exec(ctx, q.createCurrencyStmt, createCurrency,
		arg.WorkspaceID,
		arg.ID,
		arg.Name,
		arg.Code,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteCurrency = `-- name: DeleteCurrency :execresult
DELETE FROM currencies WHERE workspace_id = ? AND id = ?
`

type DeleteCurrencyParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) DeleteCurrency(ctx context.Context, arg DeleteCurrencyParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteCurrencyStmt, deleteCurrency, arg.WorkspaceID, arg.ID)
}

const updateCurrency = `-- name: UpdateCurrency :execresult
UPDATE currencies SET name=?, code=?, updated_at=? WHERE workspace_id = ? AND id = ?
`

type UpdateCurrencyParams struct {
	Name        string
	Code        string
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (sql.Result, error) {
	return q.exec(ctx, q.updateCurrencyStmt, updateCurrency,
		arg.Name,
		arg.Code,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
}
