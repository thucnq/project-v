// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_node.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createNode = `-- name: CreateNode :execresult
INSERT INTO nodes
(workspace_id, workflow_id, id, ` + "`" + `type` + "`" + `, compressed_option, sla_id, created_at, updated_at)
VALUES(?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateNodeParams struct {
	WorkspaceID      string
	WorkflowID       int64
	ID               int64
	Type             int8
	CompressedOption json.RawMessage
	SlaID            int64
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (sql.Result, error) {
	return q.exec(ctx, q.createNodeStmt, createNode,
		arg.WorkspaceID,
		arg.WorkflowID,
		arg.ID,
		arg.Type,
		arg.CompressedOption,
		arg.SlaID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteAllWorkflowNodes = `-- name: DeleteAllWorkflowNodes :execresult
DELETE FROM nodes
WHERE workspace_id = ?
  AND workflow_id = ?
`

type DeleteAllWorkflowNodesParams struct {
	WorkspaceID string
	WorkflowID  int64
}

func (q *Queries) DeleteAllWorkflowNodes(ctx context.Context, arg DeleteAllWorkflowNodesParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteAllWorkflowNodesStmt, deleteAllWorkflowNodes, arg.WorkspaceID, arg.WorkflowID)
}

const deleteNode = `-- name: DeleteNode :execresult
DELETE FROM nodes
WHERE workspace_id = ?
  AND workflow_id = ?
  AND id = ?
`

type DeleteNodeParams struct {
	WorkspaceID string
	WorkflowID  int64
	ID          int64
}

func (q *Queries) DeleteNode(ctx context.Context, arg DeleteNodeParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteNodeStmt, deleteNode, arg.WorkspaceID, arg.WorkflowID, arg.ID)
}

const updateNode = `-- name: UpdateNode :execresult
UPDATE nodes
SET ` + "`" + `type` + "`" + ` = ?, compressed_option = ?, sla_id = ?, updated_at = ?
WHERE workspace_id = ?
  AND workflow_id = ?
  AND id = ?
`

type UpdateNodeParams struct {
	Type             int8
	CompressedOption json.RawMessage
	SlaID            int64
	UpdatedAt        time.Time
	WorkspaceID      string
	WorkflowID       int64
	ID               int64
}

func (q *Queries) UpdateNode(ctx context.Context, arg UpdateNodeParams) (sql.Result, error) {
	return q.exec(ctx, q.updateNodeStmt, updateNode,
		arg.Type,
		arg.CompressedOption,
		arg.SlaID,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.WorkflowID,
		arg.ID,
	)
}

const updateSlaIDOfNodes = `-- name: UpdateSlaIDOfNodes :execresult
UPDATE nodes
SET sla_id = ?
WHERE workspace_id = ?
  AND sla_id = ?
`

type UpdateSlaIDOfNodesParams struct {
	SlaID       int64
	WorkspaceID string
	SlaID_2     int64
}

func (q *Queries) UpdateSlaIDOfNodes(ctx context.Context, arg UpdateSlaIDOfNodesParams) (sql.Result, error) {
	return q.exec(ctx, q.updateSlaIDOfNodesStmt, updateSlaIDOfNodes, arg.SlaID, arg.WorkspaceID, arg.SlaID_2)
}
