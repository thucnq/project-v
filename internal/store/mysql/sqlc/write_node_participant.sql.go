// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_node_participant.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createNodeParticipant = `-- name: CreateNodeParticipant :execresult
INSERT IGNORE INTO node_participants
(workspace_id, node_id, participant_id, role_type, participant_type, created_at, updated_at)
VALUES(?, ?, ?, ?, ?, ?, ?)
`

type CreateNodeParticipantParams struct {
	WorkspaceID     string
	NodeID          int64
	ParticipantID   string
	RoleType        int8
	ParticipantType int8
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

func (q *Queries) CreateNodeParticipant(ctx context.Context, arg CreateNodeParticipantParams) (sql.Result, error) {
	return q.exec(ctx, q.createNodeParticipantStmt, createNodeParticipant,
		arg.WorkspaceID,
		arg.NodeID,
		arg.ParticipantID,
		arg.RoleType,
		arg.ParticipantType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteNodeParticipant = `-- name: DeleteNodeParticipant :execresult
DELETE FROM node_participants
WHERE workspace_id = ?
  AND node_id = ?
  AND participant_id = ?
  AND role_type = ?
`

type DeleteNodeParticipantParams struct {
	WorkspaceID   string
	NodeID        int64
	ParticipantID string
	RoleType      int8
}

func (q *Queries) DeleteNodeParticipant(ctx context.Context, arg DeleteNodeParticipantParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteNodeParticipantStmt, deleteNodeParticipant,
		arg.WorkspaceID,
		arg.NodeID,
		arg.ParticipantID,
		arg.RoleType,
	)
}

const deleteNodeParticipantByNodeID = `-- name: DeleteNodeParticipantByNodeID :execresult
DELETE FROM node_participants
WHERE workspace_id = ?
  AND node_id = ?
`

type DeleteNodeParticipantByNodeIDParams struct {
	WorkspaceID string
	NodeID      int64
}

func (q *Queries) DeleteNodeParticipantByNodeID(ctx context.Context, arg DeleteNodeParticipantByNodeIDParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteNodeParticipantByNodeIDStmt, deleteNodeParticipantByNodeID, arg.WorkspaceID, arg.NodeID)
}
