// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_on_hold_request.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createOnHoldRequest = `-- name: CreateOnHoldRequest :execresult
insert into on_hold_requests (workspace_id, ticket_id, node_id, id,
                              requester_id, reason, image_urls, attached_files,
                              status, created_at, updated_at)
values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateOnHoldRequestParams struct {
	WorkspaceID   string
	TicketID      int64
	NodeID        int64
	ID            int64
	RequesterID   int64
	Reason        sql.NullString
	ImageUrls     json.RawMessage
	AttachedFiles json.RawMessage
	Status        int8
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateOnHoldRequest(ctx context.Context, arg CreateOnHoldRequestParams) (sql.Result, error) {
	return q.exec(ctx, q.createOnHoldRequestStmt, createOnHoldRequest,
		arg.WorkspaceID,
		arg.TicketID,
		arg.NodeID,
		arg.ID,
		arg.RequesterID,
		arg.Reason,
		arg.ImageUrls,
		arg.AttachedFiles,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const updateOnHoldRequestStatus = `-- name: UpdateOnHoldRequestStatus :execresult
update on_hold_requests
set status = ?, updated_at = ?
where workspace_id = ? AND ticket_id = ? AND node_id = ? AND id = ?
`

type UpdateOnHoldRequestStatusParams struct {
	Status      int8
	UpdatedAt   time.Time
	WorkspaceID string
	TicketID    int64
	NodeID      int64
	ID          int64
}

func (q *Queries) UpdateOnHoldRequestStatus(ctx context.Context, arg UpdateOnHoldRequestStatusParams) (sql.Result, error) {
	return q.exec(ctx, q.updateOnHoldRequestStatusStmt, updateOnHoldRequestStatus,
		arg.Status,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.TicketID,
		arg.NodeID,
		arg.ID,
	)
}
