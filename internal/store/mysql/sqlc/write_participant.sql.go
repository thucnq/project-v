// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_participant.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createIfNotExistParticipant = `-- name: CreateIfNotExistParticipant :execresult
INSERT IGNORE INTO participants
    (workspace_id, id, name, ` + "`" + `type` + "`" + `, created_at, updated_at)
VALUES(?, ?, ?, ?, ?, ?)
`

type CreateIfNotExistParticipantParams struct {
	WorkspaceID string
	ID          string
	Name        string
	Type        int8
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateIfNotExistParticipant(ctx context.Context, arg CreateIfNotExistParticipantParams) (sql.Result, error) {
	return q.exec(ctx, q.createIfNotExistParticipantStmt, createIfNotExistParticipant,
		arg.WorkspaceID,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createParticipant = `-- name: CreateParticipant :execresult

INSERT INTO participants
    (workspace_id, id, name, ` + "`" + `type` + "`" + `, created_at, updated_at)
VALUES(?, ?, ?, ?, ?, ?)
`

type CreateParticipantParams struct {
	WorkspaceID string
	ID          string
	Name        string
	Type        int8
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

// TODO: Minh - need check again
func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) (sql.Result, error) {
	return q.exec(ctx, q.createParticipantStmt, createParticipant,
		arg.WorkspaceID,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteParticipantByWorkspaceIDAndID = `-- name: DeleteParticipantByWorkspaceIDAndID :exec
DELETE FROM participants
WHERE workspace_id = ?
  AND id = ?
`

type DeleteParticipantByWorkspaceIDAndIDParams struct {
	WorkspaceID string
	ID          string
}

func (q *Queries) DeleteParticipantByWorkspaceIDAndID(ctx context.Context, arg DeleteParticipantByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.deleteParticipantByWorkspaceIDAndIDStmt, deleteParticipantByWorkspaceIDAndID, arg.WorkspaceID, arg.ID)
	return err
}

const updateParticipantByWorkspaceIDAndID = `-- name: UpdateParticipantByWorkspaceIDAndID :exec
UPDATE participants
SET name = ?, ` + "`" + `type` + "`" + ` = ?, updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateParticipantByWorkspaceIDAndIDParams struct {
	Name        string
	Type        int8
	UpdatedAt   time.Time
	WorkspaceID string
	ID          string
}

func (q *Queries) UpdateParticipantByWorkspaceIDAndID(ctx context.Context, arg UpdateParticipantByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.updateParticipantByWorkspaceIDAndIDStmt, updateParticipantByWorkspaceIDAndID,
		arg.Name,
		arg.Type,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}
