// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_participant_member.sql

package sqlc

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const createIfNotExistParticipantMember = `-- name: CreateIfNotExistParticipantMember :execresult
INSERT IGNORE INTO participant_members
    (workspace_id, participant_id, user_id, created_at, updated_at)
VALUES(?, ?, ?, ?, ?)
`

type CreateIfNotExistParticipantMemberParams struct {
	WorkspaceID   string
	ParticipantID string
	UserID        int64
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateIfNotExistParticipantMember(ctx context.Context, arg CreateIfNotExistParticipantMemberParams) (sql.Result, error) {
	return q.exec(ctx, q.createIfNotExistParticipantMemberStmt, createIfNotExistParticipantMember,
		arg.WorkspaceID,
		arg.ParticipantID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteParticipantMember = `-- name: DeleteParticipantMember :exec
DELETE FROM participant_members
WHERE workspace_id = ?
    AND participant_id = ?
    AND user_id = ?
`

type DeleteParticipantMemberParams struct {
	WorkspaceID   string
	ParticipantID string
	UserID        int64
}

func (q *Queries) DeleteParticipantMember(ctx context.Context, arg DeleteParticipantMemberParams) error {
	_, err := q.exec(ctx, q.deleteParticipantMemberStmt, deleteParticipantMember, arg.WorkspaceID, arg.ParticipantID, arg.UserID)
	return err
}

const deleteParticipantMembers = `-- name: DeleteParticipantMembers :exec
DELETE FROM participant_members
WHERE workspace_id = ?
  AND participant_id = ?
  AND user_id IN (/*SLICE:user_ids*/?)
`

type DeleteParticipantMembersParams struct {
	WorkspaceID   string
	ParticipantID string
	UserIds       []int64
}

func (q *Queries) DeleteParticipantMembers(ctx context.Context, arg DeleteParticipantMembersParams) error {
	query := deleteParticipantMembers
	var queryParams []interface{}
	queryParams = append(queryParams, arg.WorkspaceID)
	queryParams = append(queryParams, arg.ParticipantID)
	if len(arg.UserIds) > 0 {
		for _, v := range arg.UserIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:user_ids*/?", strings.Repeat(",?", len(arg.UserIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:user_ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const deleteParticipantMembersByParticipantID = `-- name: DeleteParticipantMembersByParticipantID :exec
DELETE FROM participant_members
WHERE workspace_id = ?
    AND participant_id = ?
`

type DeleteParticipantMembersByParticipantIDParams struct {
	WorkspaceID   string
	ParticipantID string
}

func (q *Queries) DeleteParticipantMembersByParticipantID(ctx context.Context, arg DeleteParticipantMembersByParticipantIDParams) error {
	_, err := q.exec(ctx, q.deleteParticipantMembersByParticipantIDStmt, deleteParticipantMembersByParticipantID, arg.WorkspaceID, arg.ParticipantID)
	return err
}
