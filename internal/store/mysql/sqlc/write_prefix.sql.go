// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_prefix.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createPrefix = `-- name: CreatePrefix :execresult
INSERT INTO prefixs (
    workspace_id, id, name, description, is_default, status, updated_by, created_at, updated_at
)
VALUES (
        ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreatePrefixParams struct {
	WorkspaceID string
	ID          int64
	Name        string
	Description string
	IsDefault   bool
	Status      int8
	UpdatedBy   int64
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreatePrefix(ctx context.Context, arg CreatePrefixParams) (sql.Result, error) {
	return q.exec(ctx, q.createPrefixStmt, createPrefix,
		arg.WorkspaceID,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsDefault,
		arg.Status,
		arg.UpdatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deletePrefixByWorkspaceIDAndID = `-- name: DeletePrefixByWorkspaceIDAndID :exec
DELETE FROM prefixs
WHERE workspace_id = ?
  AND id = ?
`

type DeletePrefixByWorkspaceIDAndIDParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) DeletePrefixByWorkspaceIDAndID(ctx context.Context, arg DeletePrefixByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.deletePrefixByWorkspaceIDAndIDStmt, deletePrefixByWorkspaceIDAndID, arg.WorkspaceID, arg.ID)
	return err
}

const updateIsDefaultPrefixByWorkspaceIDAndID = `-- name: UpdateIsDefaultPrefixByWorkspaceIDAndID :exec
UPDATE prefixs
SET is_default = ?,
    status = ?,
    updated_by = ?,
    updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateIsDefaultPrefixByWorkspaceIDAndIDParams struct {
	IsDefault   bool
	Status      int8
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateIsDefaultPrefixByWorkspaceIDAndID(ctx context.Context, arg UpdateIsDefaultPrefixByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.updateIsDefaultPrefixByWorkspaceIDAndIDStmt, updateIsDefaultPrefixByWorkspaceIDAndID,
		arg.IsDefault,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}

const updatePrefixByWorkspaceIDAndID = `-- name: UpdatePrefixByWorkspaceIDAndID :exec
UPDATE prefixs
SET name = ?, description = ?, is_default = ?,
    status = ?, updated_by = ?, updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdatePrefixByWorkspaceIDAndIDParams struct {
	Name        string
	Description string
	IsDefault   bool
	Status      int8
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdatePrefixByWorkspaceIDAndID(ctx context.Context, arg UpdatePrefixByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.updatePrefixByWorkspaceIDAndIDStmt, updatePrefixByWorkspaceIDAndID,
		arg.Name,
		arg.Description,
		arg.IsDefault,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}

const updateStatusPrefixByWorkspaceIDAndID = `-- name: UpdateStatusPrefixByWorkspaceIDAndID :exec
UPDATE prefixs
SET status = ?,
    updated_by = ?,
    updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateStatusPrefixByWorkspaceIDAndIDParams struct {
	Status      int8
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateStatusPrefixByWorkspaceIDAndID(ctx context.Context, arg UpdateStatusPrefixByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.updateStatusPrefixByWorkspaceIDAndIDStmt, updateStatusPrefixByWorkspaceIDAndID,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}
