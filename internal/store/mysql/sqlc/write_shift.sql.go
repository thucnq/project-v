// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_shift.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createShift = `-- name: CreateShift :execresult
INSERT INTO shifts (
    workspace_id, id, title, description, is_default, timezone_idx, status, working_type, updated_by, created_at, updated_at
)
VALUES (
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateShiftParams struct {
	WorkspaceID string
	ID          int64
	Title       string
	Description string
	IsDefault   bool
	TimezoneIdx int8
	Status      int8
	WorkingType int8
	UpdatedBy   int64
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateShift(ctx context.Context, arg CreateShiftParams) (sql.Result, error) {
	return q.exec(ctx, q.createShiftStmt, createShift,
		arg.WorkspaceID,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.IsDefault,
		arg.TimezoneIdx,
		arg.Status,
		arg.WorkingType,
		arg.UpdatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteShiftByWorkspaceIDAndID = `-- name: DeleteShiftByWorkspaceIDAndID :exec
DELETE FROM shifts
WHERE workspace_id = ?
  AND id = ?
`

type DeleteShiftByWorkspaceIDAndIDParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) DeleteShiftByWorkspaceIDAndID(ctx context.Context, arg DeleteShiftByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.deleteShiftByWorkspaceIDAndIDStmt, deleteShiftByWorkspaceIDAndID, arg.WorkspaceID, arg.ID)
	return err
}

const updateIsDefaultShiftByWorkspaceIDAndID = `-- name: UpdateIsDefaultShiftByWorkspaceIDAndID :exec
UPDATE shifts
SET is_default = ?,
    status = ?,
    updated_by = ?,
    updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateIsDefaultShiftByWorkspaceIDAndIDParams struct {
	IsDefault   bool
	Status      int8
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateIsDefaultShiftByWorkspaceIDAndID(ctx context.Context, arg UpdateIsDefaultShiftByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.updateIsDefaultShiftByWorkspaceIDAndIDStmt, updateIsDefaultShiftByWorkspaceIDAndID,
		arg.IsDefault,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}

const updateOldDefaultShift = `-- name: UpdateOldDefaultShift :exec
UPDATE shifts
SET is_default = false,
    updated_by = ?,
    updated_at = ?
WHERE workspace_id = ?
  AND is_default = true
`

type UpdateOldDefaultShiftParams struct {
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
}

func (q *Queries) UpdateOldDefaultShift(ctx context.Context, arg UpdateOldDefaultShiftParams) error {
	_, err := q.exec(ctx, q.updateOldDefaultShiftStmt, updateOldDefaultShift, arg.UpdatedBy, arg.UpdatedAt, arg.WorkspaceID)
	return err
}

const updateShiftByWorkspaceIDAndID = `-- name: UpdateShiftByWorkspaceIDAndID :exec
UPDATE shifts
SET title = ?, description = ?, is_default = ?, timezone_idx = ?,
    status = ?, working_type = ?, updated_by = ?, updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateShiftByWorkspaceIDAndIDParams struct {
	Title       string
	Description string
	IsDefault   bool
	TimezoneIdx int8
	Status      int8
	WorkingType int8
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateShiftByWorkspaceIDAndID(ctx context.Context, arg UpdateShiftByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.updateShiftByWorkspaceIDAndIDStmt, updateShiftByWorkspaceIDAndID,
		arg.Title,
		arg.Description,
		arg.IsDefault,
		arg.TimezoneIdx,
		arg.Status,
		arg.WorkingType,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}

const updateStatusShiftByWorkspaceIDAndID = `-- name: UpdateStatusShiftByWorkspaceIDAndID :exec
UPDATE shifts
SET status = ?,
    updated_by = ?,
    updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateStatusShiftByWorkspaceIDAndIDParams struct {
	Status      int8
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateStatusShiftByWorkspaceIDAndID(ctx context.Context, arg UpdateStatusShiftByWorkspaceIDAndIDParams) error {
	_, err := q.exec(ctx, q.updateStatusShiftByWorkspaceIDAndIDStmt, updateStatusShiftByWorkspaceIDAndID,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}
