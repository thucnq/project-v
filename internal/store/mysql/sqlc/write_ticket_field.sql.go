// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_ticket_field.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createTicketField = `-- name: CreateTicketField :execresult
INSERT INTO ticket_fields(
    workspace_id, ticket_id, field_id, info, value
) VALUES(?, ?, ?, ?, ?)
`

type CreateTicketFieldParams struct {
	WorkspaceID string
	TicketID    int64
	FieldID     int64
	Info        json.RawMessage
	Value       json.RawMessage
}

func (q *Queries) CreateTicketField(ctx context.Context, arg CreateTicketFieldParams) (sql.Result, error) {
	return q.exec(ctx, q.createTicketFieldStmt, createTicketField,
		arg.WorkspaceID,
		arg.TicketID,
		arg.FieldID,
		arg.Info,
		arg.Value,
	)
}

const upsertTicketField = `-- name: UpsertTicketField :execresult
INSERT INTO ticket_fields (workspace_id, ticket_id, field_id, info, value) VALUES (?, ?, ?, ?, ?)
    ON DUPLICATE KEY UPDATE info=VALUES(info),value=VALUES(value)
`

type UpsertTicketFieldParams struct {
	WorkspaceID string
	TicketID    int64
	FieldID     int64
	Info        json.RawMessage
	Value       json.RawMessage
}

func (q *Queries) UpsertTicketField(ctx context.Context, arg UpsertTicketFieldParams) (sql.Result, error) {
	return q.exec(ctx, q.upsertTicketFieldStmt, upsertTicketField,
		arg.WorkspaceID,
		arg.TicketID,
		arg.FieldID,
		arg.Info,
		arg.Value,
	)
}
