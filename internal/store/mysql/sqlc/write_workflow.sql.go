// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_workflow.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createWorkflow = `-- name: CreateWorkflow :execresult
INSERT INTO workflows (
    id, workspace_id, workflow_group_id, prefix_id, name, color_src, icon_src,
    description, state, created_by, updated_by, is_published, created_at, updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateWorkflowParams struct {
	ID              int64
	WorkspaceID     string
	WorkflowGroupID int64
	PrefixID        int64
	Name            string
	ColorSrc        string
	IconSrc         string
	Description     string
	State           int8
	CreatedBy       int64
	UpdatedBy       int64
	IsPublished     bool
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (sql.Result, error) {
	return q.exec(ctx, q.createWorkflowStmt, createWorkflow,
		arg.ID,
		arg.WorkspaceID,
		arg.WorkflowGroupID,
		arg.PrefixID,
		arg.Name,
		arg.ColorSrc,
		arg.IconSrc,
		arg.Description,
		arg.State,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.IsPublished,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const deleteWorkflowByID = `-- name: DeleteWorkflowByID :execresult
DELETE FROM workflows
WHERE workspace_id = ?
    AND id = ?
`

type DeleteWorkflowByIDParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) DeleteWorkflowByID(ctx context.Context, arg DeleteWorkflowByIDParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteWorkflowByIDStmt, deleteWorkflowByID, arg.WorkspaceID, arg.ID)
}

const updatePrefixIDOfWorkflows = `-- name: UpdatePrefixIDOfWorkflows :execresult
UPDATE workflows
SET prefix_id = ?
WHERE workspace_id = ?
  AND prefix_id = ?
`

type UpdatePrefixIDOfWorkflowsParams struct {
	PrefixID    int64
	WorkspaceID string
	PrefixID_2  int64
}

func (q *Queries) UpdatePrefixIDOfWorkflows(ctx context.Context, arg UpdatePrefixIDOfWorkflowsParams) (sql.Result, error) {
	return q.exec(ctx, q.updatePrefixIDOfWorkflowsStmt, updatePrefixIDOfWorkflows, arg.PrefixID, arg.WorkspaceID, arg.PrefixID_2)
}

const updateWorkflowByWorkspaceIDAndID = `-- name: UpdateWorkflowByWorkspaceIDAndID :execresult
UPDATE workflows
SET
    name = ?, color_src = ?, icon_src = ?,
    description = ?, workflow_group_id = ?, prefix_id = ?,
    state = ?, updated_by = ?, is_published = ?, updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateWorkflowByWorkspaceIDAndIDParams struct {
	Name            string
	ColorSrc        string
	IconSrc         string
	Description     string
	WorkflowGroupID int64
	PrefixID        int64
	State           int8
	UpdatedBy       int64
	IsPublished     bool
	UpdatedAt       time.Time
	WorkspaceID     string
	ID              int64
}

func (q *Queries) UpdateWorkflowByWorkspaceIDAndID(ctx context.Context, arg UpdateWorkflowByWorkspaceIDAndIDParams) (sql.Result, error) {
	return q.exec(ctx, q.updateWorkflowByWorkspaceIDAndIDStmt, updateWorkflowByWorkspaceIDAndID,
		arg.Name,
		arg.ColorSrc,
		arg.IconSrc,
		arg.Description,
		arg.WorkflowGroupID,
		arg.PrefixID,
		arg.State,
		arg.UpdatedBy,
		arg.IsPublished,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
}

const updateWorkflowPublishedByWorkspaceIDAndID = `-- name: UpdateWorkflowPublishedByWorkspaceIDAndID :execresult
UPDATE workflows
SET is_published = ?, updated_by = ?, updated_at = ?
WHERE workspace_id = ?
  AND id = ?
`

type UpdateWorkflowPublishedByWorkspaceIDAndIDParams struct {
	IsPublished bool
	UpdatedBy   int64
	UpdatedAt   time.Time
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateWorkflowPublishedByWorkspaceIDAndID(ctx context.Context, arg UpdateWorkflowPublishedByWorkspaceIDAndIDParams) (sql.Result, error) {
	return q.exec(ctx, q.updateWorkflowPublishedByWorkspaceIDAndIDStmt, updateWorkflowPublishedByWorkspaceIDAndID,
		arg.IsPublished,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
}
