// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: write_workflow_form_field.sql

package sqlc

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createWorkflowFormField = `-- name: CreateWorkflowFormField :execresult
INSERT INTO workflow_form_fields
(workspace_id, workflow_id, id, title, hint, type, is_required, compressed_option, parent_id)
VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateWorkflowFormFieldParams struct {
	WorkspaceID      string
	WorkflowID       int64
	ID               int64
	Title            string
	Hint             string
	Type             int8
	IsRequired       bool
	CompressedOption json.RawMessage
	ParentID         int64
}

func (q *Queries) CreateWorkflowFormField(ctx context.Context, arg CreateWorkflowFormFieldParams) (sql.Result, error) {
	return q.exec(ctx, q.createWorkflowFormFieldStmt, createWorkflowFormField,
		arg.WorkspaceID,
		arg.WorkflowID,
		arg.ID,
		arg.Title,
		arg.Hint,
		arg.Type,
		arg.IsRequired,
		arg.CompressedOption,
		arg.ParentID,
	)
}

const deleteOtherWorkflowFormFields = `-- name: DeleteOtherWorkflowFormFields :execresult
DELETE FROM workflow_form_fields WHERE workspace_id = ? AND workflow_id = ? AND id  NOT IN (?)
`

type DeleteOtherWorkflowFormFieldsParams struct {
	WorkspaceID string
	WorkflowID  int64
	ID          int64
}

func (q *Queries) DeleteOtherWorkflowFormFields(ctx context.Context, arg DeleteOtherWorkflowFormFieldsParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteOtherWorkflowFormFieldsStmt, deleteOtherWorkflowFormFields, arg.WorkspaceID, arg.WorkflowID, arg.ID)
}

const deleteWorkflowFormField = `-- name: DeleteWorkflowFormField :execresult
DELETE FROM workflow_form_fields WHERE workspace_id = ? AND workflow_id = ? AND id = ?
`

type DeleteWorkflowFormFieldParams struct {
	WorkspaceID string
	WorkflowID  int64
	ID          int64
}

func (q *Queries) DeleteWorkflowFormField(ctx context.Context, arg DeleteWorkflowFormFieldParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteWorkflowFormFieldStmt, deleteWorkflowFormField, arg.WorkspaceID, arg.WorkflowID, arg.ID)
}

const deleteWorkflowFormFields = `-- name: DeleteWorkflowFormFields :execresult
DELETE FROM workflow_form_fields WHERE workspace_id = ? AND workflow_id = ? AND id IN (?)
`

type DeleteWorkflowFormFieldsParams struct {
	WorkspaceID string
	WorkflowID  int64
	ID          int64
}

func (q *Queries) DeleteWorkflowFormFields(ctx context.Context, arg DeleteWorkflowFormFieldsParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteWorkflowFormFieldsStmt, deleteWorkflowFormFields, arg.WorkspaceID, arg.WorkflowID, arg.ID)
}

const deleteWorkflowFormFieldsByWorkflowId = `-- name: DeleteWorkflowFormFieldsByWorkflowId :execresult
DELETE FROM workflow_form_fields WHERE workspace_id = ? AND workflow_id = ?
`

type DeleteWorkflowFormFieldsByWorkflowIdParams struct {
	WorkspaceID string
	WorkflowID  int64
}

func (q *Queries) DeleteWorkflowFormFieldsByWorkflowId(ctx context.Context, arg DeleteWorkflowFormFieldsByWorkflowIdParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteWorkflowFormFieldsByWorkflowIdStmt, deleteWorkflowFormFieldsByWorkflowId, arg.WorkspaceID, arg.WorkflowID)
}

const updateWorkflowFormField = `-- name: UpdateWorkflowFormField :execresult
UPDATE workflow_form_fields SET title=?, type=?,is_required=?,compressed_option=?, updated_at=?, version = version + 1 WHERE workspace_id = ? AND parent_id > 0 AND id = ?
`

type UpdateWorkflowFormFieldParams struct {
	Title            string
	Type             int8
	IsRequired       bool
	CompressedOption json.RawMessage
	UpdatedAt        time.Time
	WorkspaceID      string
	ID               int64
}

func (q *Queries) UpdateWorkflowFormField(ctx context.Context, arg UpdateWorkflowFormFieldParams) (sql.Result, error) {
	return q.exec(ctx, q.updateWorkflowFormFieldStmt, updateWorkflowFormField,
		arg.Title,
		arg.Type,
		arg.IsRequired,
		arg.CompressedOption,
		arg.UpdatedAt,
		arg.WorkspaceID,
		arg.ID,
	)
}

const upsertWorkflowFormField = `-- name: UpsertWorkflowFormField :execresult
INSERT INTO workflow_form_fields (workspace_id, workflow_id, id, title, hint, type, is_required, compressed_option, parent_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE title=VALUES(title),type=VALUES(type),is_required=VALUES(is_required),compressed_option=VALUES(compressed_option),parent_id=VALUES(parent_id),updated_at=?, version = version + 1
`

type UpsertWorkflowFormFieldParams struct {
	WorkspaceID      string
	WorkflowID       int64
	ID               int64
	Title            string
	Hint             string
	Type             int8
	IsRequired       bool
	CompressedOption json.RawMessage
	ParentID         int64
	UpdatedAt        time.Time
}

func (q *Queries) UpsertWorkflowFormField(ctx context.Context, arg UpsertWorkflowFormFieldParams) (sql.Result, error) {
	return q.exec(ctx, q.upsertWorkflowFormFieldStmt, upsertWorkflowFormField,
		arg.WorkspaceID,
		arg.WorkflowID,
		arg.ID,
		arg.Title,
		arg.Hint,
		arg.Type,
		arg.IsRequired,
		arg.CompressedOption,
		arg.ParentID,
		arg.UpdatedAt,
	)
}
